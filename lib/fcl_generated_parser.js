/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"program_repetition0":4,"EOF":5,"function_block_declaration":6,"FUNCTION_BLOCK":7,"function_block_name":8,"function_block_declaration_repetition0":9,"function_block_declaration_repetition1":10,"function_block_declaration_repetition2":11,"function_block_declaration_repetition3":12,"function_block_declaration_repetition4":13,"function_block_declaration_repetition5":14,"function_block_declaration_repetition6":15,"END_FUNCTION_BLOCK":16,"fuzzify_block":17,"FUZZIFY":18,"variable_name":19,"fuzzify_block_repetition0":20,"END_FUZZIFY":21,"defuzzify_block":22,"DEFUZZIFY":23,"f_variable_name":24,"defuzzify_block_repetition0":25,"defuzzification_method":26,"default_value":27,"defuzzify_block_option0":28,"END_DEFUZZIFY":29,"rule_block":30,"RULEBLOCK":31,"rule_block_name":32,"operator_definition":33,"rule_block_option0":34,"accumulation_method":35,"rule_block_repetition0":36,"END_RULEBLOCK":37,"options_block":38,"OPTIONS":39,"END_OPTIONS":40,"linguistic_term":41,"TERM":42,"term":43,"ASSIGN":44,"membership_function":45,"SEMICOLON":46,"singleton":47,"points":48,"points_repetition0":49,"points_clause":50,"OPEN_P":51,"point":52,"CLOSE_P":53,"COLON":54,"numeric_literal":55,"METHOD":56,"ASSIGN_TYPE":57,"defuzzification_method_option":58,"COG":59,"COGS":60,"COA":61,"LM":62,"RM":63,"DEFAULT":64,"default_value_options":65,"NC":66,"range":67,"RANGE":68,"DOUBLE_DOT":69,"OR":70,"or_options":71,"AND":72,"and_options":73,"MAX":74,"ASUM":75,"BSUM":76,"MIN":77,"PROD":78,"BDIF":79,"activation_method":80,"ACT":81,"activation_method_options":82,"ACCU":83,"accumulation_method_options":84,"NSUM":85,"rule":86,"RULE":87,"integer_literal":88,"IF":89,"condition":90,"THEN":91,"conclusion":92,"rule_option0":93,"condition_type":94,"condition_repetition0":95,"condition_concat":96,"condition_operator":97,"subcondition":98,"NOT":99,"logic":100,"conclusion_repetition0":101,"logic_concat":102,"IS":103,"logic_option0":104,"weighting_factor":105,"identifier":106,"real_literal":107,"input_declarations":108,"VAR_INPUT":109,"var_declaration":110,"input_declarations_repetition0":111,"END_VAR":112,"output_declarations":113,"VAR_OUTPUT":114,"output_declarations_repetition0":115,"var_declarations":116,"VAR":117,"var_declarations_repetition0":118,"var_types":119,"REAL":120,"INTEGER":121,"ID":122,"signed_integer":123,"sign":124,"INT":125,"PLUS":126,"MINUS":127,"BIN_INT":128,"OCT_INT":129,"HEX_INT":130,"DOT":131,"real_literal_option0":132,"exponent":133,"E":134,"WITH":135,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"FUNCTION_BLOCK",16:"END_FUNCTION_BLOCK",18:"FUZZIFY",21:"END_FUZZIFY",23:"DEFUZZIFY",29:"END_DEFUZZIFY",31:"RULEBLOCK",37:"END_RULEBLOCK",39:"OPTIONS",40:"END_OPTIONS",42:"TERM",44:"ASSIGN",46:"SEMICOLON",51:"OPEN_P",53:"CLOSE_P",54:"COLON",56:"METHOD",57:"ASSIGN_TYPE",59:"COG",60:"COGS",61:"COA",62:"LM",63:"RM",64:"DEFAULT",66:"NC",68:"RANGE",69:"DOUBLE_DOT",70:"OR",72:"AND",74:"MAX",75:"ASUM",76:"BSUM",77:"MIN",78:"PROD",79:"BDIF",81:"ACT",83:"ACCU",85:"NSUM",87:"RULE",89:"IF",91:"THEN",99:"NOT",103:"IS",109:"VAR_INPUT",112:"END_VAR",114:"VAR_OUTPUT",117:"VAR",120:"REAL",121:"INTEGER",122:"ID",125:"INT",126:"PLUS",127:"MINUS",128:"BIN_INT",129:"OCT_INT",130:"HEX_INT",131:"DOT",134:"E",135:"WITH"},
productions_: [0,[3,2],[6,10],[17,4],[22,7],[30,7],[38,2],[41,5],[45,1],[45,1],[48,1],[50,3],[52,3],[47,1],[47,1],[26,4],[58,1],[58,1],[58,1],[58,1],[58,1],[27,4],[65,1],[65,1],[67,5],[33,4],[33,4],[71,1],[71,1],[71,1],[73,1],[73,1],[73,1],[80,4],[82,1],[82,1],[35,4],[84,1],[84,1],[84,1],[86,9],[90,2],[96,2],[97,1],[97,1],[94,1],[94,1],[98,4],[98,1],[92,2],[102,2],[100,4],[105,1],[105,1],[8,1],[32,1],[43,1],[24,1],[19,1],[55,1],[55,1],[108,4],[113,4],[116,4],[110,4],[119,1],[119,1],[106,1],[123,2],[124,1],[124,1],[88,1],[88,1],[88,1],[88,1],[88,1],[107,4],[133,3],[4,0],[4,2],[9,0],[9,2],[10,0],[10,2],[11,0],[11,2],[12,0],[12,2],[13,0],[13,2],[14,0],[14,2],[15,0],[15,2],[20,0],[20,2],[25,0],[25,2],[28,0],[28,1],[34,0],[34,1],[36,0],[36,2],[49,0],[49,2],[93,0],[93,2],[95,0],[95,2],[101,0],[101,2],[104,0],[104,1],[111,0],[111,2],[115,0],[115,2],[118,0],[118,2],[132,0],[132,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return $$[$0-1]
break;
case 2:this.$ = new yy.FunctionBlock(_$[$0-9].first_line, _$[$0-9].first_column, $$[$0-8], $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2]);
break;
case 3:this.$ = new yy.FuzzifyBlock(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0-1]);
break;
case 4:this.$ = new yy.DefuzzifyBlock(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1]);
break;
case 5:this.$ = new yy.RuleBlock(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1]);
break;
case 7:this.$ = new yy.Term(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], $$[$0-1]); 
break;
case 8:this.$ = new yy.MembershipFunction(_$[$0].first_line, _$[$0].first_column, $$[$0])
break;
case 9:this.$ = new yy.MembershipFunction(_$[$0].first_line, _$[$0].first_column, $$[$0])
break;
case 10:this.$ = $$[$0];
break;
case 11:this.$ = $$[$0-1]
break;
case 12:this.$ = new yy.Point(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 13:this.$ = $$[$0];
break;
case 14:this.$ = $$[$0];
break;
case 15:this.$ = new yy.DefuzzificationMethod(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 16:this.$ = 'cog';
break;
case 17:this.$ = 'cogs';
break;
case 18:this.$ = 'coa';
break;
case 19:this.$ = 'lm';
break;
case 20:this.$ = 'rm';
break;
case 21:this.$ = new yy.DefaultValue(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 22:this.$ = $$[$0]
break;
case 23:this.$ = 'nc';
break;
case 24:this.$ = new yy.Range(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2], $$[$0]);
break;
case 25:this.$ = new yy.OrOperatorDefinition(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 26:this.$ = new yy.AndOperatorDefinition(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 27:this.$ = 'max';
break;
case 28:this.$ = 'asum';
break;
case 29:this.$ = 'bsum';
break;
case 30:this.$ = 'min';
break;
case 31:this.$ = 'prod';
break;
case 32:this.$ = 'bdif';
break;
case 33:this.$ = new yy.ActivationMethod(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 34:this.$ = 'prod';
break;
case 35:this.$ = 'min';
break;
case 36:this.$ = new yy.AccumulationMethod(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1])
break;
case 37:this.$ = 'max';
break;
case 38:this.$ = 'bsum';
break;
case 39:this.$ = 'nsum';
break;
case 40:this.$ = new yy.Rule(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-7], $$[$0-4], $$[$0-2], $$[$0])
break;
case 41:this.$ = new yy.Condition(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0].concat($$[$0-1]))
break;
case 42:this.$ = new yy.Subcondition(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], $$[$0]);
break;
case 43:this.$ = new yy.AndOperator(_$[$0].first_line, _$[$0].first_column);
break;
case 44:this.$ = new yy.OrOperator(_$[$0].first_line, _$[$0].first_column);
break;
case 45:this.$ = $$[$0]
break;
case 46:this.$ = $$[$0]
break;
case 47:$$[$0-1].negate(); this.$ = $$[$0-1];
break;
case 48:this.$ = $$[$0]
break;
case 49:this.$ = new yy.Conclusion(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0].concat($$[$0-1]));
break;
case 50:this.$ = $$[$0-1]
break;
case 51:var negated = false; if($$[$0-1] != undefined) negated = true; this.$ = new yy.LogicPart(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], negated, $$[$0]);
break;
case 52:this.$ = $$[$0]
break;
case 53:this.$ = $$[$0]
break;
case 54:this.$ = $$[$0]
break;
case 55:this.$ = $$[$0]
break;
case 56:this.$ = $$[$0]
break;
case 57:this.$ = $$[$0]
break;
case 58:this.$ = new yy.Variable(_$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 59:this.$ = new yy.NumberVal(_$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 60:this.$ = new yy.NumberVal(_$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 61:this.$ = new yy.InputBlock(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0-1]);
break;
case 62:this.$ = new yy.OutputBlock(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0-1]);
break;
case 63:this.$ = new yy.VarBlock(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1].concat($$[$0-2]));
break;
case 64:this.$ = new yy.VariableDeclaration(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], $$[$0-1]);
break;
case 65:this.$ = $$[$0]
break;
case 66:this.$ = $$[$0]
break;
case 67:this.$ = $$[$0]
break;
case 68:this.$ = $$[$0-1] * $$[$0]
break;
case 69:this.$ = +1
break;
case 70:this.$ = -1
break;
case 71:this.$ = $$[$0]
break;
case 72:this.$ = $$[$0]
break;
case 73:this.$ = $$[$0]
break;
case 74:this.$ = $$[$0]
break;
case 75:this.$ = $$[$0]
break;
case 76:this.$ = parseFloat($$[$0-3] + '.' + $$[$0-1]);
break;
case 78:this.$ = [];
break;
case 79:$$[$0-1].push($$[$0]);
break;
case 80:this.$ = [];
break;
case 81:$$[$0-1].push($$[$0]);
break;
case 82:this.$ = [];
break;
case 83:$$[$0-1].push($$[$0]);
break;
case 84:this.$ = [];
break;
case 85:$$[$0-1].push($$[$0]);
break;
case 86:this.$ = [];
break;
case 87:$$[$0-1].push($$[$0]);
break;
case 88:this.$ = [];
break;
case 89:$$[$0-1].push($$[$0]);
break;
case 90:this.$ = [];
break;
case 91:$$[$0-1].push($$[$0]);
break;
case 92:this.$ = [];
break;
case 93:$$[$0-1].push($$[$0]);
break;
case 94:this.$ = [];
break;
case 95:$$[$0-1].push($$[$0]);
break;
case 96:this.$ = [];
break;
case 97:$$[$0-1].push($$[$0]);
break;
case 102:this.$ = [];
break;
case 103:$$[$0-1].push($$[$0]);
break;
case 104:this.$ = [];
break;
case 105:$$[$0-1].push($$[$0]);
break;
case 108:this.$ = [];
break;
case 109:$$[$0-1].push($$[$0]);
break;
case 110:this.$ = [];
break;
case 111:$$[$0-1].push($$[$0]);
break;
case 114:this.$ = [];
break;
case 115:$$[$0-1].push($$[$0]);
break;
case 116:this.$ = [];
break;
case 117:$$[$0-1].push($$[$0]);
break;
case 118:this.$ = [];
break;
case 119:$$[$0-1].push($$[$0]);
break;
}
},
table: [{3:1,4:2,5:[2,78],7:[2,78]},{1:[3]},{5:[1,3],6:4,7:[1,5]},{1:[2,1]},{5:[2,79],7:[2,79]},{8:6,106:7,122:[1,8]},{9:9,16:[2,80],18:[2,80],23:[2,80],31:[2,80],39:[2,80],109:[2,80],114:[2,80],117:[2,80]},{16:[2,54],18:[2,54],23:[2,54],31:[2,54],39:[2,54],109:[2,54],114:[2,54],117:[2,54]},{16:[2,67],18:[2,67],21:[2,67],23:[2,67],31:[2,67],39:[2,67],42:[2,67],44:[2,67],46:[2,67],53:[2,67],54:[2,67],56:[2,67],57:[2,67],70:[2,67],72:[2,67],91:[2,67],103:[2,67],109:[2,67],114:[2,67],117:[2,67],135:[2,67]},{10:10,16:[2,82],18:[2,82],23:[2,82],31:[2,82],39:[2,82],108:11,109:[1,12],114:[2,82],117:[2,82]},{11:13,16:[2,84],18:[2,84],23:[2,84],31:[2,84],39:[2,84],113:14,114:[1,15],117:[2,84]},{16:[2,81],18:[2,81],23:[2,81],31:[2,81],39:[2,81],109:[2,81],114:[2,81],117:[2,81]},{106:17,110:16,122:[1,8]},{12:18,16:[2,86],18:[2,86],23:[2,86],31:[2,86],39:[2,86],116:19,117:[1,20]},{16:[2,83],18:[2,83],23:[2,83],31:[2,83],39:[2,83],114:[2,83],117:[2,83]},{106:17,110:21,122:[1,8]},{111:22,112:[2,114],122:[2,114]},{57:[1,23]},{13:24,16:[2,88],17:25,18:[1,26],23:[2,88],31:[2,88],39:[2,88]},{16:[2,85],18:[2,85],23:[2,85],31:[2,85],39:[2,85],117:[2,85]},{106:17,110:27,122:[1,8]},{112:[2,116],115:28,122:[2,116]},{106:17,110:30,112:[1,29],122:[1,8]},{119:31,120:[1,32],121:[1,33]},{14:34,16:[2,90],22:35,23:[1,36],31:[2,90],39:[2,90]},{16:[2,87],18:[2,87],23:[2,87],31:[2,87],39:[2,87]},{19:37,106:38,122:[1,8]},{112:[2,118],118:39,122:[2,118]},{106:17,110:41,112:[1,40],122:[1,8]},{16:[2,61],18:[2,61],23:[2,61],31:[2,61],39:[2,61],109:[2,61],114:[2,61],117:[2,61]},{112:[2,115],122:[2,115]},{46:[1,42]},{46:[2,65]},{46:[2,66]},{15:43,16:[2,92],30:44,31:[1,45],39:[2,92]},{16:[2,89],23:[2,89],31:[2,89],39:[2,89]},{24:46,106:47,122:[1,8]},{20:48,21:[2,94],42:[2,94]},{21:[2,58],42:[2,58],46:[2,58],54:[2,58],70:[2,58],72:[2,58],91:[2,58],103:[2,58]},{106:17,110:50,112:[1,49],122:[1,8]},{16:[2,62],18:[2,62],23:[2,62],31:[2,62],39:[2,62],114:[2,62],117:[2,62]},{112:[2,117],122:[2,117]},{112:[2,64],122:[2,64]},{16:[1,51],38:52,39:[1,53]},{16:[2,91],31:[2,91],39:[2,91]},{32:54,106:55,122:[1,8]},{25:56,42:[2,96],56:[2,96]},{42:[2,57],56:[2,57]},{21:[1,57],41:58,42:[1,59]},{16:[2,63],18:[2,63],23:[2,63],31:[2,63],39:[2,63],117:[2,63]},{112:[2,119],122:[2,119]},{5:[2,2],7:[2,2]},{16:[2,93],39:[2,93]},{40:[1,60]},{33:61,70:[1,62],72:[1,63]},{70:[2,55],72:[2,55]},{26:64,41:65,42:[1,59],56:[1,66]},{16:[2,3],18:[2,3],23:[2,3],31:[2,3],39:[2,3]},{21:[2,95],42:[2,95]},{43:67,106:68,122:[1,8]},{16:[2,6],39:[2,6]},{34:69,80:70,81:[1,71],83:[2,100]},{57:[1,72]},{57:[1,73]},{27:74,64:[1,75]},{42:[2,97],56:[2,97]},{57:[1,76]},{44:[1,77]},{44:[2,56],46:[2,56],53:[2,56],54:[2,56],70:[2,56],72:[2,56],91:[2,56],135:[2,56]},{35:78,83:[1,79]},{83:[2,101]},{57:[1,80]},{71:81,74:[1,82],75:[1,83],76:[1,84]},{73:85,77:[1,86],78:[1,87],79:[1,88]},{28:89,29:[2,98],67:90,68:[1,91]},{44:[1,92]},{58:93,59:[1,94],60:[1,95],61:[1,96],62:[1,97],63:[1,98]},{19:103,45:99,46:[2,104],47:100,48:101,49:104,51:[2,104],55:102,88:105,106:38,107:106,122:[1,8],123:107,124:112,125:[1,108],126:[1,113],127:[1,114],128:[1,109],129:[1,110],130:[1,111]},{36:115,37:[2,102],87:[2,102]},{57:[1,116]},{77:[1,119],78:[1,118],82:117},{46:[1,120]},{46:[2,27]},{46:[2,28]},{46:[2,29]},{46:[1,121]},{46:[2,30]},{46:[2,31]},{46:[2,32]},{29:[1,122]},{29:[2,99]},{44:[1,123]},{55:125,65:124,66:[1,126],88:105,107:106,123:107,124:112,125:[1,108],126:[1,113],127:[1,114],128:[1,109],129:[1,110],130:[1,111]},{46:[1,127]},{46:[2,16]},{46:[2,17]},{46:[2,18]},{46:[2,19]},{46:[2,20]},{46:[1,128]},{46:[2,8]},{46:[2,9]},{46:[2,13],54:[2,13]},{46:[2,14],54:[2,14]},{46:[2,10],50:129,51:[1,130]},{29:[2,59],46:[2,59],53:[2,59],54:[2,59],69:[2,59]},{29:[2,60],46:[2,60],53:[2,60],54:[2,60],69:[2,60]},{29:[2,71],46:[2,71],53:[2,71],54:[2,71],69:[2,71],131:[1,131]},{29:[2,72],46:[2,72],53:[2,72],54:[2,72],57:[2,72],69:[2,72]},{29:[2,73],46:[2,73],53:[2,73],54:[2,73],57:[2,73],69:[2,73]},{29:[2,74],46:[2,74],53:[2,74],54:[2,74],57:[2,74],69:[2,74]},{29:[2,75],46:[2,75],53:[2,75],54:[2,75],57:[2,75],69:[2,75]},{125:[1,132]},{125:[2,69]},{125:[2,70]},{37:[1,133],86:134,87:[1,135]},{74:[1,137],76:[1,138],84:136,85:[1,139]},{46:[1,140]},{46:[2,34]},{46:[2,35]},{81:[2,25],83:[2,25]},{81:[2,26],83:[2,26]},{16:[2,4],23:[2,4],31:[2,4],39:[2,4]},{55:141,88:105,107:106,123:107,124:112,125:[1,108],126:[1,113],127:[1,114],128:[1,109],129:[1,110],130:[1,111]},{46:[1,142]},{46:[2,22]},{46:[2,23]},{64:[2,15]},{21:[2,7],42:[2,7],56:[2,7]},{46:[2,105],51:[2,105]},{19:103,47:144,52:143,55:102,88:105,106:38,107:106,122:[1,8],123:107,124:112,125:[1,108],126:[1,113],127:[1,114],128:[1,109],129:[1,110],130:[1,111]},{125:[1,145]},{29:[2,68],46:[2,68],53:[2,68],54:[2,68],57:[2,68],69:[2,68],131:[2,68]},{16:[2,5],31:[2,5],39:[2,5]},{37:[2,103],87:[2,103]},{88:146,123:147,124:112,125:[1,108],126:[1,113],127:[1,114],128:[1,109],129:[1,110],130:[1,111]},{46:[1,148]},{46:[2,37]},{46:[2,38]},{46:[2,39]},{83:[2,33]},{69:[1,149]},{29:[2,21],68:[2,21]},{53:[1,150]},{54:[1,151]},{29:[2,120],46:[2,120],53:[2,120],54:[2,120],69:[2,120],132:152,133:153,134:[1,154]},{57:[1,155]},{57:[2,71]},{37:[2,36],87:[2,36]},{55:156,88:105,107:106,123:107,124:112,125:[1,108],126:[1,113],127:[1,114],128:[1,109],129:[1,110],130:[1,111]},{46:[2,11],51:[2,11]},{55:157,88:105,107:106,123:107,124:112,125:[1,108],126:[1,113],127:[1,114],128:[1,109],129:[1,110],130:[1,111]},{29:[2,76],46:[2,76],53:[2,76],54:[2,76],69:[2,76]},{29:[2,121],46:[2,121],53:[2,121],54:[2,121],69:[2,121]},{124:158,126:[1,113],127:[1,114]},{89:[1,159]},{29:[2,24]},{53:[2,12]},{125:[1,160]},{19:164,90:161,94:162,98:163,99:[1,165],100:166,106:38,122:[1,8]},{29:[2,77],46:[2,77],53:[2,77],54:[2,77],69:[2,77]},{91:[1,167]},{70:[2,108],72:[2,108],91:[2,108],95:168},{70:[2,45],72:[2,45],91:[2,45]},{70:[2,46],72:[2,46],91:[2,46],103:[1,169]},{51:[1,170]},{70:[2,48],72:[2,48],91:[2,48]},{19:173,92:171,100:172,106:38,122:[1,8]},{70:[1,177],72:[1,176],91:[2,41],96:174,97:175},{99:[1,179],104:178,122:[2,112]},{19:173,100:180,106:38,122:[1,8]},{46:[2,106],93:181,135:[1,182]},{46:[2,110],54:[2,110],101:183,135:[2,110]},{103:[1,169]},{70:[2,109],72:[2,109],91:[2,109]},{19:164,94:184,98:163,99:[1,165],100:166,106:38,122:[1,8]},{99:[2,43],122:[2,43]},{99:[2,44],122:[2,44]},{43:185,106:68,122:[1,8]},{122:[2,113]},{53:[1,186]},{46:[1,187]},{19:189,55:190,88:105,105:188,106:38,107:106,122:[1,8],123:107,124:112,125:[1,108],126:[1,113],127:[1,114],128:[1,109],129:[1,110],130:[1,111]},{46:[2,49],54:[1,192],102:191,135:[2,49]},{70:[2,42],72:[2,42],91:[2,42]},{46:[2,51],53:[2,51],54:[2,51],70:[2,51],72:[2,51],91:[2,51],135:[2,51]},{70:[2,47],72:[2,47],91:[2,47]},{37:[2,40],87:[2,40]},{46:[2,107]},{46:[2,52]},{46:[2,53]},{46:[2,111],54:[2,111],135:[2,111]},{19:173,100:193,106:38,122:[1,8]},{46:[2,50],54:[2,50],135:[2,50]}],
defaultActions: {3:[2,1],32:[2,65],33:[2,66],70:[2,101],82:[2,27],83:[2,28],84:[2,29],86:[2,30],87:[2,31],88:[2,32],90:[2,99],94:[2,16],95:[2,17],96:[2,18],97:[2,19],98:[2,20],100:[2,8],101:[2,9],113:[2,69],114:[2,70],118:[2,34],119:[2,35],125:[2,22],126:[2,23],127:[2,15],137:[2,37],138:[2,38],139:[2,39],140:[2,33],147:[2,71],156:[2,24],157:[2,12],179:[2,113],188:[2,107],189:[2,52],190:[2,53]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:return 125
break;
case 2:return 128
break;
case 3:return 129
break;
case 4:return 130
break;
case 5:return 83
break;
case 6:return 81
break;
case 7:return 72
break;
case 8:return 75
break;
case 9:return 79
break;
case 10:return 76
break;
case 11:return 61
break;
case 12:return 59
break;
case 13:return 60
break;
case 14:return 64
break;
case 15:return 23
break;
case 16:return 29
break;
case 17:return 16
break;
case 18:return 21
break;
case 19:return 40
break;
case 20:return 37
break;
case 21:return 112
break;
case 22:return 7
break;
case 23:return 18
break;
case 24:return 89
break;
case 25:return 121
break;
case 26:return 103
break;
case 27:return 62
break;
case 28:return 56
break;
case 29:return 74
break;
case 30:return 77
break;
case 31:return 66
break;
case 32:return 99
break;
case 33:return 85
break;
case 34:return 39
break;
case 35:return 70
break;
case 36:return 78
break;
case 37:return 68
break;
case 38:return 120
break;
case 39:return 63
break;
case 40:return 31
break;
case 41:return 87
break;
case 42:return 42
break;
case 43:return 91
break;
case 44:return 109
break;
case 45:return 114
break;
case 46:return 117
break;
case 47:return 135
break;
case 48:return 'STRUCT'
break;
case 49:return 'TRUE'
break;
case 50:return 'FALSE'
break;
case 51:return 'END_STRUCT'
break;
case 52:return 134
break;
case 53:return 'NUMBER'
break;
case 54:return 122
break;
case 55:return 126
break;
case 56:return 127
break;
case 57:return 51
break;
case 58:return 53
break;
case 59:return 46
break;
case 60:return 54
break;
case 61:return 44
break;
case 62:return 57
break;
case 63:return 69
break;
case 64:return 131
break;
case 65:return 5
break;
case 66:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\d(_?\d)*)/,/^(?:2#[0-1](_?[0-1])*)/,/^(?:8#[0-8](_?[0-8])*)/,/^(?:16#[a-fA-F0-9](_?[a-fA-F0-9])*)/,/^(?:ACCU)/,/^(?:ACT)/,/^(?:AND)/,/^(?:ASUM)/,/^(?:BDIF)/,/^(?:BSUM)/,/^(?:COA)/,/^(?:COG)/,/^(?:COGS)/,/^(?:DEFAULT)/,/^(?:DEFUZZIFY)/,/^(?:END_DEFUZZIFY)/,/^(?:END_FUNCTION_BLOCK)/,/^(?:END_FUZZIFY)/,/^(?:END_OPTIONS)/,/^(?:END_RULEBLOCK)/,/^(?:END_VAR)/,/^(?:FUNCTION_BLOCK)/,/^(?:FUZZIFY)/,/^(?:IF)/,/^(?:INT)/,/^(?:IS)/,/^(?:LM)/,/^(?:METHOD)/,/^(?:MAX)/,/^(?:MIN)/,/^(?:NC)/,/^(?:NOT)/,/^(?:NSUM)/,/^(?:OPTIONS)/,/^(?:OR)/,/^(?:PROD)/,/^(?:RANGE)/,/^(?:REAL)/,/^(?:RM)/,/^(?:RULEBLOCK)/,/^(?:RULE)/,/^(?:TERM)/,/^(?:THEN)/,/^(?:VAR_INPUT)/,/^(?:VAR_OUTPUT)/,/^(?:VAR)/,/^(?:WITH)/,/^(?:STRUCT)/,/^(?:true)/,/^(?:false)/,/^(?:END_STRUCT)/,/^(?:E)/,/^(?:[0-9]+(?:\.[0-9]+)?\b)/,/^(?:(([a-zA-Z])|(_([a-zA-Z]|\d)))(_?([a-zA-Z]|\d))*)/,/^(?:\+)/,/^(?:\-)/,/^(?:\()/,/^(?:\))/,/^(?:;)/,/^(?:,)/,/^(?::=)/,/^(?::)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}