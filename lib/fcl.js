/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var fcl = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"library":3,"library_repetition0":4,"library_repetition1":5,"EOF":6,"function_block_declaration":7,"FUNCTION_BLOCK":8,"ID":9,"function_block_declaration_repetition0":10,"function_block_declaration_repetition1":11,"function_block_body":12,"END_FUNCTION_BLOCK":13,"fb_io_var_declarations":14,"input_declarations":15,"output_declarations":16,"other_var_declarations":17,"var_declarations":18,"function_block_body_repetition0":19,"function_block_body_repetition1":20,"function_block_body_repetition2":21,"function_block_body_repetition3":22,"fuzzify_block":23,"FUZZIFY":24,"fuzzify_block_repetition0":25,"END_FUZZIFY":26,"defuzzify_block":27,"DEFUZZIFY":28,"defuzzify_block_option0":29,"defuzzify_block_repetition0":30,"defuzzification_method":31,"default_value":32,"END_DEFUZZIFY":33,"METHOD":34,"COLON":35,"defuzzification_method_group0":36,"SEMICOLON":37,"defuzzifcation_method_option":38,"DEFAULT":39,"ASSIGNMENT":40,"default_value_group0":41,"rule_block":42,"RULEBLOCK":43,"operator_definition":44,"rule_block_option0":45,"accumulation_method":46,"rule_block_repetition0":47,"END_RULEBLOCK":48,"option_block":49,"OPTION":50,"END_OPTION":51,"linguistic_term":52,"TERM":53,"membership_function":54,"membership_function_group0":55,"singleton":56,"numeric_literal":57,"points":58,"points_repetition0":59,"point":60,"LPARA":61,"point_group0":62,"COMMA":63,"RPARA":64,"defuzzification_method_option":65,"CoG":66,"CoGS":67,"CoA":68,"LM":69,"RM":70,"range":71,"RANGE":72,"RANGEDOT":73,"operator_definition_option0":74,"operator_definition_option1":75,"operator_definition_disjunction":76,"OR":77,"operator_definition_disjunction_group0":78,"operator_definition_conjunction":79,"AND":80,"operator_definition_conjunction_group0":81,"activation_method":82,"ACT":83,"activation_method_group0":84,"ACCU":85,"accumulation_method_group0":86,"rule":87,"RULE":88,"integer_literal":89,"IF":90,"condition":91,"THEN":92,"conclusion":93,"rule_option0":94,"x":95,"condition_repetition0":96,"condition_concat":97,"x_option0":98,"x_group0":99,"subcondition":100,"IS":101,"subcondition_option0":102,"conclusion_repetition0":103,"weighting_factor":104,"weighting_factor_group0":105,"constant":106,"character_string":107,"time_literal":108,"bit_string_literal":109,"boolean_literal":110,"real_literal":111,"signed_integer":112,"signed_integer_group0":113,"integer":114,"integer_type_name":115,"HASH":116,"integer_value":117,"BINARY_INTEGER":118,"OCTAL_INTEGER":119,"HEX_INTEGER":120,"DIGIT":121,"integer_repetition0":122,"real_type_name":123,"REAL_NUMBER":124,"real_literal_option0":125,"real_literal_option1":126,"exponent":127,"E":128,"exponent_option0":129,"bit_string_type_name":130,"bit_string_value":131,"BYTE":132,"WORD":133,"DWORD":134,"LWORD":135,"TRUE":136,"FALSE":137,"SINGLE_BYTE_STRING":138,"DOUBLE_BYTE_STRING":139,"duration":140,"time_of_day":141,"date":142,"date_and_time":143,"DURATION_PREFIX":144,"interval":145,"days":146,"hours":147,"minutes":148,"seconds":149,"milliseconds":150,"interval_prefix":151,"fixed_point":152,"interval_prefix_group0":153,"interval_prefix_group1":154,"D":155,"days_option0":156,"H":157,"hours_option0":158,"M":159,"minutes_option0":160,"S":161,"seconds_option0":162,"fixed_point_option0":163,"time_of_day_group0":164,"daytime":165,"date_group0":166,"date_literal":167,"DASH":168,"date_and_time_group0":169,"elementary_type_name":170,"numeric_type_name":171,"date_type_name":172,"bit_identifier":173,"elementary_type_name_group0":174,"elementary_type_name_option0":175,"elementary_type_name_option1":176,"TIME":177,"signed_integer_type_name":178,"unsigned_integer_type_name":179,"SINT":180,"INT":181,"DINT":182,"LINT":183,"USINT":184,"UINT":185,"UDINT":186,"ULINT":187,"REAL":188,"LREAL":189,"DATE":190,"TIME_OF_DAY":191,"TOD":192,"DATE_AND_TIME":193,"DT":194,"BOOL":195,"generic_type_name":196,"ANY_DERIVED":197,"ANY_ELEMENTARY":198,"ANY_MAGNITUDE":199,"ANY_NUM":200,"ANY_REAL":201,"ANY_INT":202,"ANY_BIT":203,"ANY_STRING":204,"ANY_DATE":205,"ANY":206,"data_type_declarations":207,"TYPE":208,"type_declaration":209,"data_type_declarations_repetition0":210,"END_TYPE":211,"data_type_declaration":212,"data_type_declaration_group0":213,"spec_init":214,"spec_init_option0":215,"subrange_specification":216,"spec_init_option1":217,"enumerated_specification":218,"spec_init_option2":219,"array_specification":220,"spec_init_option3":221,"spec_init_option4":222,"subrange":223,"enumerated_value":224,"enumerated_specification_repetition0":225,"ARRAY":226,"LBRACKET":227,"array_specification_repetition0":228,"RBRACKET":229,"OF":230,"array_specification_group0":231,"array_initialization":232,"array_initial_elements":233,"array_initialization_repetition0":234,"array_initial_element":235,"array_initial_elements_option0":236,"structure_initialization":237,"structure_declaration":238,"STRUCT":239,"structure_element_declaration":240,"structure_declaration_repetition0":241,"END_STRUCT":242,"structure_element_initialization":243,"structure_initialization_repetition0":244,"structure_element_initialization_group0":245,"variable":246,"direct_variable":247,"symbolic_variable":248,"multi_element_variable":249,"DIRECT_VAR_PREFIX":250,"direct_variable_repetition0":251,"array_variable":252,"structured_variable":253,"expression":254,"array_variable_repetition0":255,"DOT":256,"VAR_INPUT":257,"input_declarations_option0":258,"input_declaration":259,"input_declarations_repetition0":260,"END_VAR":261,"name_list":262,"input_declaration_group0":263,"edge_declaration":264,"edge_declaration_group0":265,"var_init_decl":266,"var_init_decl_group0":267,"fb_name_decl":268,"function_block_type_name":269,"fb_name_decl_option0":270,"name_list_repetition0":271,"name_list_concat":272,"output_declaration":273,"VAR_OUTPUT":274,"output_declarations_option0":275,"output_declarations_repetition0":276,"input_output_declarations":277,"VAR_IN_OUT":278,"var_declaration":279,"input_output_declarations_repetition0":280,"var_decl":281,"var_decl_group0":282,"single_byte_string_spec":283,"STRING":284,"single_byte_string_spec_option0":285,"single_byte_string_spec_option1":286,"double_byte_string_spec":287,"WSTRING":288,"double_byte_string_spec_option0":289,"double_byte_string_spec_option1":290,"VAR":291,"var_declarations_option0":292,"var_declarations_repetition0":293,"NC":294,"MAX":295,"ASUM":296,"BSUM":297,"MIN":298,"PROD":299,"BDIF":300,"NSUM":301,"WITH":302,"NOT":303,"conclusion_repetition0_option0":304,"PLUS":305,"integer_repetition0_option0":306,"LDASH":307,"exponent_option0_group0":308,"MS":309,"spec_init_option4_group0":310,"input_declarations_option0_group0":311,"RETAIN":312,"NON_RETAIN":313,"R_EDGE":314,"F_EDGE":315,"output_declarations_option0_group0":316,"single_byte_character_string":317,"double_byte_character_string":318,"CONSTANT":319,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"FUNCTION_BLOCK",9:"ID",13:"END_FUNCTION_BLOCK",24:"FUZZIFY",26:"END_FUZZIFY",28:"DEFUZZIFY",33:"END_DEFUZZIFY",34:"METHOD",35:"COLON",37:"SEMICOLON",38:"defuzzifcation_method_option",39:"DEFAULT",40:"ASSIGNMENT",43:"RULEBLOCK",48:"END_RULEBLOCK",50:"OPTION",51:"END_OPTION",53:"TERM",61:"LPARA",63:"COMMA",64:"RPARA",66:"CoG",67:"CoGS",68:"CoA",69:"LM",70:"RM",72:"RANGE",73:"RANGEDOT",77:"OR",80:"AND",83:"ACT",85:"ACCU",88:"RULE",90:"IF",92:"THEN",101:"IS",116:"HASH",118:"BINARY_INTEGER",119:"OCTAL_INTEGER",120:"HEX_INTEGER",121:"DIGIT",124:"REAL_NUMBER",128:"E",132:"BYTE",133:"WORD",134:"DWORD",135:"LWORD",136:"TRUE",137:"FALSE",138:"SINGLE_BYTE_STRING",139:"DOUBLE_BYTE_STRING",144:"DURATION_PREFIX",150:"milliseconds",155:"D",157:"H",159:"M",161:"S",168:"DASH",177:"TIME",180:"SINT",181:"INT",182:"DINT",183:"LINT",184:"USINT",185:"UINT",186:"UDINT",187:"ULINT",188:"REAL",189:"LREAL",190:"DATE",191:"TIME_OF_DAY",192:"TOD",193:"DATE_AND_TIME",194:"DT",195:"BOOL",197:"ANY_DERIVED",198:"ANY_ELEMENTARY",199:"ANY_MAGNITUDE",200:"ANY_NUM",201:"ANY_REAL",202:"ANY_INT",203:"ANY_BIT",204:"ANY_STRING",205:"ANY_DATE",206:"ANY",208:"TYPE",209:"type_declaration",211:"END_TYPE",226:"ARRAY",227:"LBRACKET",229:"RBRACKET",230:"OF",239:"STRUCT",242:"END_STRUCT",250:"DIRECT_VAR_PREFIX",254:"expression",256:"DOT",257:"VAR_INPUT",261:"END_VAR",269:"function_block_type_name",274:"VAR_OUTPUT",278:"VAR_IN_OUT",279:"var_declaration",284:"STRING",288:"WSTRING",291:"VAR",294:"NC",295:"MAX",296:"ASUM",297:"BSUM",298:"MIN",299:"PROD",300:"BDIF",301:"NSUM",302:"WITH",303:"NOT",305:"PLUS",307:"LDASH",309:"MS",312:"RETAIN",313:"NON_RETAIN",314:"R_EDGE",315:"F_EDGE",317:"single_byte_character_string",318:"double_byte_character_string",319:"CONSTANT"},
productions_: [0,[3,3],[7,6],[14,1],[14,1],[17,1],[12,4],[23,4],[27,7],[31,4],[31,4],[32,4],[42,7],[49,2],[52,5],[54,1],[56,1],[56,1],[58,1],[60,5],[65,1],[65,1],[65,1],[65,1],[65,1],[71,7],[44,3],[76,3],[79,3],[82,4],[46,4],[87,9],[91,2],[97,2],[97,2],[95,2],[100,4],[100,1],[93,4],[104,1],[106,1],[106,1],[106,1],[106,1],[106,1],[57,1],[57,1],[112,2],[112,1],[89,3],[89,1],[117,1],[117,1],[117,1],[117,1],[114,2],[111,4],[111,2],[127,3],[109,3],[131,1],[131,1],[131,1],[131,1],[130,1],[130,1],[130,1],[130,1],[110,1],[110,1],[107,1],[107,1],[108,1],[108,1],[108,1],[108,1],[140,2],[145,1],[145,1],[145,1],[145,1],[145,1],[151,2],[151,2],[146,3],[147,3],[148,3],[149,3],[152,2],[141,3],[165,5],[142,3],[167,5],[143,5],[170,1],[170,1],[170,1],[170,3],[170,1],[171,1],[171,1],[115,1],[115,1],[178,1],[178,1],[178,1],[178,1],[179,1],[179,1],[179,1],[179,1],[123,1],[123,1],[172,1],[172,1],[172,1],[172,1],[172,1],[173,1],[173,1],[173,1],[173,1],[173,1],[196,1],[196,1],[196,1],[196,1],[196,1],[196,1],[196,1],[196,1],[196,1],[196,1],[207,5],[212,3],[214,2],[214,2],[214,2],[214,2],[214,2],[216,4],[223,3],[218,4],[224,3],[224,1],[220,7],[232,4],[233,1],[233,4],[235,1],[235,1],[235,1],[235,1],[238,5],[240,3],[237,4],[243,3],[246,1],[246,1],[248,1],[248,1],[247,3],[249,1],[249,1],[252,5],[253,3],[15,6],[259,3],[264,2],[266,1],[268,2],[262,2],[272,2],[273,3],[16,6],[277,5],[281,3],[283,3],[287,3],[18,6],[4,0],[4,2],[5,0],[5,2],[10,0],[10,2],[11,0],[11,2],[19,0],[19,2],[20,0],[20,2],[21,0],[21,2],[22,0],[22,2],[25,0],[25,2],[29,0],[29,1],[30,0],[30,2],[36,1],[36,1],[36,1],[36,1],[36,1],[41,1],[41,1],[45,0],[45,1],[47,0],[47,2],[55,1],[55,1],[59,0],[59,2],[62,1],[62,1],[74,0],[74,1],[75,0],[75,1],[78,1],[78,1],[78,1],[81,1],[81,1],[81,1],[84,1],[84,1],[86,1],[86,1],[86,1],[94,0],[94,2],[96,0],[96,2],[98,0],[98,1],[99,1],[99,3],[102,0],[102,1],[304,0],[304,2],[103,0],[103,4],[105,1],[105,1],[113,1],[113,1],[306,0],[306,1],[122,0],[122,3],[125,0],[125,1],[126,0],[126,1],[308,1],[308,1],[129,0],[129,1],[153,1],[153,1],[153,1],[153,1],[153,1],[154,1],[154,1],[154,1],[154,1],[156,0],[156,1],[158,0],[158,1],[160,0],[160,1],[162,0],[162,1],[163,0],[163,2],[164,1],[164,1],[166,1],[166,1],[169,1],[169,1],[174,1],[174,1],[175,0],[175,3],[176,0],[176,2],[210,0],[210,3],[213,1],[213,1],[215,0],[215,2],[217,0],[217,2],[219,0],[219,2],[221,0],[221,2],[310,1],[310,1],[310,1],[310,1],[222,0],[222,2],[225,0],[225,3],[228,0],[228,3],[231,1],[231,1],[234,0],[234,3],[236,0],[236,1],[241,0],[241,3],[244,0],[244,3],[245,1],[245,1],[245,1],[245,1],[251,0],[251,3],[255,0],[255,3],[311,1],[311,1],[258,0],[258,1],[260,0],[260,3],[263,1],[263,1],[265,1],[265,1],[267,1],[267,1],[270,0],[270,2],[271,0],[271,2],[316,1],[316,1],[275,0],[275,1],[276,0],[276,3],[280,0],[280,3],[282,1],[282,1],[282,1],[282,1],[282,1],[282,1],[285,0],[285,3],[286,0],[286,2],[289,0],[289,3],[290,0],[290,2],[292,0],[292,1],[293,0],[293,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return new Library(_$[$0-2].first_line, _$[$0-2].first_column, {}, $$[$0-2].concat($$[$0-1])) 
break;
case 2:this.$ = new FunctionBlock(_$[$0-5].first_line, _$[$0-5].first_column, {name: $$[$0-4]}, $$[$0-3].concat($$[$0-2]).concat($$[$0-1]));
break;
case 3:this.$ = $$[$0];
break;
case 4:this.$ = $$[$0];
break;
case 5:this.$ = $$[$0];
break;
case 6:this.$ = new FunctionBlockBody(_$[$0-3].first_line, _$[$0-3].first_column, {}, $$[$0-3].concat($$[$0-2]).concat($$[$0-1]).concat($$[$0]));
break;
case 7:this.$ = new FuzzifyBlock(_$[$0-2].first_line, _$[$0-2].first_column, {variable: $$[$0-2]}, [$$[$0-1]]);
break;
case 8:this.$ = new DefuzzifyBlock(_$[$0-6].first_line, _$[$0-6].first_column, {variable: $$[$0-5]}, [$$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1]]);
break;
case 9:this.$ = new DefuzzificationMethod(_$[$0-3].first_line, _$[$0-3].first_column, {name: $$[$0-1]}, []);
break;
case 10:this.$ = new DefuzzificationMethod(_$[$0-3].first_line, _$[$0-3].first_column, {}, [$$[$0-1]]);
break;
case 11:this.$ = new DefaultValue(_$[$0-3].first_line, _$[$0-3].first_column, {value: $$[$0-1]}, []);
break;
case 12:this.$ = new RuleBlock(_$[$0-6].first_line, _$[$0-6].first_column, {id: $$[$0-5]}, [].concat($$[$0-4]).concat($$[$0-3]).concat($$[$0-2]).concat($$[$0-1]));
break;
case 13:this.$ = new OptionBlock(this._$$[$0-1].first_line, this._$$[$0-1].first_column, {}, []);
break;
case 14:this.$ = new LinguisticTerm(_$[$0-4].first_line, _$[$0-4].first_column, {name: $$[$0-3]}, [$$[$0-1]]);
break;
case 15:this.$ = new MembershipFunction(_$[$0].first_line, _$[$0].first_column, {}, [].concat($$[$0]));
break;
case 16:this.$ = $$[$0];
break;
case 17:this.$ = $$[$0];
break;
case 18:this.$ = [].concat($$[$0]);
break;
case 19:this.$ = new Point(_$[$0-3].first_line, _$[$0-3].first_column, {x: $$[$0-3], y: $$[$0-1]}, []);
break;
case 20:this.$ = yytext;
break;
case 21:this.$ = yytext;
break;
case 22:this.$ = yytext;
break;
case 23:this.$ = yytext;
break;
case 24:this.$ = yytext;
break;
case 25:this.$ = new Range(_$[$0-4].first_line, _$[$0-4].first_column, {start: $$[$0-4], end: $$[$0-2]});
break;
case 26:this.$ = new OperatorDefinition(_$[$0-2].first_line, _$[$0-2].first_column, {orMethod: $$[$0-2], andMethod: $$[$0-1]}, []);
break;
case 27:this.$ = $$[$0];
break;
case 28:this.$ = $$[$0];
break;
case 29:this.$ = new ActivationMethod(_$[$0-3].first_line, _$[$0-3].first_column, {name: $$[$0-1]}, []);
break;
case 30:this.$ = new AccumulationMethod(_$[$0].first_line, _$[$0].first_column, {name: $$[$0-1]}, []);
break;
case 31: this.$ = new Rule(_$[$0-8].first_line, _$[$0-8].first_column, {number: $$[$0-7]}, [$$[$0-4], $$[$0-2], $$[$0-4]])
break;
case 32:this.$ = new Condition(_$[$0-1].first_line, _$[$0-1].first_column, {}, [$$[$0-1], $$[$0]]);
break;
case 33:this.$ =  new Conjunction(_$[$0-1].first_line, _$[$0-1].first_column, {}, [$$[$0]]);
break;
case 34:this.$ = new Disjunction(_$[$0-1].first_line, _$[$0-1].first_column, {}, [$$[$0]]);
break;
case 35:this.$ = new X(_$[$0-1].first_line, _$[$0-1].first_column, {negation: ($$[$0-1]===undefined)?false:true}, [$$[$0]]);
break;
case 37:this.$ = $$[$0];
break;
case 38:this.$ = new Conclusion(_$[$0-3].first_line, _$[$0-3].first_column, {}, []);
break;
case 39:this.$ = new WeightingFactor(_$[$0].first_line, _$[$0].first_column, {}, [$$[$0]]);
break;
case 40:this.$ = $$[$0];
break;
case 41:this.$ = $$[$0];
break;
case 43:this.$ = $$[$0];
break;
case 44:this.$ = $$[$0];
break;
case 45:this.$ = $$[$0];
break;
case 46:this.$ = $$[$0];
break;
case 47:this.$ = ($$[$0-1]==='-')? ($$[$0] * -1):$$[$0];
break;
case 48:this.$ = $$[$0];
break;
case 49:this.$ = $$[$0-2];
break;
case 50:this.$ = $$[$0];
break;
case 51:this.$ = $$[$0];
break;
case 52:this.$ = new Number(yytext.substr(2).replace('_', ''));
break;
case 53:this.$ = new Number(yytext.substr(2).replace('_', ''));
break;
case 54:this.$ = new Number(yytext.substr(3).replace('_', ''));
break;
case 55:this.$ = new Number(yytext.replace('_', ''));
break;
case 60:this.$ = $$[$0];
break;
case 61:this.$ = new Number(yytext.substr(2).replace('_', ''));
break;
case 62:this.$ = new Number(yytext.substr(2).replace('_', ''));
break;
case 63:this.$ = new Number(yytext.substr(3).replace('_', ''));
break;
case 68:this.$ = true;
break;
case 69:this.$ = false;
break;
case 70:this.$ = new CharacterString(_$[$0].first_line, _$[$0].first_column, {string: yytext}, []);
break;
case 71:this.$ = new CharacterString(_$[$0].first_line, _$[$0].first_column, {string: yytext}, []);
break;
case 94:this.$ = $$[$0];
break;
case 95:this.$ = $$[$0];
break;
case 96:this.$ = $$[$0];
break;
case 98:this.$ = $$[$0];
break;
case 99:this.$ = $$[$0];
break;
case 100:this.$ = $$[$0];
break;
case 101:this.$ = $$[$0];
break;
case 102:this.$ = $$[$0];
break;
case 103:this.$ = $$[$0];
break;
case 104:this.$ = $$[$0];
break;
case 105:this.$ = $$[$0];
break;
case 106:this.$ = $$[$0];
break;
case 107:this.$ = $$[$0];
break;
case 108:this.$ = $$[$0];
break;
case 109:this.$ = $$[$0];
break;
case 110:this.$ = $$[$0];
break;
case 111:this.$ = $$[$0];
break;
case 112:this.$ = $$[$0];
break;
case 113:this.$ = $$[$0];
break;
case 114:this.$ = $$[$0];
break;
case 115:this.$ = $$[$0];
break;
case 116:this.$ = $$[$0];
break;
case 117:this.$ = $$[$0];
break;
case 118:this.$ = $$[$0];
break;
case 119:this.$ = $$[$0];
break;
case 120:this.$ = $$[$0];
break;
case 121:this.$ = $$[$0];
break;
case 122:this.$ = $$[$0];
break;
case 123:this.$ = $$[$0];
break;
case 124:this.$ = $$[$0];
break;
case 125:this.$ = $$[$0];
break;
case 126:this.$ = $$[$0];
break;
case 127:this.$ = $$[$0];
break;
case 128:this.$ = $$[$0];
break;
case 129:this.$ = $$[$0];
break;
case 130:this.$ = $$[$0];
break;
case 131:this.$ = $$[$0];
break;
case 132:this.$ = $$[$0];
break;
case 133:this.$ = new DataTypeDeclarations(_$[$0-4].first_line, _$[$0-4].first_column, {}, [$$[$0-2].concat($$[$0-3])]);
break;
case 134:this.$ = new DataTypeDeclaration(_$[$0-2].first_line, _$[$0-2].first_column, {name: $$[$0-2]}, [$$[$0]]);
break;
case 141:this.$ = new Range();
break;
case 144:this.$ = $$[$0];
break;
case 159:this.$ = $$[$0];
break;
case 166:this.$ = new InputDeclarations(_$[$0-5].first_line, _$[$0-5].first_column, {}, $$[$0-1].concat($$[$0-3]));
break;
case 167:this.$ = new InputDeclaration(_$[$0-2].first_line, _$[$0-2].first_column, {names: $$[$0-2]}, [].concat($$[$0]));
break;
case 168:this.$ = new EdgeDeclaration(_$[$0-1].first_line, _$[$0-1].first_column, {}, []);
break;
case 169:this.$ = $$[$0];
break;
case 171:this.$ = $$[$0].concat($$[$0-1]);
break;
case 172:this.$ = $$[$0];
break;
case 173:this.$ = new OutputDeclaration(_$[$0-2].first_line, _$[$0-2].first_column, {names: $$[$0-2]}, [].concat($$[$0]));
break;
case 174:this.$ = new OutputDeclarations(_$[$0-5].first_line, _$[$0-5].first_column, {}, $$[$0-1].concat($$[$0-3]));
break;
case 175:this.$ = new InputOutputDeclarations(_$[$0-4].first_line, _$[$0-4].first_column, {}, [].concat($$[$0-2]).concat($$[$0-3]));
break;
case 179:this.$ = new VarDeclarations(_$[$0-5].first_line, _$[$0-5].first_column, {constant:(constant!==undefined)?true:false}, [].concat($$[$0-1]).concat($$[$0-3]));
break;
case 180:this.$ = [];
break;
case 181:$$[$0-1].push($$[$0]);
break;
case 182:this.$ = [];
break;
case 183:$$[$0-1].push($$[$0]);
break;
case 184:this.$ = [];
break;
case 185:$$[$0-1].push($$[$0]);
break;
case 186:this.$ = [];
break;
case 187:$$[$0-1].push($$[$0]);
break;
case 188:this.$ = [];
break;
case 189:$$[$0-1].push($$[$0]);
break;
case 190:this.$ = [];
break;
case 191:$$[$0-1].push($$[$0]);
break;
case 192:this.$ = [];
break;
case 193:$$[$0-1].push($$[$0]);
break;
case 194:this.$ = [];
break;
case 195:$$[$0-1].push($$[$0]);
break;
case 196:this.$ = [];
break;
case 197:$$[$0-1].push($$[$0]);
break;
case 200:this.$ = [];
break;
case 201:$$[$0-1].push($$[$0]);
break;
case 211:this.$ = [];
break;
case 212:$$[$0-1].push($$[$0]);
break;
case 215:this.$ = [];
break;
case 216:$$[$0-1].push($$[$0]);
break;
case 236:this.$ = [];
break;
case 237:$$[$0-1].push($$[$0]);
break;
case 246:this.$ = [];
break;
case 247:$$[$0-3].push($$[$0-2]);
break;
case 254:this.$ = [];
break;
case 255:$$[$0-2].push($$[$0-1]);
break;
case 295:this.$ = [];
break;
case 296:$$[$0-2].push($$[$0-1]);
break;
case 313:this.$ = [];
break;
case 314:$$[$0-2].push($$[$0-1]);
break;
case 315:this.$ = [];
break;
case 316:$$[$0-2].push($$[$0-1]);
break;
case 319:this.$ = [];
break;
case 320:$$[$0-2].push($$[$0-1]);
break;
case 323:this.$ = [];
break;
case 324:$$[$0-2].push($$[$0-1]);
break;
case 325:this.$ = [];
break;
case 326:$$[$0-2].push($$[$0-1]);
break;
case 331:this.$ = [];
break;
case 332:$$[$0-2].push($$[$0-1]);
break;
case 333:this.$ = [];
break;
case 334:$$[$0-2].push($$[$0-1]);
break;
case 339:this.$ = [];
break;
case 340:$$[$0-2].push($$[$0-1]);
break;
case 349:this.$ = [];
break;
case 350:$$[$0-1].push($$[$0]);
break;
case 355:this.$ = [];
break;
case 356:$$[$0-2].push($$[$0-1]);
break;
case 357:this.$ = [];
break;
case 358:$$[$0-2].push($$[$0-1]);
break;
case 375:this.$ = [];
break;
case 376:$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,6:[2,180],8:[2,180],208:[2,180]},{1:[3]},{5:3,6:[2,182],8:[2,182],207:4,208:[1,5]},{6:[1,6],7:7,8:[1,8]},{6:[2,181],8:[2,181],208:[2,181]},{209:[1,9]},{1:[2,1]},{6:[2,183],8:[2,183]},{9:[1,10]},{37:[1,11]},{10:12,13:[2,184],24:[2,184],28:[2,184],43:[2,184],50:[2,184],257:[2,184],274:[2,184],291:[2,184]},{209:[2,295],210:13,211:[2,295]},{11:14,13:[2,186],14:15,15:16,16:17,24:[2,186],28:[2,186],43:[2,186],50:[2,186],257:[1,18],274:[1,19],291:[2,186]},{209:[1,21],211:[1,20]},{12:22,13:[2,188],17:23,18:25,19:24,24:[2,188],28:[2,188],43:[2,188],50:[2,188],291:[1,26]},{13:[2,185],24:[2,185],28:[2,185],43:[2,185],50:[2,185],257:[2,185],274:[2,185],291:[2,185]},{13:[2,3],24:[2,3],28:[2,3],43:[2,3],50:[2,3],257:[2,3],274:[2,3],291:[2,3]},{13:[2,4],24:[2,4],28:[2,4],43:[2,4],50:[2,4],257:[2,4],274:[2,4],291:[2,4]},{9:[2,337],258:27,311:28,312:[1,29],313:[1,30]},{9:[2,353],275:31,312:[1,33],313:[1,34],316:32},{6:[2,133],8:[2,133],208:[2,133]},{37:[1,35]},{13:[1,36]},{13:[2,187],24:[2,187],28:[2,187],43:[2,187],50:[2,187],291:[2,187]},{13:[2,190],20:37,23:38,24:[1,39],28:[2,190],43:[2,190],50:[2,190]},{13:[2,5],24:[2,5],28:[2,5],43:[2,5],50:[2,5],291:[2,5]},{9:[2,373],61:[2,373],132:[2,373],133:[2,373],134:[2,373],135:[2,373],177:[2,373],180:[2,373],181:[2,373],182:[2,373],183:[2,373],184:[2,373],185:[2,373],186:[2,373],187:[2,373],188:[2,373],189:[2,373],190:[2,373],191:[2,373],192:[2,373],193:[2,373],194:[2,373],195:[2,373],226:[2,373],269:[2,373],284:[2,373],288:[2,373],292:40,319:[1,41]},{9:[1,44],259:42,262:43},{9:[2,338]},{9:[2,335]},{9:[2,336]},{9:[1,44],262:46,273:45},{9:[2,354]},{9:[2,351]},{9:[2,352]},{209:[2,296],211:[2,296]},{6:[2,2],8:[2,2]},{13:[2,192],21:47,27:48,28:[1,49],43:[2,192],50:[2,192]},{13:[2,189],24:[2,189],28:[2,189],43:[2,189],50:[2,189]},{9:[1,50]},{9:[1,59],61:[1,67],115:66,123:69,132:[1,76],133:[1,77],134:[1,78],135:[1,79],170:55,171:61,172:62,173:63,174:64,177:[1,65],178:82,179:83,180:[1,86],181:[1,87],182:[1,88],183:[1,89],184:[1,90],185:[1,91],186:[1,92],187:[1,93],188:[1,84],189:[1,85],190:[1,70],191:[1,71],192:[1,72],193:[1,73],194:[1,74],195:[1,75],214:53,216:56,218:57,220:58,226:[1,68],266:51,267:52,268:54,269:[1,60],284:[1,80],288:[1,81]},{9:[2,374],61:[2,374],132:[2,374],133:[2,374],134:[2,374],135:[2,374],177:[2,374],180:[2,374],181:[2,374],182:[2,374],183:[2,374],184:[2,374],185:[2,374],186:[2,374],187:[2,374],188:[2,374],189:[2,374],190:[2,374],191:[2,374],192:[2,374],193:[2,374],194:[2,374],195:[2,374],226:[2,374],269:[2,374],284:[2,374],288:[2,374]},{37:[1,94]},{35:[1,95]},{35:[2,349],63:[2,349],271:96},{37:[1,97]},{35:[1,98]},{13:[2,194],22:99,42:100,43:[1,101],50:[2,194]},{13:[2,191],28:[2,191],43:[2,191],50:[2,191]},{9:[1,102]},{25:103,26:[2,196],53:[2,196]},{37:[1,104]},{37:[2,169]},{37:[2,345]},{37:[2,346]},{37:[2,299],40:[1,106],215:105},{37:[2,301],40:[1,108],217:107},{37:[2,303],40:[1,110],219:109},{37:[2,305],40:[1,112],221:111},{37:[2,311],40:[1,114],222:113},{37:[2,347],40:[1,116],270:115},{37:[2,94],40:[2,94]},{37:[2,95],40:[2,95]},{37:[2,96],40:[2,96]},{37:[2,291],40:[2,291],175:117,227:[1,118]},{37:[2,98],40:[2,98]},{37:[2,99],40:[2,99],61:[1,119]},{9:[1,121],224:120},{227:[1,122]},{37:[2,100],40:[2,100]},{37:[2,113],40:[2,113]},{37:[2,114],40:[2,114]},{37:[2,115],40:[2,115]},{37:[2,116],40:[2,116]},{37:[2,117],40:[2,117]},{37:[2,118],40:[2,118]},{37:[2,119],40:[2,119]},{37:[2,120],40:[2,120]},{37:[2,121],40:[2,121]},{37:[2,122],40:[2,122]},{37:[2,289],40:[2,289],227:[2,289]},{37:[2,290],40:[2,290],227:[2,290]},{37:[2,101],40:[2,101],61:[2,101],116:[2,101]},{37:[2,102],40:[2,102],61:[2,102],116:[2,102]},{37:[2,111],40:[2,111],116:[2,111]},{37:[2,112],40:[2,112],116:[2,112]},{37:[2,103],40:[2,103],61:[2,103],116:[2,103]},{37:[2,104],40:[2,104],61:[2,104],116:[2,104]},{37:[2,105],40:[2,105],61:[2,105],116:[2,105]},{37:[2,106],40:[2,106],61:[2,106],116:[2,106]},{37:[2,107],40:[2,107],61:[2,107],116:[2,107]},{37:[2,108],40:[2,108],61:[2,108],116:[2,108]},{37:[2,109],40:[2,109],61:[2,109],116:[2,109]},{37:[2,110],40:[2,110],61:[2,110],116:[2,110]},{9:[2,339],260:123,261:[2,339]},{9:[1,59],61:[1,67],115:66,123:69,132:[1,76],133:[1,77],134:[1,78],135:[1,79],170:55,171:61,172:62,173:63,174:64,177:[1,65],178:82,179:83,180:[1,86],181:[1,87],182:[1,88],183:[1,89],184:[1,90],185:[1,91],186:[1,92],187:[1,93],188:[1,84],189:[1,85],190:[1,70],191:[1,71],192:[1,72],193:[1,73],194:[1,74],195:[1,127],214:53,216:56,218:57,220:58,226:[1,68],263:124,264:125,266:126,267:52,268:54,269:[1,60],284:[1,80],288:[1,81]},{35:[2,171],63:[1,129],272:128},{9:[2,355],261:[2,355],276:130},{9:[1,59],61:[1,67],115:66,123:69,132:[1,76],133:[1,77],134:[1,78],135:[1,79],170:55,171:61,172:62,173:63,174:64,177:[1,65],178:82,179:83,180:[1,86],181:[1,87],182:[1,88],183:[1,89],184:[1,90],185:[1,91],186:[1,92],187:[1,93],188:[1,84],189:[1,85],190:[1,70],191:[1,71],192:[1,72],193:[1,73],194:[1,74],195:[1,75],214:53,216:56,218:57,220:58,226:[1,68],266:131,267:52,268:54,269:[1,60],284:[1,80],288:[1,81]},{13:[2,6],49:132,50:[1,133]},{13:[2,193],43:[2,193],50:[2,193]},{9:[1,134]},{29:135,34:[2,198],53:[2,198],71:136,72:[1,137]},{26:[1,138],52:139,53:[1,140]},{9:[2,375],61:[2,375],132:[2,375],133:[2,375],134:[2,375],135:[2,375],177:[2,375],180:[2,375],181:[2,375],182:[2,375],183:[2,375],184:[2,375],185:[2,375],186:[2,375],187:[2,375],188:[2,375],189:[2,375],190:[2,375],191:[2,375],192:[2,375],193:[2,375],194:[2,375],195:[2,375],226:[2,375],261:[2,375],269:[2,375],284:[2,375],288:[2,375],293:141},{37:[2,135]},{57:143,89:148,106:142,107:144,108:145,109:146,110:147,111:149,112:171,113:181,114:182,115:159,117:160,118:[1,172],119:[1,173],120:[1,174],121:[1,185],123:161,124:[1,162],130:156,132:[1,167],133:[1,168],134:[1,169],135:[1,170],136:[1,157],137:[1,158],138:[1,150],139:[1,151],140:152,141:153,142:154,143:155,144:[1,163],155:[1,178],164:164,166:165,168:[1,184],169:166,178:82,179:83,180:[1,86],181:[1,87],182:[1,88],183:[1,89],184:[1,90],185:[1,91],186:[1,92],187:[1,93],188:[1,84],189:[1,85],190:[1,177],191:[1,175],192:[1,176],193:[1,179],194:[1,180],305:[1,183]},{37:[2,136]},{112:186,113:181,114:182,121:[1,185],168:[1,184],305:[1,183]},{37:[2,137]},{9:[1,121],224:187},{37:[2,138]},{227:[1,189],232:188},{37:[2,139]},{9:[1,121],57:143,61:[1,195],89:148,106:191,107:144,108:145,109:146,110:147,111:149,112:171,113:181,114:182,115:159,117:160,118:[1,172],119:[1,173],120:[1,174],121:[1,185],123:161,124:[1,162],130:156,132:[1,167],133:[1,168],134:[1,169],135:[1,170],136:[1,157],137:[1,158],138:[1,150],139:[1,151],140:152,141:153,142:154,143:155,144:[1,163],155:[1,178],164:164,166:165,168:[1,184],169:166,178:82,179:83,180:[1,86],181:[1,87],182:[1,88],183:[1,89],184:[1,90],185:[1,91],186:[1,92],187:[1,93],188:[1,84],189:[1,85],190:[1,177],191:[1,175],192:[1,176],193:[1,179],194:[1,180],224:192,227:[1,189],232:193,237:194,305:[1,183],310:190},{37:[2,170]},{61:[1,195],237:196},{37:[2,293],40:[1,198],176:197},{114:199,121:[1,185]},{112:201,113:181,114:182,121:[1,185],168:[1,184],223:200,305:[1,183]},{63:[2,313],64:[2,313],225:202},{37:[2,144],63:[2,144],64:[2,144],116:[1,203],229:[2,144]},{112:201,113:181,114:182,121:[1,185],168:[1,184],223:204,305:[1,183]},{9:[1,44],259:206,261:[1,205],262:43},{37:[2,167]},{37:[2,341]},{37:[2,342]},{37:[2,118],40:[2,118],265:207,314:[1,208],315:[1,209]},{35:[2,350],63:[2,350]},{9:[1,210]},{9:[1,44],261:[1,211],262:46,273:212},{37:[2,173]},{13:[2,195],50:[2,195]},{51:[1,213]},{37:[2,219],44:214,74:215,76:216,77:[1,217],80:[2,219]},{30:218,34:[2,200],53:[2,200]},{34:[2,199],53:[2,199]},{61:[1,219]},{13:[2,7],24:[2,7],28:[2,7],43:[2,7],50:[2,7]},{26:[2,197],53:[2,197]},{9:[1,220]},{9:[1,59],61:[1,67],115:66,123:69,132:[1,76],133:[1,77],134:[1,78],135:[1,79],170:55,171:61,172:62,173:63,174:64,177:[1,65],178:82,179:83,180:[1,86],181:[1,87],182:[1,88],183:[1,89],184:[1,90],185:[1,91],186:[1,92],187:[1,93],188:[1,84],189:[1,85],190:[1,70],191:[1,71],192:[1,72],193:[1,73],194:[1,74],195:[1,75],214:53,216:56,218:57,220:58,226:[1,68],261:[1,221],266:222,267:52,268:54,269:[1,60],284:[1,80],288:[1,81]},{37:[2,300]},{37:[2,40],63:[2,40],64:[2,40],229:[2,40]},{37:[2,41],63:[2,41],64:[2,41],229:[2,41]},{37:[2,42],63:[2,42],64:[2,42],229:[2,42]},{37:[2,43],63:[2,43],64:[2,43],229:[2,43]},{37:[2,44],63:[2,44],64:[2,44],229:[2,44]},{37:[2,45],63:[2,45],64:[2,45],73:[2,45],229:[2,45]},{37:[2,46],63:[2,46],64:[2,46],73:[2,46],229:[2,46]},{37:[2,70],40:[2,70],63:[2,70],64:[2,70],229:[2,70]},{37:[2,71],40:[2,71],63:[2,71],64:[2,71],229:[2,71]},{37:[2,72],63:[2,72],64:[2,72],229:[2,72]},{37:[2,73],63:[2,73],64:[2,73],229:[2,73]},{37:[2,74],63:[2,74],64:[2,74],229:[2,74]},{37:[2,75],63:[2,75],64:[2,75],229:[2,75]},{116:[1,223]},{37:[2,68],63:[2,68],64:[2,68],229:[2,68]},{37:[2,69],63:[2,69],64:[2,69],229:[2,69]},{116:[1,224]},{35:[2,50],37:[2,50],63:[2,50],64:[2,50],73:[2,50],229:[2,50]},{116:[1,225]},{37:[2,258],63:[2,258],64:[2,258],73:[2,258],126:226,127:227,128:[1,228],229:[2,258]},{145:229,146:230,147:231,148:232,149:233,150:[1,234],155:[1,235],157:[1,236],159:[1,237],161:[1,238]},{116:[1,239]},{116:[1,240]},{116:[1,241]},{116:[2,64]},{116:[2,65]},{116:[2,66]},{116:[2,67]},{35:[2,51],37:[2,51],63:[2,51],64:[2,51],73:[2,51],229:[2,51]},{35:[2,52],37:[2,52],63:[2,52],64:[2,52],73:[2,52],229:[2,52]},{35:[2,53],37:[2,53],63:[2,53],64:[2,53],73:[2,53],229:[2,53]},{35:[2,54],37:[2,54],63:[2,54],64:[2,54],73:[2,54],229:[2,54]},{116:[2,283]},{116:[2,284]},{116:[2,285]},{116:[2,286]},{116:[2,287]},{116:[2,288]},{114:242,121:[1,185]},{35:[2,48],37:[2,48],63:[2,48],64:[2,48],73:[2,48],229:[2,48]},{121:[2,250]},{121:[2,251]},{35:[2,254],37:[2,254],61:[2,254],63:[2,254],64:[2,254],73:[2,254],121:[2,254],122:243,168:[2,254],229:[2,254],256:[2,254],307:[2,254]},{37:[2,302]},{37:[2,304]},{37:[2,306]},{9:[1,121],57:143,61:[1,195],89:148,106:247,107:144,108:145,109:146,110:147,111:149,112:171,113:181,114:246,115:159,117:160,118:[1,172],119:[1,173],120:[1,174],121:[1,185],123:161,124:[1,162],130:156,132:[1,167],133:[1,168],134:[1,169],135:[1,170],136:[1,157],137:[1,158],138:[1,150],139:[1,151],140:152,141:153,142:154,143:155,144:[1,163],155:[1,178],164:164,166:165,168:[1,184],169:166,178:82,179:83,180:[1,86],181:[1,87],182:[1,88],183:[1,89],184:[1,90],185:[1,91],186:[1,92],187:[1,93],188:[1,84],189:[1,85],190:[1,177],191:[1,175],192:[1,176],193:[1,179],194:[1,180],224:248,227:[1,189],232:250,233:244,235:245,237:249,305:[1,183]},{37:[2,312]},{37:[2,307]},{37:[2,308]},{37:[2,309]},{37:[2,310]},{9:[1,252],243:251},{37:[2,348]},{37:[2,97],40:[2,97]},{107:253,138:[1,150],139:[1,151]},{229:[1,254]},{64:[1,255]},{73:[1,256]},{63:[1,258],64:[1,257]},{9:[1,259]},{63:[2,315],228:260,229:[2,315]},{13:[2,166],24:[2,166],28:[2,166],43:[2,166],50:[2,166],257:[2,166],274:[2,166],291:[2,166]},{37:[1,261]},{37:[2,168]},{37:[2,343]},{37:[2,344]},{35:[2,172],63:[2,172]},{13:[2,174],24:[2,174],28:[2,174],43:[2,174],50:[2,174],257:[2,174],274:[2,174],291:[2,174]},{37:[1,262]},{13:[2,13],50:[2,13]},{45:263,82:264,83:[1,265],85:[2,209]},{37:[2,221],75:266,79:267,80:[1,268]},{37:[2,220],80:[2,220]},{35:[1,269]},{31:270,34:[1,272],52:271,53:[1,140]},{57:273,89:148,111:149,112:171,113:181,114:182,115:159,117:160,118:[1,172],119:[1,173],120:[1,174],121:[1,185],123:161,124:[1,162],168:[1,184],178:82,179:83,180:[1,86],181:[1,87],182:[1,88],183:[1,89],184:[1,90],185:[1,91],186:[1,92],187:[1,93],188:[1,84],189:[1,85],305:[1,183]},{40:[1,274]},{13:[2,179],24:[2,179],28:[2,179],43:[2,179],50:[2,179],291:[2,179]},{37:[1,275]},{114:277,118:[1,278],119:[1,279],120:[1,280],121:[1,185],131:276},{112:171,113:181,114:182,117:281,118:[1,172],119:[1,173],120:[1,174],121:[1,185],168:[1,184],305:[1,183]},{124:[1,282]},{37:[2,57],63:[2,57],64:[2,57],73:[2,57],229:[2,57]},{37:[2,259],63:[2,259],64:[2,259],73:[2,259],229:[2,259]},{121:[2,262],129:283,168:[1,286],305:[1,285],308:284},{37:[2,76],63:[2,76],64:[2,76],229:[2,76]},{37:[2,77],63:[2,77],64:[2,77],229:[2,77]},{37:[2,78],63:[2,78],64:[2,78],229:[2,78]},{37:[2,79],63:[2,79],64:[2,79],229:[2,79]},{37:[2,80],63:[2,80],64:[2,80],229:[2,80]},{37:[2,81],63:[2,81],64:[2,81],229:[2,81]},{156:287,157:[2,273],307:[1,288]},{158:289,159:[2,275],307:[1,290]},{160:291,161:[2,277],307:[1,292]},{150:[2,279],162:293,307:[1,294]},{114:296,121:[1,185],165:295},{114:298,121:[1,185],167:297},{114:298,121:[1,185],167:299},{35:[2,47],37:[2,47],63:[2,47],64:[2,47],73:[2,47],229:[2,47]},{35:[2,55],37:[2,55],61:[2,55],63:[2,55],64:[2,55],73:[2,55],121:[2,252],168:[2,55],229:[2,55],256:[2,55],306:300,307:[1,301]},{63:[2,319],229:[2,319],234:302},{63:[2,147],229:[2,147]},{61:[1,303],63:[2,48],229:[2,48]},{63:[2,149],64:[2,149],229:[2,149]},{63:[2,150],64:[2,150],229:[2,150]},{63:[2,151],64:[2,151],229:[2,151]},{63:[2,152],64:[2,152],229:[2,152]},{63:[2,325],64:[2,325],244:304},{40:[1,305]},{37:[2,294],40:[2,294]},{37:[2,292],40:[2,292]},{37:[2,140],40:[2,140]},{112:306,113:181,114:182,121:[1,185],168:[1,184],305:[1,183]},{37:[2,142],40:[2,142]},{9:[1,121],224:307},{37:[2,143],63:[2,143],64:[2,143],229:[2,143]},{63:[1,309],229:[1,308]},{9:[2,340],261:[2,340]},{9:[2,356],261:[2,356]},{46:310,85:[1,311]},{85:[2,210]},{35:[1,312]},{37:[1,313]},{37:[2,222]},{35:[1,314]},{78:315,295:[1,316],296:[1,317],297:[1,318]},{32:319,39:[1,320]},{34:[2,201],53:[2,201]},{35:[1,321]},{73:[1,322]},{9:[1,328],37:[2,215],54:323,55:324,56:325,57:327,58:326,59:329,61:[2,215],89:148,111:149,112:171,113:181,114:182,115:159,117:160,118:[1,172],119:[1,173],120:[1,174],121:[1,185],123:161,124:[1,162],168:[1,184],178:82,179:83,180:[1,86],181:[1,87],182:[1,88],183:[1,89],184:[1,90],185:[1,91],186:[1,92],187:[1,93],188:[1,84],189:[1,85],305:[1,183]},{9:[2,376],61:[2,376],132:[2,376],133:[2,376],134:[2,376],135:[2,376],177:[2,376],180:[2,376],181:[2,376],182:[2,376],183:[2,376],184:[2,376],185:[2,376],186:[2,376],187:[2,376],188:[2,376],189:[2,376],190:[2,376],191:[2,376],192:[2,376],193:[2,376],194:[2,376],195:[2,376],226:[2,376],261:[2,376],269:[2,376],284:[2,376],288:[2,376]},{37:[2,59],63:[2,59],64:[2,59],229:[2,59]},{37:[2,60],63:[2,60],64:[2,60],229:[2,60]},{37:[2,61],63:[2,61],64:[2,61],229:[2,61]},{37:[2,62],63:[2,62],64:[2,62],229:[2,62]},{37:[2,63],63:[2,63],64:[2,63],229:[2,63]},{35:[2,49],37:[2,49],63:[2,49],64:[2,49],73:[2,49],229:[2,49]},{37:[2,256],63:[2,256],64:[2,256],73:[2,256],125:330,127:331,128:[1,228],229:[2,256]},{114:332,121:[1,185]},{121:[2,263]},{121:[2,260]},{121:[2,261]},{147:333,157:[1,236]},{157:[2,274]},{148:334,159:[1,237]},{159:[2,276]},{149:335,161:[1,238]},{161:[2,278]},{150:[1,336]},{150:[2,280]},{37:[2,89],63:[2,89],64:[2,89],229:[2,89]},{35:[1,337]},{37:[2,91],63:[2,91],64:[2,91],229:[2,91]},{168:[1,338]},{168:[1,339]},{121:[1,340]},{121:[2,253]},{63:[1,342],229:[1,341]},{9:[1,121],57:143,61:[1,195],64:[2,321],89:148,106:247,107:144,108:145,109:146,110:147,111:149,112:171,113:181,114:182,115:159,117:160,118:[1,172],119:[1,173],120:[1,174],121:[1,185],123:161,124:[1,162],130:156,132:[1,167],133:[1,168],134:[1,169],135:[1,170],136:[1,157],137:[1,158],138:[1,150],139:[1,151],140:152,141:153,142:154,143:155,144:[1,163],155:[1,178],164:164,166:165,168:[1,184],169:166,178:82,179:83,180:[1,86],181:[1,87],182:[1,88],183:[1,89],184:[1,90],185:[1,91],186:[1,92],187:[1,93],188:[1,84],189:[1,85],190:[1,177],191:[1,175],192:[1,176],193:[1,179],194:[1,180],224:248,227:[1,189],232:250,235:344,236:343,237:249,305:[1,183]},{63:[1,346],64:[1,345]},{9:[1,121],57:143,61:[1,195],89:148,106:348,107:144,108:145,109:146,110:147,111:149,112:171,113:181,114:182,115:159,117:160,118:[1,172],119:[1,173],120:[1,174],121:[1,185],123:161,124:[1,162],130:156,132:[1,167],133:[1,168],134:[1,169],135:[1,170],136:[1,157],137:[1,158],138:[1,150],139:[1,151],140:152,141:153,142:154,143:155,144:[1,163],155:[1,178],164:164,166:165,168:[1,184],169:166,178:82,179:83,180:[1,86],181:[1,87],182:[1,88],183:[1,89],184:[1,90],185:[1,91],186:[1,92],187:[1,93],188:[1,84],189:[1,85],190:[1,177],191:[1,175],192:[1,176],193:[1,179],194:[1,180],224:349,227:[1,189],232:350,237:351,245:347,305:[1,183]},{63:[2,141],64:[2,141],229:[2,141]},{63:[2,314],64:[2,314]},{230:[1,352]},{112:201,113:181,114:182,121:[1,185],168:[1,184],223:353,305:[1,183]},{47:354,48:[2,211],88:[2,211]},{35:[1,355]},{84:356,298:[1,358],299:[1,357]},{83:[2,26],85:[2,26]},{81:359,298:[1,360],299:[1,361],300:[1,362]},{37:[2,27],80:[2,27]},{37:[2,223],80:[2,223]},{37:[2,224],80:[2,224]},{37:[2,225],80:[2,225]},{33:[1,363]},{40:[1,364]},{36:365,38:[1,366],66:[1,367],67:[1,368],68:[1,369],69:[1,370],70:[1,371]},{57:372,89:148,111:149,112:171,113:181,114:182,115:159,117:160,118:[1,172],119:[1,173],120:[1,174],121:[1,185],123:161,124:[1,162],168:[1,184],178:82,179:83,180:[1,86],181:[1,87],182:[1,88],183:[1,89],184:[1,90],185:[1,91],186:[1,92],187:[1,93],188:[1,84],189:[1,85],305:[1,183]},{37:[1,373]},{37:[2,15]},{37:[2,213]},{37:[2,214]},{37:[2,16]},{37:[2,17]},{37:[2,18],60:374,61:[1,375]},{37:[2,56],63:[2,56],64:[2,56],73:[2,56],229:[2,56]},{37:[2,257],63:[2,257],64:[2,257],73:[2,257],229:[2,257]},{37:[2,58],63:[2,58],64:[2,58],73:[2,58],229:[2,58]},{37:[2,84],63:[2,84],64:[2,84],229:[2,84]},{37:[2,85],63:[2,85],64:[2,85],229:[2,85]},{37:[2,86],63:[2,86],64:[2,86],229:[2,86]},{37:[2,87],63:[2,87],64:[2,87],229:[2,87]},{114:376,121:[1,185]},{114:377,121:[1,185]},{114:296,121:[1,185],165:378},{35:[2,255],37:[2,255],61:[2,255],63:[2,255],64:[2,255],73:[2,255],121:[2,255],168:[2,255],229:[2,255],256:[2,255],307:[2,255]},{37:[2,146],63:[2,146],64:[2,146],229:[2,146]},{9:[1,121],57:143,61:[1,195],89:148,106:247,107:144,108:145,109:146,110:147,111:149,112:171,113:181,114:246,115:159,117:160,118:[1,172],119:[1,173],120:[1,174],121:[1,185],123:161,124:[1,162],130:156,132:[1,167],133:[1,168],134:[1,169],135:[1,170],136:[1,157],137:[1,158],138:[1,150],139:[1,151],140:152,141:153,142:154,143:155,144:[1,163],155:[1,178],164:164,166:165,168:[1,184],169:166,178:82,179:83,180:[1,86],181:[1,87],182:[1,88],183:[1,89],184:[1,90],185:[1,91],186:[1,92],187:[1,93],188:[1,84],189:[1,85],190:[1,177],191:[1,175],192:[1,176],193:[1,179],194:[1,180],224:248,227:[1,189],232:250,233:379,235:245,237:249,305:[1,183]},{64:[1,380]},{64:[2,322]},{37:[2,155],63:[2,155],64:[2,155],229:[2,155]},{9:[1,252],243:381},{63:[2,156],64:[2,156]},{63:[2,327],64:[2,327]},{63:[2,328],64:[2,328]},{63:[2,329],64:[2,329]},{63:[2,330],64:[2,330]},{9:[1,384],115:385,123:69,132:[1,76],133:[1,77],134:[1,78],135:[1,79],170:383,171:61,172:62,173:63,174:64,177:[1,65],178:82,179:83,180:[1,86],181:[1,87],182:[1,88],183:[1,89],184:[1,90],185:[1,91],186:[1,92],187:[1,93],188:[1,84],189:[1,85],190:[1,70],191:[1,71],192:[1,72],193:[1,73],194:[1,74],195:[1,75],231:382,284:[1,80],288:[1,81]},{63:[2,316],229:[2,316]},{48:[1,386],87:387,88:[1,388]},{86:389,295:[1,390],297:[1,391],301:[1,392]},{37:[1,393]},{37:[2,229]},{37:[2,230]},{37:[2,28]},{37:[2,226]},{37:[2,227]},{37:[2,228]},{13:[2,8],28:[2,8],43:[2,8],50:[2,8]},{41:394,57:395,89:148,111:149,112:171,113:181,114:182,115:159,117:160,118:[1,172],119:[1,173],120:[1,174],121:[1,185],123:161,124:[1,162],168:[1,184],178:82,179:83,180:[1,86],181:[1,87],182:[1,88],183:[1,89],184:[1,90],185:[1,91],186:[1,92],187:[1,93],188:[1,84],189:[1,85],294:[1,396],305:[1,183]},{37:[1,397]},{37:[1,398]},{37:[2,202]},{37:[2,203]},{37:[2,204]},{37:[2,205]},{37:[2,206]},{64:[1,399]},{26:[2,14],34:[2,14],53:[2,14]},{37:[2,216],61:[2,216]},{9:[1,402],57:401,62:400,89:148,111:149,112:171,113:181,114:182,115:159,117:160,118:[1,172],119:[1,173],120:[1,174],121:[1,185],123:161,124:[1,162],168:[1,184],178:82,179:83,180:[1,86],181:[1,87],182:[1,88],183:[1,89],184:[1,90],185:[1,91],186:[1,92],187:[1,93],188:[1,84],189:[1,85],305:[1,183]},{35:[1,403]},{168:[1,404]},{37:[2,93],63:[2,93],64:[2,93],229:[2,93]},{63:[2,320],229:[2,320]},{63:[2,148],229:[2,148]},{63:[2,326],64:[2,326]},{37:[2,145],40:[2,145]},{37:[2,317],40:[2,317]},{37:[2,318],40:[2,318]},{37:[2,99],40:[2,99]},{13:[2,12],43:[2,12],50:[2,12]},{48:[2,212],88:[2,212]},{89:405,112:171,113:181,114:182,115:159,117:160,118:[1,172],119:[1,173],120:[1,174],121:[1,185],168:[1,184],178:82,179:83,180:[1,86],181:[1,87],182:[1,88],183:[1,89],184:[1,90],185:[1,91],186:[1,92],187:[1,93],305:[1,183]},{37:[1,406]},{37:[2,231]},{37:[2,232]},{37:[2,233]},{85:[2,29]},{37:[1,407]},{37:[2,207]},{37:[2,208]},{39:[2,9]},{39:[2,10]},{37:[1,408]},{63:[1,409]},{63:[2,217]},{63:[2,218]},{114:411,121:[1,185],152:410},{114:412,121:[1,185]},{35:[1,413]},{48:[2,30],88:[2,30]},{33:[2,11]},{34:[2,25],53:[2,25]},{57:414,89:148,111:149,112:171,113:181,114:182,115:159,117:160,118:[1,172],119:[1,173],120:[1,174],121:[1,185],123:161,124:[1,162],168:[1,184],178:82,179:83,180:[1,86],181:[1,87],182:[1,88],183:[1,89],184:[1,90],185:[1,91],186:[1,92],187:[1,93],188:[1,84],189:[1,85],305:[1,183]},{37:[2,90],63:[2,90],64:[2,90],229:[2,90]},{37:[2,281],63:[2,281],64:[2,281],163:415,229:[2,281],256:[1,416]},{37:[2,92],63:[2,92],64:[2,92],168:[2,92],229:[2,92]},{90:[1,417]},{64:[1,418]},{37:[2,88],63:[2,88],64:[2,88],229:[2,88]},{114:419,121:[1,185]},{9:[2,238],61:[2,238],91:420,95:421,98:422,303:[1,423]},{37:[2,19],61:[2,19]},{37:[2,282],63:[2,282],64:[2,282],229:[2,282]},{92:[1,424]},{64:[2,236],77:[2,236],80:[2,236],92:[2,236],96:425},{9:[1,429],61:[1,428],99:426,100:427},{9:[2,239],61:[2,239]},{9:[1,431],93:430},{64:[2,32],77:[1,434],80:[1,433],92:[2,32],97:432},{64:[2,35],77:[2,35],80:[2,35],92:[2,35]},{64:[2,240],77:[2,240],80:[2,240],92:[2,240]},{9:[2,238],61:[2,238],91:435,95:421,98:422,303:[1,423]},{64:[2,37],77:[2,37],80:[2,37],92:[2,37],101:[1,436]},{37:[2,234],94:437,302:[1,438]},{101:[1,439]},{64:[2,237],77:[2,237],80:[2,237],92:[2,237]},{9:[2,238],61:[2,238],95:440,98:422,303:[1,423]},{9:[2,238],61:[2,238],95:441,98:422,303:[1,423]},{64:[1,442]},{9:[2,242],102:443,303:[1,444]},{37:[1,445]},{9:[1,453],57:449,89:148,104:446,105:447,111:149,112:171,113:181,114:182,115:159,117:160,118:[1,172],119:[1,173],120:[1,174],121:[1,185],123:161,124:[1,162],168:[1,184],178:82,179:83,180:[1,86],181:[1,87],182:[1,88],183:[1,89],184:[1,90],185:[1,91],186:[1,92],187:[1,93],188:[1,84],189:[1,85],246:448,247:450,248:451,249:454,250:[1,452],252:455,253:456,305:[1,183]},{9:[1,457]},{64:[2,33],77:[2,33],80:[2,33],92:[2,33]},{64:[2,34],77:[2,34],80:[2,34],92:[2,34]},{64:[2,241],77:[2,241],80:[2,241],92:[2,241]},{9:[1,458]},{9:[2,243]},{48:[2,31],88:[2,31]},{37:[2,235]},{37:[2,39]},{37:[2,248]},{37:[2,249]},{37:[2,157]},{37:[2,158],227:[1,459],256:[1,460]},{114:461,121:[1,185]},{37:[2,159],227:[2,159],256:[2,159]},{37:[2,160],227:[2,160],256:[2,160]},{37:[2,162],227:[2,162],256:[2,162]},{37:[2,163],227:[2,163],256:[2,163]},{37:[2,246],63:[2,246],103:462,302:[2,246]},{64:[2,36],77:[2,36],80:[2,36],92:[2,36]},{254:[1,463]},{9:[1,464]},{37:[2,331],251:465,256:[2,331]},{37:[2,38],63:[1,466],302:[2,38]},{63:[2,333],229:[2,333],255:467},{37:[2,165],227:[2,165],256:[2,165]},{37:[2,161],256:[1,468]},{9:[1,469]},{63:[1,471],229:[1,470]},{114:472,121:[1,185]},{37:[2,244],63:[2,244],101:[1,474],302:[2,244],304:473},{37:[2,164],227:[2,164],256:[2,164]},{254:[1,475]},{37:[2,332],256:[2,332]},{37:[2,247],63:[2,247],302:[2,247]},{9:[1,476]},{63:[2,334],229:[2,334]},{37:[2,245],63:[2,245],302:[2,245]}],
defaultActions: {6:[2,1],28:[2,338],29:[2,335],30:[2,336],32:[2,354],33:[2,351],34:[2,352],52:[2,169],53:[2,345],54:[2,346],105:[2,135],107:[2,136],109:[2,137],111:[2,138],113:[2,139],115:[2,170],124:[2,167],125:[2,341],126:[2,342],131:[2,173],142:[2,300],167:[2,64],168:[2,65],169:[2,66],170:[2,67],175:[2,283],176:[2,284],177:[2,285],178:[2,286],179:[2,287],180:[2,288],183:[2,250],184:[2,251],186:[2,302],187:[2,304],188:[2,306],190:[2,312],191:[2,307],192:[2,308],193:[2,309],194:[2,310],196:[2,348],207:[2,168],208:[2,343],209:[2,344],264:[2,210],267:[2,222],284:[2,263],285:[2,260],286:[2,261],288:[2,274],290:[2,276],292:[2,278],294:[2,280],301:[2,253],324:[2,15],325:[2,213],326:[2,214],327:[2,16],328:[2,17],344:[2,322],357:[2,229],358:[2,230],359:[2,28],360:[2,226],361:[2,227],362:[2,228],367:[2,202],368:[2,203],369:[2,204],370:[2,205],371:[2,206],390:[2,231],391:[2,232],392:[2,233],393:[2,29],395:[2,207],396:[2,208],397:[2,9],398:[2,10],401:[2,217],402:[2,218],407:[2,11],444:[2,243],446:[2,235],447:[2,39],448:[2,248],449:[2,249],450:[2,157]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

var ast = require('./fcl_ast'),

Library                     = ast.Library
InputDeclarations           = ast.InputDeclarations
InputDeclaration            = ast.InputDeclaration
OutputDeclarations          = ast.OutputDeclarations
OutputDeclaration           = ast.OutputDeclaration
VarDeclarations             = ast.VarDeclarations
InputOutputDeclarations     = ast.InputOutputDeclarations
DataType                    = ast.DataType
FunctionBlock               = ast.FunctionBlock
FunctionBlockBody           = ast.FunctionBlockBody
FuzzifyBlock                = ast.FuzzifyBlock
DefuzzifyBlock              = ast.DefuzzifyBlock
RuleBlock                   = ast.RuleBlock
OptionBlock                 = ast.OptionBlock
LinguisticTerm              = ast.LinguisticTerm
MembershipFunction          = ast.MembershipFunction
Point                       = ast.Point
Rule                        = ast.Rule
Range                       = ast.Range
WeightingFactor             = ast.WeightingFactor
OperatorDefinition          = ast.OperatorDefinition
ActivationMethod            = ast.ActivationMethod
AccumulationMethod          = ast.AccumulationMethod
DefuzzificationMethod       = ast.DefuzzificationMethod
DefaultValue                = ast.DefaultValue
Condition                   = ast.Condition
Conjunction                 = ast.Conjunction
Disjunction                 = ast.Disjunction
Conclusion                  = ast.Conclusion
X                           = ast.X
DataTypeDeclarations        = ast.DataTypeDeclarations
DataTypeDeclaration         = ast.DataTypeDeclaration
EdgeDeclaration             = ast.EdgeDeclaration


/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:return 85
break;
case 2:return 83
break;
case 3:return 80
break;
case 4:return 206
break;
case 5:return 197
break;
case 6:return 198
break;
case 7:return 199
break;
case 8:return 200
break;
case 9:return 201
break;
case 10:return 202
break;
case 11:return 203
break;
case 12:return 204
break;
case 13:return 205
break;
case 14:return 226
break;
case 15:return 296
break;
case 16:return 300
break;
case 17:return 297
break;
case 18:return 132
break;
case 19:return 195
break;
case 20:return 68
break;
case 21:return 66
break;
case 22:return 67
break;
case 23:return 319
break;
case 24:return 190
break;
case 25:return 193
break;
case 26:return 194
break;
case 27:return 39
break;
case 28:return 28
break;
case 29:return 182
break;
case 30:return 250
break;
case 31:return 144
break;
case 32:return 134
break;
case 33:return 33
break;
case 34:return 13
break;
case 35:return 26
break;
case 36:return 'END_OPTIONS'
break;
case 37:return 48
break;
case 38:return 261
break;
case 39:return 211
break;
case 40:return 8
break;
case 41:return 24
break;
case 42:return 90
break;
case 43:return 181
break;
case 44:return 101
break;
case 45:return 69
break;
case 46:return 183
break;
case 47:return 189
break;
case 48:return 135
break;
case 49:return 34
break;
case 50:return 295
break;
case 51:return 298
break;
case 52:return 294
break;
case 53:return 'NIL'
break;
case 54:return 303
break;
case 55:return 301
break;
case 56:return 'OPTIONS'
break;
case 57:return 230
break;
case 58:return 77
break;
case 59:return 299
break;
case 60:return 72
break;
case 61:return 188
break;
case 62:return 70
break;
case 63:return 43
break;
case 64:return 88
break;
case 65:return 53
break;
case 66:return 191
break;
case 67:return 177
break;
case 68:return 192
break;
case 69:return 184
break;
case 70:return 185
break;
case 71:return 187
break;
case 72:return 186
break;
case 73:return 92
break;
case 74:return 208
break;
case 75:return 274
break;
case 76:return 257
break;
case 77:return 278
break;
case 78:return 291
break;
case 79:return 133
break;
case 80:return 302
break;
case 81:return 288
break;
case 82:return 239
break;
case 83:return 284
break;
case 84:return 180
break;
case 85:return 242
break;
case 86:return 137
break;
case 87:return 136
break;
case 88:return 138
break;
case 89:return 139
break;
case 90:return 9
break;
case 91:return 118
break;
case 92:return 119
break;
case 93:return 120
break;
case 94:return 124
break;
case 95:return 121
break;
case 96:return 'EDOLLAR'
break;
case 97:return 'LDOLLAR'
break;
case 98:return 'NDOLLAR'
break;
case 99:return 'PDOLLAR'
break;
case 100:return 'RDOLLAR'
break;
case 101:return 'TDOLLAR'
break;
case 102:return 'ESINGLEQUOTE'
break;
case 103:return 'EQUOTE'
break;
case 104:return 'DOLLAR'
break;
case 105:return 'LETTER'
break;
case 106:return 116
break;
case 107:return 'PERCENT'
break;
case 108:return "SINGLEQUOTE"
break;
case 109:return 'QUOTE'
break;
case 110:return 305
break;
case 111:return 168
break;
case 112:return 307
break;
case 113:return 64
break;
case 114:return 61
break;
case 115:return 227
break;
case 116:return 229
break;
case 117:return 37
break;
case 118:return 63
break;
case 119:return 40
break;
case 120:return 35
break;
case 121:return 73
break;
case 122:return 'PRINTABLE'
break;
case 123:return 6
break;
case 124:return 'INVALID'
break;
case 125:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:ACCU)/i,/^(?:ACT)/i,/^(?:AND)/i,/^(?:ANY)/i,/^(?:ANY_DERIVED)/i,/^(?:ANY_ELEMENTARY)/i,/^(?:ANY_MAGNITUDE)/i,/^(?:ANY_NUM)/i,/^(?:ANY_REAL)/i,/^(?:ANY_INT)/i,/^(?:ANY_BIT)/i,/^(?:ANY_STRING)/i,/^(?:ANY_DATE)/i,/^(?:ARRAY)/i,/^(?:ASUM)/i,/^(?:BDIF)/i,/^(?:BSUM)/i,/^(?:BYTE)/i,/^(?:BOOL)/i,/^(?:CoA)/i,/^(?:CoG)/i,/^(?:CoGS)/i,/^(?:CONSTANT)/i,/^(?:DATE)/i,/^(?:DATE_AND_TIME)/i,/^(?:DT)/i,/^(?:DEFAULT)/i,/^(?:DEFUZZIFY)/i,/^(?:DINT)/i,/^(?:(\s*[IQM]{1}\s+(NIL|[WDLXB]){1}))/i,/^(?:((T|TIME)\s*\s*-?))/i,/^(?:DWORD)/i,/^(?:END_DEFUZZIFY)/i,/^(?:END_FUNCTION_BLOCK)/i,/^(?:END_FUZZIFY)/i,/^(?:END_OPTIONS)/i,/^(?:END_RULEBLOCK)/i,/^(?:END_VAR)/i,/^(?:END_TYPE)/i,/^(?:FUNCTION_BLOCK)/i,/^(?:FUZZIFY)/i,/^(?:IF)/i,/^(?:INT)/i,/^(?:IS)/i,/^(?:LM)/i,/^(?:LINT)/i,/^(?:LREAL)/i,/^(?:LWORD)/i,/^(?:METHOD)/i,/^(?:MAX)/i,/^(?:MIN)/i,/^(?:NC)/i,/^(?:NIL)/i,/^(?:NOT)/i,/^(?:NSUM)/i,/^(?:OPTIONS)/i,/^(?:OF)/i,/^(?:OR)/i,/^(?:PROD)/i,/^(?:RANGE)/i,/^(?:REAL)/i,/^(?:RM)/i,/^(?:RULEBLOCK)/i,/^(?:RULE)/i,/^(?:TERM)/i,/^(?:TIME_OF_DAY)/i,/^(?:TIME)/i,/^(?:TOD)/i,/^(?:USINT)/i,/^(?:UINT)/i,/^(?:ULINT)/i,/^(?:UDINT)/i,/^(?:THEN)/i,/^(?:TYPE)/i,/^(?:VAR_OUTPUT)/i,/^(?:VAR_INPUT)/i,/^(?:VAR_IN_OUT)/i,/^(?:VAR)/i,/^(?:WORD)/i,/^(?:WITH)/i,/^(?:WSTRING)/i,/^(?:STRUCT)/i,/^(?:STRING)/i,/^(?:SINT)/i,/^(?:END_STRUCT)/i,/^(?:FALSE)/i,/^(?:TRUE)/i,/^(?:('[.^\']|\$\\''))/i,/^(?:("[.^\']|\$""))/i,/^(?:(([a-zA-Z]|(_([a-zA-Z]|[0-9])))((_)?([a-zA-Z]|[0-9]))*))/i,/^(?:(2#\s*[0-1]\s*(_?[0-1])*))/i,/^(?:(8#\s*[0-7]\s*(_?[0-7])*))/i,/^(?:(16#\s*[0-9A-F]\s*(_?[0-9A-F])*))/i,/^(?:{REAL_NUMBER})/i,/^(?:([0-9]))/i,/^(?:\$\$)/i,/^(?:\$L)/i,/^(?:\$N)/i,/^(?:\$P)/i,/^(?:\$R)/i,/^(?:\$T)/i,/^(?:\$')/i,/^(?:\$')/i,/^(?:\$)/i,/^(?:{LETTER})/i,/^(?:#)/i,/^(?:%)/i,/^(?:')/i,/^(?:")/i,/^(?:\+)/i,/^(?:-)/i,/^(?:_)/i,/^(?:\))/i,/^(?:\()/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?::=)/i,/^(?::)/i,/^(?:\.\.)/i,/^(?:([ -~^$^"^']))/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = fcl;
exports.Parser = fcl.Parser;
exports.parse = function () { return fcl.parse.apply(fcl, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}