/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var fcl = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"library":3,"library_repetition0":4,"library_repetition1":5,"EOF":6,"function_block_declaration":7,"FUNCTION_BLOCK":8,"ID":9,"function_block_declaration_repetition0":10,"function_block_declaration_repetition1":11,"function_block_body":12,"END_FUNCTION_BLOCK":13,"fb_io_var_declarations":14,"input_declarations":15,"output_declarations":16,"other_var_declarations":17,"var_declarations":18,"function_block_body_repetition0":19,"function_block_body_repetition1":20,"function_block_body_repetition2":21,"function_block_body_repetition3":22,"fuzzify_block":23,"FUZZIFY":24,"fuzzify_block_repetition0":25,"END_FUZZIFY":26,"defuzzify_block":27,"DEFUZZIFY":28,"defuzzify_block_option0":29,"defuzzify_block_repetition0":30,"defuzzification_method":31,"default_value":32,"END_DEFUZZIFY":33,"METHOD":34,"COLON":35,"defuzzification_method_options":36,"SEMICOLON":37,"CoG":38,"CoGS":39,"CoA":40,"LM":41,"RM":42,"DEFAULT":43,"ASSIGNMENT":44,"default_value_group0":45,"rule_block":46,"RULEBLOCK":47,"operator_definition":48,"rule_block_option0":49,"accumulation_method":50,"rule_block_repetition0":51,"END_RULEBLOCK":52,"operator_definition_option0":53,"operator_definition_option1":54,"operator_definition_disjunction":55,"OR":56,"disjunction_algorithms":57,"MAX":58,"ASUM":59,"BSUM":60,"operator_definition_conjunction":61,"AND":62,"conjunction_algorithms":63,"MIN":64,"PROD":65,"BDIF":66,"option_block":67,"OPTION":68,"END_OPTION":69,"linguistic_term":70,"TERM":71,"membership_function":72,"membership_function_group0":73,"singleton":74,"numeric_literal":75,"points":76,"points_repetition0":77,"point":78,"LPARA":79,"point_group0":80,"COMMA":81,"RPARA":82,"range":83,"RANGE":84,"RANGEDOT":85,"activation_method":86,"ACT":87,"activation_method_group0":88,"ACCU":89,"accumulation_method_group0":90,"rule":91,"RULE":92,"integer_literal":93,"IF":94,"condition":95,"THEN":96,"conclusion":97,"rule_option0":98,"x":99,"condition_repetition0":100,"condition_concat":101,"x_option0":102,"x_group0":103,"subcondition":104,"subcondition_equation":105,"IS":106,"subcondition_equation_option0":107,"conclusion_equation":108,"conclusion_repetition0":109,"conclusion_repetition1":110,"conclusion_concat":111,"weighting_factor":112,"WITH":113,"weighting_factor_group0":114,"constant":115,"boolean_literal":116,"real_literal":117,"signed_integer":118,"signed_integer_group0":119,"integer":120,"integer_type_name":121,"HASH":122,"integer_value":123,"BINARY_INTEGER":124,"OCTAL_INTEGER":125,"HEX_INTEGER":126,"DIGIT":127,"integer_repetition0":128,"real_type_name":129,"REAL_NUMBER":130,"real_literal_option0":131,"real_literal_option1":132,"exponent":133,"E":134,"exponent_option0":135,"TRUE":136,"FALSE":137,"elementary_type_name":138,"numeric_type_name":139,"signed_integer_type_name":140,"unsigned_integer_type_name":141,"INT":142,"REAL":143,"simple_spec_init":144,"simple_spec_init_option0":145,"simple_spec_init_value":146,"VAR_INPUT":147,"input_declarations_option0":148,"input_declaration":149,"input_declarations_repetition0":150,"END_VAR":151,"name_list":152,"input_declaration_group0":153,"edge_declaration":154,"BOOL":155,"edge_declaration_group0":156,"name_list_repetition0":157,"name_list_concat":158,"VAR_OUTPUT":159,"output_declarations_option0":160,"var_init_decl":161,"output_declarations_repetition0":162,"input_output_declarations":163,"VAR_IN_OUT":164,"var_declaration":165,"input_output_declarations_repetition0":166,"VAR":167,"var_declarations_option0":168,"var_declarations_repetition0":169,"data_type_declarations":170,"NC":171,"NSUM":172,"NOT":173,"PLUS":174,"DASH":175,"integer_repetition0_option0":176,"LDASH":177,"exponent_option0_group0":178,"input_declarations_option0_group0":179,"RETAIN":180,"NON_RETAIN":181,"R_EDGE":182,"F_EDGE":183,"output_declarations_option0_group0":184,"CONSTANT":185,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"FUNCTION_BLOCK",9:"ID",13:"END_FUNCTION_BLOCK",24:"FUZZIFY",26:"END_FUZZIFY",28:"DEFUZZIFY",33:"END_DEFUZZIFY",34:"METHOD",35:"COLON",37:"SEMICOLON",38:"CoG",39:"CoGS",40:"CoA",41:"LM",42:"RM",43:"DEFAULT",44:"ASSIGNMENT",47:"RULEBLOCK",52:"END_RULEBLOCK",56:"OR",58:"MAX",59:"ASUM",60:"BSUM",62:"AND",64:"MIN",65:"PROD",66:"BDIF",68:"OPTION",69:"END_OPTION",71:"TERM",79:"LPARA",81:"COMMA",82:"RPARA",84:"RANGE",85:"RANGEDOT",87:"ACT",89:"ACCU",92:"RULE",94:"IF",96:"THEN",106:"IS",113:"WITH",122:"HASH",124:"BINARY_INTEGER",125:"OCTAL_INTEGER",126:"HEX_INTEGER",127:"DIGIT",130:"REAL_NUMBER",134:"E",136:"TRUE",137:"FALSE",141:"unsigned_integer_type_name",142:"INT",143:"REAL",147:"VAR_INPUT",151:"END_VAR",155:"BOOL",159:"VAR_OUTPUT",164:"VAR_IN_OUT",167:"VAR",170:"data_type_declarations",171:"NC",172:"NSUM",173:"NOT",174:"PLUS",175:"DASH",177:"LDASH",180:"RETAIN",181:"NON_RETAIN",182:"R_EDGE",183:"F_EDGE",185:"CONSTANT"},
productions_: [0,[3,3],[7,6],[14,1],[14,1],[17,1],[12,4],[23,4],[27,7],[31,4],[36,1],[36,1],[36,1],[36,1],[36,1],[32,4],[46,7],[48,3],[55,3],[57,1],[57,1],[57,1],[61,3],[63,1],[63,1],[63,1],[67,2],[70,5],[72,1],[74,1],[74,1],[76,1],[78,5],[83,7],[86,4],[50,4],[91,9],[95,2],[101,2],[101,2],[99,2],[104,1],[104,1],[105,4],[97,2],[97,2],[108,3],[111,2],[111,2],[112,2],[115,1],[115,1],[75,1],[75,1],[118,2],[118,1],[93,3],[93,1],[123,1],[123,1],[123,1],[123,1],[120,2],[117,4],[117,2],[133,3],[116,1],[116,1],[138,1],[139,1],[139,1],[121,1],[121,1],[140,1],[129,1],[144,2],[146,2],[15,6],[149,3],[154,2],[152,2],[158,2],[16,6],[163,5],[165,3],[161,3],[18,6],[4,0],[4,2],[5,0],[5,2],[10,0],[10,2],[11,0],[11,2],[19,0],[19,2],[20,0],[20,2],[21,0],[21,2],[22,0],[22,2],[25,0],[25,2],[29,0],[29,1],[30,0],[30,2],[45,1],[45,1],[49,0],[49,1],[51,0],[51,2],[53,0],[53,1],[54,0],[54,1],[73,1],[73,1],[77,0],[77,2],[80,1],[80,1],[88,1],[88,1],[90,1],[90,1],[90,1],[98,0],[98,1],[100,0],[100,2],[102,0],[102,1],[103,1],[103,3],[107,0],[107,1],[109,0],[109,2],[110,0],[110,2],[114,1],[114,1],[119,1],[119,1],[176,0],[176,1],[128,0],[128,3],[131,0],[131,1],[132,0],[132,1],[178,1],[178,1],[135,0],[135,1],[145,0],[145,1],[179,1],[179,1],[148,0],[148,1],[150,0],[150,3],[153,1],[153,1],[156,1],[156,1],[157,0],[157,2],[184,1],[184,1],[160,0],[160,1],[162,0],[162,3],[166,0],[166,3],[168,0],[168,1],[169,0],[169,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return new Library(_$[$0-2].first_line, _$[$0-2].first_column, {}, [].concat($$[$0-2]).concat($$[$0-1])).simplify() 
break;
case 2:this.$ = new FunctionBlock(_$[$0-5].first_line, _$[$0-5].first_column, {name: $$[$0-4]}, [].concat($$[$0-3]).concat($$[$0-2]).concat($$[$0-1]));
break;
case 3:this.$ = $$[$0];
break;
case 4:this.$ = $$[$0];
break;
case 5:this.$ = $$[$0];
break;
case 6:this.$ = new FunctionBlockBody(_$[$0-3].first_line, _$[$0-3].first_column, {}, [].concat($$[$0-3]).concat($$[$0-2]).concat($$[$0-1]).concat($$[$0]));
break;
case 7:this.$ = new FuzzifyBlock(_$[$0-2].first_line, _$[$0-2].first_column, {variable: $$[$0-2]}, [].concat($$[$0-1]));
break;
case 8:this.$ = new DefuzzifyBlock(_$[$0-6].first_line, _$[$0-6].first_column, {variable: $$[$0-5]}, [].concat($$[$0-4]).concat($$[$0-3]).concat($$[$0-2]).concat($$[$0-1]));
break;
case 9:this.$ = new DefuzzificationMethod(_$[$0-3].first_line, _$[$0-3].first_column, {method: $$[$0-1]}, []);
break;
case 10:this.$ = DefuzzificationMethods.COG;
break;
case 11:this.$ = DefuzzificationMethods.COGS;
break;
case 12:this.$ = DefuzzificationMethods.COA;
break;
case 13:this.$ = DefuzzificationMethods.LM;
break;
case 14:this.$ = DefuzzificationMethods.RM;
break;
case 15:this.$ = new DefaultValue(_$[$0-3].first_line, _$[$0-3].first_column, {value: $$[$0-1]}, []);
break;
case 16:this.$ = new RuleBlock(_$[$0-6].first_line, _$[$0-6].first_column, {id: $$[$0-5]}, [].concat($$[$0-4]).concat($$[$0-3]).concat($$[$0-2]).concat($$[$0-1]));
break;
case 17:this.$ = new OperatorDefinition(_$[$0-2].first_line, _$[$0-2].first_column, {orMethod: $$[$0-2], andMethod: $$[$0-1]}, []);
break;
case 18:this.$ = $$[$0];
break;
case 19:this.$ = OperatorAlgorithms.MAX;
break;
case 20:this.$ = OperatorAlgorithms.ASUM;
break;
case 21:this.$ = OperatorAlgorithms.BSUM;
break;
case 22:this.$ = $$[$0];
break;
case 23:this.$ = OperatorAlgorithms.MIN;
break;
case 24:this.$ = OperatorAlgorithms.PROD;
break;
case 25:this.$ = OperatorAlgorithms.BDIF;
break;
case 26:this.$ = new OptionBlock(_$[$0-1].first_line, _$[$0-1].first_column, {}, []);
break;
case 27:this.$ = new LinguisticTerm(_$[$0-4].first_line, _$[$0-4].first_column, {name: $$[$0-3]}, [].concat($$[$0-1]));
break;
case 28:this.$ = new MembershipFunction(_$[$0].first_line, _$[$0].first_column, {}, [].concat($$[$0]));
break;
case 29:this.$ = new Singleton(_$[$0].first_line, _$[$0].first_column, {value: $$[$0]});
break;
case 30:this.$ = new Singleton(_$[$0].first_line, _$[$0].first_column, {value: $$[$0]});
break;
case 31:this.$ = $$[$0];
break;
case 32:this.$ = new Point(_$[$0-3].first_line, _$[$0-3].first_column, {x: $$[$0-3], y: $$[$0-1]});
break;
case 33:this.$ = new Range(_$[$0-4].first_line, _$[$0-4].first_column, {start: $$[$0-4], end: $$[$0-2]});
break;
case 34:this.$ = new ActivationMethod(_$[$0-3].first_line, _$[$0-3].first_column, {name: $$[$0-1]}, []);
break;
case 35:this.$ = new AccumulationMethod(_$[$0].first_line, _$[$0].first_column, {name: $$[$0-1]}, []);
break;
case 36: this.$ = new Rule(_$[$0-8].first_line, _$[$0-8].first_column, {number: $$[$0-7]}, [].concat($$[$0-4]).concat($$[$0-2]).concat($$[$0-4]).concat($$[$0-1]))
break;
case 37:this.$ = new Condition(_$[$0-1].first_line, _$[$0-1].first_column, {}, [].concat($$[$0-1]).concat($$[$0]));
break;
case 38:this.$ =  new Conjunction(_$[$0-1].first_line, _$[$0-1].first_column, {}, [$$[$0]]);
break;
case 39:this.$ = new Disjunction(_$[$0-1].first_line, _$[$0-1].first_column, {}, [$$[$0]]);
break;
case 40:this.$ = new X(_$[$0-1].first_line, _$[$0-1].first_column, {negation: ($$[$0-1]===undefined)?false:true}, [].concat($$[$0]));
break;
case 41:this.$ = new Subcondition(_$[$0].first_line, _$[$0].first_column, {}, [].concat($$[$0]));
break;
case 42:this.$ = new Subcondition(_$[$0].first_line, _$[$0].first_column, {}, [].concat($$[$0]));
break;
case 43:this.$ = new Equation(_$[$0-3].first_line, _$[$0-3].first_column, {a: $$[$0-3], b: $$[$0], negatedB: ($$[$0-1]===undefined)?false:true});
break;
case 44:this.$ = new Conclusion(_$[$0-1].first_line, _$[$0-1].first_column, {}, [].concat($$[$0-1]).concat($$[$0]));
break;
case 45:this.$ = new Conclusion(_$[$0-1].first_line, _$[$0-1].first_column, {}, [].concat($$[$0-1]).concat($$[$0]));
break;
case 46:this.$ = new Equation(_$[$0-2].first_line, _$[$0-2].first_column, {a: $$[$0-2], b: $$[$0], negatedB: false});
break;
case 47:this.$ = $$[$0];
break;
case 48:this.$ = $$[$0];
break;
case 49:this.$ = new WeightingFactor(_$[$0-1].first_line, _$[$0-1].first_column, {factor: $$[$0]});;
break;
case 50:this.$ = $$[$0];
break;
case 51:this.$ = $$[$0];
break;
case 52:this.$ = $$[$0];
break;
case 53:this.$ = $$[$0];
break;
case 54:this.$ = ($$[$0-1]==='-')? ($$[$0] * -1) : $$[$0];
break;
case 55:this.$ = $$[$0];
break;
case 56:this.$ = $$[$0-2];
break;
case 57:this.$ = $$[$0];
break;
case 58:this.$ = $$[$0];
break;
case 59:this.$ = new Number(yytext.substr(2).replace('_', ''));
break;
case 60:this.$ = new Number(yytext.substr(2).replace('_', ''));
break;
case 61:this.$ = new Number(yytext.substr(3).replace('_', ''));
break;
case 62:this.$ = new Number(yytext.replace('_', ''));
break;
case 63: ($$[$0] === undefined)? $$[$0-1] : Math.pow($$[$0-1], $$[$0]) 
break;
case 64: ($$[$02] === undefined)? $$[$0-1] : Math.pow($$[$0-1], $$[$0]) 
break;
case 65:this.$ = new Number(yytext);
break;
case 66:this.$ = true;
break;
case 67:this.$ = false;
break;
case 68:this.$ = $$[$0];
break;
case 69:this.$ = $$[$0];
break;
case 70:this.$ = $$[$0];
break;
case 71:this.$ = $$[$0];
break;
case 72:this.$ = $$[$0];
break;
case 73:this.$ = IntegerType;
break;
case 74:this.$ = RealType;
break;
case 75:this.$ = new SimpleSpecInit(_$[$0-1].first_line, _$[$0-1].first_column, {type: $$[$0-1], constant: $$[$0]}, []);
break;
case 76:this.$ = $$[$0];
break;
case 77:this.$ = new InputDeclarations(_$[$0-5].first_line, _$[$0-5].first_column, {retain: ($$[$0-4] === 'RETAIN')?true:false}, [].concat($$[$0-1]).concat($$[$0-3]));
break;
case 78:this.$ = new InputDeclaration(_$[$0-2].first_line, _$[$0-2].first_column, {names: $$[$0-2]}, [].concat($$[$0]));
break;
case 79:this.$ = new EdgeDeclaration(_$[$0-1].first_line, _$[$0-1].first_column, {risingEdge: ($$[$0] === 'R_EDGE')?true:false}, []);
break;
case 80:this.$ = $$[$0].concat($$[$0-1]);
break;
case 81:this.$ = $$[$0];
break;
case 82:this.$ = new OutputDeclarations(_$[$0-5].first_line, _$[$0-5].first_column, {}, [].concat($$[$0-1]).concat($$[$0-3]));
break;
case 83:this.$ = new InputOutputDeclarations(_$[$0-4].first_line, _$[$0-4].first_column, {}, [].concat($$[$0-2]).concat($$[$0-3]));
break;
case 84:this.$ = new VarDeclaration(_$[$0-2].first_line, _$[$0-2].first_column, {names: $$[$0-2], type: $$[$0]}, []);
break;
case 85:this.$ = new VarInitDecl(_$[$0-2].first_line, _$[$0-2].first_column, {names: $$[$0-2]}, [].concat($$[$0]));
break;
case 86:this.$ = new VarDeclarations(_$[$0-5].first_line, _$[$0-5].first_column, {constant:(constant!==undefined)?true:false}, [].concat($$[$0-1]).concat($$[$0-3]));
break;
case 87:this.$ = [];
break;
case 88:$$[$0-1].push($$[$0]);
break;
case 89:this.$ = [];
break;
case 90:$$[$0-1].push($$[$0]);
break;
case 91:this.$ = [];
break;
case 92:$$[$0-1].push($$[$0]);
break;
case 93:this.$ = [];
break;
case 94:$$[$0-1].push($$[$0]);
break;
case 95:this.$ = [];
break;
case 96:$$[$0-1].push($$[$0]);
break;
case 97:this.$ = [];
break;
case 98:$$[$0-1].push($$[$0]);
break;
case 99:this.$ = [];
break;
case 100:$$[$0-1].push($$[$0]);
break;
case 101:this.$ = [];
break;
case 102:$$[$0-1].push($$[$0]);
break;
case 103:this.$ = [];
break;
case 104:$$[$0-1].push($$[$0]);
break;
case 107:this.$ = [];
break;
case 108:$$[$0-1].push($$[$0]);
break;
case 113:this.$ = [];
break;
case 114:$$[$0-1].push($$[$0]);
break;
case 121:this.$ = [];
break;
case 122:$$[$0-1].push($$[$0]);
break;
case 132:this.$ = [];
break;
case 133:$$[$0-1].push($$[$0]);
break;
case 140:this.$ = [];
break;
case 141:$$[$0-1].push($$[$0]);
break;
case 142:this.$ = [];
break;
case 143:$$[$0-1].push($$[$0]);
break;
case 150:this.$ = [];
break;
case 151:$$[$0-2].push($$[$0-1]);
break;
case 166:this.$ = [];
break;
case 167:$$[$0-2].push($$[$0-1]);
break;
case 172:this.$ = [];
break;
case 173:$$[$0-1].push($$[$0]);
break;
case 178:this.$ = [];
break;
case 179:$$[$0-2].push($$[$0-1]);
break;
case 180:this.$ = [];
break;
case 181:$$[$0-2].push($$[$0-1]);
break;
case 184:this.$ = [];
break;
case 185:$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,6:[2,87],8:[2,87],170:[2,87]},{1:[3]},{5:3,6:[2,89],8:[2,89],170:[1,4]},{6:[1,5],7:6,8:[1,7]},{6:[2,88],8:[2,88],170:[2,88]},{1:[2,1]},{6:[2,90],8:[2,90]},{9:[1,8]},{10:9,13:[2,91],24:[2,91],28:[2,91],47:[2,91],68:[2,91],147:[2,91],159:[2,91],167:[2,91]},{11:10,13:[2,93],14:11,15:12,16:13,24:[2,93],28:[2,93],47:[2,93],68:[2,93],147:[1,14],159:[1,15],167:[2,93]},{12:16,13:[2,95],17:17,18:19,19:18,24:[2,95],28:[2,95],47:[2,95],68:[2,95],167:[1,20]},{13:[2,92],24:[2,92],28:[2,92],47:[2,92],68:[2,92],147:[2,92],159:[2,92],167:[2,92]},{13:[2,3],24:[2,3],28:[2,3],47:[2,3],68:[2,3],147:[2,3],159:[2,3],167:[2,3]},{13:[2,4],24:[2,4],28:[2,4],47:[2,4],68:[2,4],147:[2,4],159:[2,4],167:[2,4]},{9:[2,164],148:21,179:22,180:[1,23],181:[1,24]},{9:[2,176],160:25,180:[1,27],181:[1,28],184:26},{13:[1,29]},{13:[2,94],24:[2,94],28:[2,94],47:[2,94],68:[2,94],167:[2,94]},{13:[2,97],20:30,23:31,24:[1,32],28:[2,97],47:[2,97],68:[2,97]},{13:[2,5],24:[2,5],28:[2,5],47:[2,5],68:[2,5],167:[2,5]},{9:[2,182],168:33,185:[1,34]},{9:[1,37],149:35,152:36},{9:[2,165]},{9:[2,162]},{9:[2,163]},{9:[1,37],152:39,161:38},{9:[2,177]},{9:[2,174]},{9:[2,175]},{6:[2,2],8:[2,2]},{13:[2,99],21:40,27:41,28:[1,42],47:[2,99],68:[2,99]},{13:[2,96],24:[2,96],28:[2,96],47:[2,96],68:[2,96]},{9:[1,43]},{9:[1,37],152:39,161:44},{9:[2,183]},{37:[1,45]},{35:[1,46]},{35:[2,172],81:[2,172],157:47},{37:[1,48]},{35:[1,49]},{13:[2,101],22:50,46:51,47:[1,52],68:[2,101]},{13:[2,98],28:[2,98],47:[2,98],68:[2,98]},{9:[1,53]},{25:54,26:[2,103],71:[2,103]},{37:[1,55]},{9:[2,166],150:56,151:[2,166]},{121:63,129:64,138:61,139:62,140:65,141:[1,66],142:[1,68],143:[1,67],144:59,153:57,154:58,155:[1,60]},{35:[2,80],81:[1,70],158:69},{9:[2,178],151:[2,178],162:71},{121:63,129:64,138:61,139:62,140:65,141:[1,66],142:[1,68],143:[1,67],144:72},{13:[2,6],67:73,68:[1,74]},{13:[2,100],47:[2,100],68:[2,100]},{9:[1,75]},{29:76,34:[2,105],71:[2,105],83:77,84:[1,78]},{26:[1,79],70:80,71:[1,81]},{9:[2,184],151:[2,184],169:82},{9:[1,37],149:84,151:[1,83],152:36},{37:[2,78]},{37:[2,168]},{37:[2,169]},{156:85,182:[1,86],183:[1,87]},{37:[2,160],44:[1,90],145:88,146:89},{37:[2,68],44:[2,68]},{37:[2,69],44:[2,69]},{37:[2,70],44:[2,70]},{37:[2,71],44:[2,71],122:[2,71]},{37:[2,72],44:[2,72],122:[2,72]},{37:[2,74],44:[2,74],122:[2,74]},{37:[2,73],44:[2,73],122:[2,73]},{35:[2,173],81:[2,173]},{9:[1,91]},{9:[1,37],151:[1,92],152:39,161:93},{37:[2,85]},{13:[2,102],68:[2,102]},{69:[1,94]},{37:[2,115],48:95,53:96,55:97,56:[1,98],62:[2,115]},{30:99,34:[2,107],71:[2,107]},{34:[2,106],71:[2,106]},{79:[1,100]},{13:[2,7],24:[2,7],28:[2,7],47:[2,7],68:[2,7]},{26:[2,104],71:[2,104]},{9:[1,101]},{9:[1,37],151:[1,102],152:39,161:103},{13:[2,77],24:[2,77],28:[2,77],47:[2,77],68:[2,77],147:[2,77],159:[2,77],167:[2,77]},{37:[1,104]},{37:[2,79]},{37:[2,170]},{37:[2,171]},{37:[2,75]},{37:[2,161]},{75:106,93:108,115:105,116:107,117:109,118:116,119:120,120:121,121:112,123:113,124:[1,117],125:[1,118],126:[1,119],127:[1,124],129:114,130:[1,115],136:[1,110],137:[1,111],140:65,141:[1,66],142:[1,68],143:[1,67],174:[1,122],175:[1,123]},{35:[2,81],81:[2,81]},{13:[2,82],24:[2,82],28:[2,82],47:[2,82],68:[2,82],147:[2,82],159:[2,82],167:[2,82]},{37:[1,125]},{13:[2,26],68:[2,26]},{49:126,86:127,87:[1,128],89:[2,111]},{37:[2,117],54:129,61:130,62:[1,131]},{37:[2,116],62:[2,116]},{35:[1,132]},{31:133,34:[1,135],70:134,71:[1,81]},{75:136,93:108,117:109,118:116,119:120,120:121,121:112,123:113,124:[1,117],125:[1,118],126:[1,119],127:[1,124],129:114,130:[1,115],140:65,141:[1,66],142:[1,68],143:[1,67],174:[1,122],175:[1,123]},{44:[1,137]},{13:[2,86],24:[2,86],28:[2,86],47:[2,86],68:[2,86],167:[2,86]},{37:[1,138]},{9:[2,167],151:[2,167]},{37:[2,76]},{37:[2,50]},{37:[2,51]},{37:[2,52],81:[2,52],82:[2,52],85:[2,52]},{37:[2,53],81:[2,53],82:[2,53],85:[2,53]},{37:[2,66]},{37:[2,67]},{122:[1,139]},{35:[2,57],37:[2,57],81:[2,57],82:[2,57],85:[2,57]},{122:[1,140]},{37:[2,154],81:[2,154],82:[2,154],85:[2,154],132:141,133:142,134:[1,143]},{35:[2,58],37:[2,58],81:[2,58],82:[2,58],85:[2,58]},{35:[2,59],37:[2,59],81:[2,59],82:[2,59],85:[2,59]},{35:[2,60],37:[2,60],81:[2,60],82:[2,60],85:[2,60]},{35:[2,61],37:[2,61],81:[2,61],82:[2,61],85:[2,61]},{120:144,127:[1,124]},{35:[2,55],37:[2,55],81:[2,55],82:[2,55],85:[2,55]},{127:[2,146]},{127:[2,147]},{35:[2,150],37:[2,150],81:[2,150],82:[2,150],85:[2,150],127:[2,150],128:145,177:[2,150]},{9:[2,179],151:[2,179]},{50:146,89:[1,147]},{89:[2,112]},{35:[1,148]},{37:[1,149]},{37:[2,118]},{35:[1,150]},{57:151,58:[1,152],59:[1,153],60:[1,154]},{32:155,43:[1,156]},{34:[2,108],71:[2,108]},{35:[1,157]},{85:[1,158]},{9:[1,164],37:[2,121],72:159,73:160,74:161,75:163,76:162,77:165,79:[2,121],93:108,117:109,118:116,119:120,120:121,121:112,123:113,124:[1,117],125:[1,118],126:[1,119],127:[1,124],129:114,130:[1,115],140:65,141:[1,66],142:[1,68],143:[1,67],174:[1,122],175:[1,123]},{9:[2,185],151:[2,185]},{118:116,119:120,120:121,123:166,124:[1,117],125:[1,118],126:[1,119],127:[1,124],174:[1,122],175:[1,123]},{130:[1,167]},{37:[2,64],81:[2,64],82:[2,64],85:[2,64]},{37:[2,155],81:[2,155],82:[2,155],85:[2,155]},{127:[2,158],135:168,174:[1,170],175:[1,171],178:169},{35:[2,54],37:[2,54],81:[2,54],82:[2,54],85:[2,54]},{35:[2,62],37:[2,62],81:[2,62],82:[2,62],85:[2,62],127:[2,148],176:172,177:[1,173]},{51:174,52:[2,113],92:[2,113]},{35:[1,175]},{64:[1,178],65:[1,177],88:176},{87:[2,17],89:[2,17]},{63:179,64:[1,180],65:[1,181],66:[1,182]},{37:[2,18],62:[2,18]},{37:[2,19],62:[2,19]},{37:[2,20],62:[2,20]},{37:[2,21],62:[2,21]},{33:[1,183]},{44:[1,184]},{36:185,38:[1,186],39:[1,187],40:[1,188],41:[1,189],42:[1,190]},{75:191,93:108,117:109,118:116,119:120,120:121,121:112,123:113,124:[1,117],125:[1,118],126:[1,119],127:[1,124],129:114,130:[1,115],140:65,141:[1,66],142:[1,68],143:[1,67],174:[1,122],175:[1,123]},{37:[1,192]},{37:[2,28]},{37:[2,119]},{37:[2,120]},{37:[2,29]},{37:[2,30]},{37:[2,31],78:193,79:[1,194]},{35:[2,56],37:[2,56],81:[2,56],82:[2,56],85:[2,56]},{37:[2,152],81:[2,152],82:[2,152],85:[2,152],131:195,133:196,134:[1,143]},{120:197,127:[1,124]},{127:[2,159]},{127:[2,156]},{127:[2,157]},{127:[1,198]},{127:[2,149]},{52:[1,199],91:200,92:[1,201]},{58:[1,203],60:[1,204],90:202,172:[1,205]},{37:[1,206]},{37:[2,125]},{37:[2,126]},{37:[2,22]},{37:[2,23]},{37:[2,24]},{37:[2,25]},{13:[2,8],28:[2,8],47:[2,8],68:[2,8]},{45:207,75:208,93:108,117:109,118:116,119:120,120:121,121:112,123:113,124:[1,117],125:[1,118],126:[1,119],127:[1,124],129:114,130:[1,115],140:65,141:[1,66],142:[1,68],143:[1,67],171:[1,209],174:[1,122],175:[1,123]},{37:[1,210]},{37:[2,10]},{37:[2,11]},{37:[2,12]},{37:[2,13]},{37:[2,14]},{82:[1,211]},{26:[2,27],34:[2,27],71:[2,27]},{37:[2,122],79:[2,122]},{9:[1,214],75:213,80:212,93:108,117:109,118:116,119:120,120:121,121:112,123:113,124:[1,117],125:[1,118],126:[1,119],127:[1,124],129:114,130:[1,115],140:65,141:[1,66],142:[1,68],143:[1,67],174:[1,122],175:[1,123]},{37:[2,63],81:[2,63],82:[2,63],85:[2,63]},{37:[2,153],81:[2,153],82:[2,153],85:[2,153]},{37:[2,65],81:[2,65],82:[2,65],85:[2,65]},{35:[2,151],37:[2,151],81:[2,151],82:[2,151],85:[2,151],127:[2,151],177:[2,151]},{13:[2,16],47:[2,16],68:[2,16]},{52:[2,114],92:[2,114]},{93:215,118:116,119:120,120:121,121:112,123:113,124:[1,117],125:[1,118],126:[1,119],127:[1,124],140:65,141:[1,66],142:[1,68],174:[1,122],175:[1,123]},{37:[1,216]},{37:[2,127]},{37:[2,128]},{37:[2,129]},{89:[2,34]},{37:[1,217]},{37:[2,109]},{37:[2,110]},{43:[2,9]},{37:[1,218]},{81:[1,219]},{81:[2,123]},{81:[2,124]},{35:[1,220]},{52:[2,35],92:[2,35]},{33:[2,15]},{34:[2,33],71:[2,33]},{75:221,93:108,117:109,118:116,119:120,120:121,121:112,123:113,124:[1,117],125:[1,118],126:[1,119],127:[1,124],129:114,130:[1,115],140:65,141:[1,66],142:[1,68],143:[1,67],174:[1,122],175:[1,123]},{94:[1,222]},{82:[1,223]},{9:[2,134],79:[2,134],95:224,99:225,102:226,173:[1,227]},{37:[2,32],79:[2,32]},{96:[1,228]},{56:[2,132],62:[2,132],82:[2,132],96:[2,132],100:229},{9:[1,234],79:[1,232],103:230,104:231,105:233},{9:[2,135],79:[2,135]},{9:[1,237],97:235,108:236},{56:[1,240],62:[1,239],82:[2,37],96:[2,37],101:238},{56:[2,40],62:[2,40],82:[2,40],96:[2,40]},{56:[2,136],62:[2,136],82:[2,136],96:[2,136]},{9:[2,134],79:[2,134],95:241,99:225,102:226,173:[1,227]},{56:[2,41],62:[2,41],82:[2,41],96:[2,41]},{56:[2,42],62:[2,42],82:[2,42],96:[2,42],106:[1,242]},{37:[2,130],98:243,112:244,113:[1,245]},{37:[2,140],81:[2,140],109:246,113:[2,140]},{37:[2,142],81:[2,142],106:[1,248],110:247,113:[2,142]},{56:[2,133],62:[2,133],82:[2,133],96:[2,133]},{9:[2,134],79:[2,134],99:249,102:226,173:[1,227]},{9:[2,134],79:[2,134],99:250,102:226,173:[1,227]},{82:[1,251]},{9:[2,138],107:252,173:[1,253]},{37:[1,254]},{37:[2,131]},{9:[1,256],75:257,93:108,114:255,117:109,118:116,119:120,120:121,121:112,123:113,124:[1,117],125:[1,118],126:[1,119],127:[1,124],129:114,130:[1,115],140:65,141:[1,66],142:[1,68],143:[1,67],174:[1,122],175:[1,123]},{37:[2,44],81:[1,259],111:258,113:[2,44]},{37:[2,45],81:[1,259],111:260,113:[2,45]},{9:[1,261]},{56:[2,38],62:[2,38],82:[2,38],96:[2,38]},{56:[2,39],62:[2,39],82:[2,39],96:[2,39]},{56:[2,137],62:[2,137],82:[2,137],96:[2,137]},{9:[1,262]},{9:[2,139]},{52:[2,36],92:[2,36]},{37:[2,49]},{37:[2,144]},{37:[2,145]},{37:[2,141],81:[2,141],113:[2,141]},{9:[1,264],108:263},{37:[2,143],81:[2,143],113:[2,143]},{37:[2,46],81:[2,46],113:[2,46]},{56:[2,43],62:[2,43],82:[2,43],96:[2,43]},{37:[2,47],81:[2,47],113:[2,47]},{37:[2,48],81:[2,48],106:[1,248],113:[2,48]}],
defaultActions: {5:[2,1],22:[2,165],23:[2,162],24:[2,163],26:[2,177],27:[2,174],28:[2,175],34:[2,183],57:[2,78],58:[2,168],59:[2,169],72:[2,85],85:[2,79],86:[2,170],87:[2,171],88:[2,75],89:[2,161],105:[2,76],106:[2,50],107:[2,51],110:[2,66],111:[2,67],122:[2,146],123:[2,147],127:[2,112],130:[2,118],160:[2,28],161:[2,119],162:[2,120],163:[2,29],164:[2,30],169:[2,159],170:[2,156],171:[2,157],173:[2,149],177:[2,125],178:[2,126],179:[2,22],180:[2,23],181:[2,24],182:[2,25],186:[2,10],187:[2,11],188:[2,12],189:[2,13],190:[2,14],203:[2,127],204:[2,128],205:[2,129],206:[2,34],208:[2,109],209:[2,110],210:[2,9],213:[2,123],214:[2,124],217:[2,15],244:[2,131],253:[2,139],255:[2,49],256:[2,144],257:[2,145]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

var ast = require('./fcl_ast');

Library                     = ast.Library
InputDeclarations           = ast.InputDeclarations
InputDeclaration            = ast.InputDeclaration
OutputDeclarations          = ast.OutputDeclarations
VarDeclarations             = ast.VarDeclarations
InputOutputDeclarations     = ast.InputOutputDeclarations
SimpleSpecInit              = ast.SimpleSpecInit
FunctionBlock               = ast.FunctionBlock
FunctionBlockBody           = ast.FunctionBlockBody
FuzzifyBlock                = ast.FuzzifyBlock
DefuzzifyBlock              = ast.DefuzzifyBlock
RuleBlock                   = ast.RuleBlock
OptionBlock                 = ast.OptionBlock
LinguisticTerm              = ast.LinguisticTerm
MembershipFunction          = ast.MembershipFunction
Singleton                   = ast.Singleton
Point                       = ast.Point
Rule                        = ast.Rule
Range                       = ast.Range
WeightingFactor             = ast.WeightingFactor
OperatorDefinition          = ast.OperatorDefinition
ActivationMethod            = ast.ActivationMethod
AccumulationMethod          = ast.AccumulationMethod
DefuzzificationMethod       = ast.DefuzzificationMethod
DefaultValue                = ast.DefaultValue
Condition                   = ast.Condition
Conjunction                 = ast.Conjunction
Disjunction                 = ast.Disjunction
Conclusion                  = ast.Conclusion
X                           = ast.X
Subcondition                = ast.Subcondition
Equation                    = ast.Equation
EdgeDeclaration             = ast.EdgeDeclaration
WeightingFactor             = ast.WeightingFactor
SimpleSpecInit              = ast.SimpleSpecInit
VarDeclaration              = ast.VarDeclaration
VarInitDecl                 = ast.VarInitDecl
RealType                    = ast.DataTypes.REAL
IntegerType                 = ast.DataTypes.INTEGER
OperatorAlgorithms          = ast.OperatorAlgorithms
DefuzzificationMethods      = ast.DefuzzificationMethods


/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:return 89
break;
case 2:return 87
break;
case 3:return 62
break;
case 4:return 59
break;
case 5:return 66
break;
case 6:return 60
break;
case 7:return 155
break;
case 8:return 40
break;
case 9:return 38
break;
case 10:return 39
break;
case 11:return 185
break;
case 12:return 43
break;
case 13:return 28
break;
case 14:return 33
break;
case 15:return 13
break;
case 16:return 26
break;
case 17:return 'END_OPTIONS'
break;
case 18:return 52
break;
case 19:return 151
break;
case 20:return 'END_TYPE'
break;
case 21:return 8
break;
case 22:return 24
break;
case 23:return 94
break;
case 24:return 142
break;
case 25:return 106
break;
case 26:return 41
break;
case 27:return 34
break;
case 28:return 58
break;
case 29:return 64
break;
case 30:return 171
break;
case 31:return 173
break;
case 32:return 181
break;
case 33:return 172
break;
case 34:return 'OPTIONS'
break;
case 35:return 56
break;
case 36:return 65
break;
case 37:return 84
break;
case 38:return 143
break;
case 39:return 180
break;
case 40:return 42
break;
case 41:return 47
break;
case 42:return 92
break;
case 43:return 71
break;
case 44:return 96
break;
case 45:return 159
break;
case 46:return 147
break;
case 47:return 164
break;
case 48:return 167
break;
case 49:return 113
break;
case 50:return 137
break;
case 51:return 136
break;
case 52:return 9
break;
case 53:return 124
break;
case 54:return 125
break;
case 55:return 126
break;
case 56:return 130
break;
case 57:return 127
break;
case 58:return 'LETTER'
break;
case 59:return 122
break;
case 60:return 174
break;
case 61:return 175
break;
case 62:return 177
break;
case 63:return 82
break;
case 64:return 79
break;
case 65:return 37
break;
case 66:return 81
break;
case 67:return 44
break;
case 68:return 35
break;
case 69:return 'DOT'
break;
case 70:return 85
break;
case 71:return 6
break;
case 72:return 'INVALID'
break;
case 73:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:ACCU)/i,/^(?:ACT)/i,/^(?:AND)/i,/^(?:ASUM)/i,/^(?:BDIF)/i,/^(?:BSUM)/i,/^(?:BOOL)/i,/^(?:CoA)/i,/^(?:CoG)/i,/^(?:CoGS)/i,/^(?:CONSTANT)/i,/^(?:DEFAULT)/i,/^(?:DEFUZZIFY)/i,/^(?:END_DEFUZZIFY)/i,/^(?:END_FUNCTION_BLOCK)/i,/^(?:END_FUZZIFY)/i,/^(?:END_OPTIONS)/i,/^(?:END_RULEBLOCK)/i,/^(?:END_VAR)/i,/^(?:END_TYPE)/i,/^(?:FUNCTION_BLOCK)/i,/^(?:FUZZIFY)/i,/^(?:IF)/i,/^(?:INT)/i,/^(?:IS)/i,/^(?:LM)/i,/^(?:METHOD)/i,/^(?:MAX)/i,/^(?:MIN)/i,/^(?:NC)/i,/^(?:NOT)/i,/^(?:NON_RETAIN)/i,/^(?:NSUM)/i,/^(?:OPTIONS)/i,/^(?:OR)/i,/^(?:PROD)/i,/^(?:RANGE)/i,/^(?:REAL)/i,/^(?:RETAIN)/i,/^(?:RM)/i,/^(?:RULEBLOCK)/i,/^(?:RULE)/i,/^(?:TERM)/i,/^(?:THEN)/i,/^(?:VAR_OUTPUT)/i,/^(?:VAR_INPUT)/i,/^(?:VAR_IN_OUT)/i,/^(?:VAR)/i,/^(?:WITH)/i,/^(?:FALSE)/i,/^(?:TRUE)/i,/^(?:(([a-zA-Z]|(_([a-zA-Z]|[0-9])))((_)?([a-zA-Z]|[0-9]))*))/i,/^(?:(2#\s*[0-1]\s*(_?[0-1])*))/i,/^(?:(8#\s*[0-7]\s*(_?[0-7])*))/i,/^(?:(16#\s*[0-9A-F]\s*(_?[0-9A-F])*))/i,/^(?:{REAL_NUMBER})/i,/^(?:([0-9]))/i,/^(?:{LETTER})/i,/^(?:#)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:_)/i,/^(?:\))/i,/^(?:\()/i,/^(?:;)/i,/^(?:,)/i,/^(?::=)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\.\.)/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = fcl;
exports.Parser = fcl.Parser;
exports.parse = function () { return fcl.parse.apply(fcl, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}