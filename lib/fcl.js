/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,8,170],$V1=[6,8],$V2=[13,24,28,47,68,144,159,167],$V3=[13,24,28,47,68,167],$V4=[13,24,28,47,68],$V5=[13,28,47,68],$V6=[1,37],$V7=[13,47,68],$V8=[35,81],$V9=[13,68],$Va=[26,71],$Vb=[9,148],$Vc=[1,66],$Vd=[1,68],$Ve=[1,67],$Vf=[34,71],$Vg=[1,81],$Vh=[37,44],$Vi=[37,44,123],$Vj=[37,62],$Vk=[1,117],$Vl=[1,118],$Vm=[1,119],$Vn=[1,124],$Vo=[1,115],$Vp=[1,122],$Vq=[1,123],$Vr=[37,81,82,85],$Vs=[35,37,81,82,85],$Vt=[1,143],$Vu=[35,37,81,82,85,128,177],$Vv=[37,79],$Vw=[52,92],$Vx=[9,79],$Vy=[2,135],$Vz=[1,222],$VA=[56,62,82,96],$VB=[37,81,114],$VC=[1,244],$VD=[37,114],$VE=[1,255];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"library":3,"library_repetition0":4,"library_repetition1":5,"EOF":6,"function_block_declaration":7,"FUNCTION_BLOCK":8,"ID":9,"function_block_declaration_repetition0":10,"function_block_declaration_repetition1":11,"function_block_body":12,"END_FUNCTION_BLOCK":13,"fb_io_var_declarations":14,"input_declarations":15,"output_declarations":16,"other_var_declarations":17,"var_declarations":18,"function_block_body_repetition0":19,"function_block_body_repetition1":20,"function_block_body_repetition2":21,"function_block_body_repetition3":22,"fuzzify_block":23,"FUZZIFY":24,"fuzzify_block_repetition0":25,"END_FUZZIFY":26,"defuzzify_block":27,"DEFUZZIFY":28,"defuzzify_block_option0":29,"defuzzify_block_repetition0":30,"defuzzification_method":31,"default_value":32,"END_DEFUZZIFY":33,"METHOD":34,"COLON":35,"defuzzification_method_options":36,"SEMICOLON":37,"CoG":38,"CoGS":39,"CoA":40,"LM":41,"RM":42,"DEFAULT":43,"ASSIGNMENT":44,"default_value_group0":45,"rule_block":46,"RULEBLOCK":47,"operator_definition":48,"rule_block_option0":49,"accumulation_method":50,"rule_block_repetition0":51,"END_RULEBLOCK":52,"operator_definition_option0":53,"operator_definition_option1":54,"operator_definition_disjunction":55,"OR":56,"disjunction_algorithms":57,"MAX":58,"ASUM":59,"BSUM":60,"operator_definition_conjunction":61,"AND":62,"conjunction_algorithms":63,"MIN":64,"PROD":65,"BDIF":66,"option_block":67,"OPTION":68,"END_OPTION":69,"linguistic_term":70,"TERM":71,"membership_function":72,"membership_function_group0":73,"singleton":74,"numeric_literal":75,"points":76,"points_repetition0":77,"point":78,"LPARA":79,"point_group0":80,"COMMA":81,"RPARA":82,"range":83,"RANGE":84,"RANGEDOT":85,"activation_method":86,"ACT":87,"activation_method_group0":88,"ACCU":89,"accumulation_method_group0":90,"rule":91,"RULE":92,"integer_literal":93,"IF":94,"condition":95,"THEN":96,"conclusion":97,"rule_option0":98,"x":99,"condition_repetition0":100,"condition_concat":101,"x_option0":102,"x_group0":103,"para_condition":104,"subcondition":105,"subcondition_equation":106,"IS":107,"subcondition_equation_option0":108,"conclusion_equation":109,"conclusion_repetition0":110,"conclusion_repetition1":111,"conclusion_concat":112,"weighting_factor":113,"WITH":114,"weighting_factor_group0":115,"constant":116,"boolean_literal":117,"real_literal":118,"signed_integer":119,"signed_integer_group0":120,"integer":121,"integer_type_name":122,"HASH":123,"integer_value":124,"BINARY_INTEGER":125,"OCTAL_INTEGER":126,"HEX_INTEGER":127,"DIGIT":128,"integer_repetition0":129,"real_type_name":130,"REAL_NUMBER":131,"real_literal_option0":132,"real_literal_option1":133,"exponent":134,"EXPONENT":135,"TRUE":136,"FALSE":137,"elementary_type_name":138,"numeric_type_name":139,"signed_integer_type_name":140,"unsigned_integer_type_name":141,"INT":142,"REAL":143,"VAR_INPUT":144,"input_declarations_option0":145,"input_declaration":146,"input_declarations_repetition0":147,"END_VAR":148,"name_list":149,"input_declaration_group0":150,"edge_declaration":151,"BOOL":152,"edge_declaration_group0":153,"name_list_repetition0":154,"name_list_concat":155,"simple_spec_init":156,"simple_spec_init_option0":157,"simple_spec_init_value":158,"VAR_OUTPUT":159,"output_declarations_option0":160,"var_init_decl":161,"output_declarations_repetition0":162,"input_output_declarations":163,"VAR_IN_OUT":164,"var_declaration":165,"input_output_declarations_repetition0":166,"VAR":167,"var_declarations_option0":168,"var_declarations_repetition0":169,"data_type_declarations":170,"NC":171,"NSUM":172,"NOT":173,"PLUS":174,"DASH":175,"integer_repetition0_option0":176,"LDASH":177,"input_declarations_option0_group0":178,"RETAIN":179,"NON_RETAIN":180,"R_EDGE":181,"F_EDGE":182,"output_declarations_option0_group0":183,"CONSTANT":184,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"FUNCTION_BLOCK",9:"ID",13:"END_FUNCTION_BLOCK",24:"FUZZIFY",26:"END_FUZZIFY",28:"DEFUZZIFY",33:"END_DEFUZZIFY",34:"METHOD",35:"COLON",37:"SEMICOLON",38:"CoG",39:"CoGS",40:"CoA",41:"LM",42:"RM",43:"DEFAULT",44:"ASSIGNMENT",47:"RULEBLOCK",52:"END_RULEBLOCK",56:"OR",58:"MAX",59:"ASUM",60:"BSUM",62:"AND",64:"MIN",65:"PROD",66:"BDIF",68:"OPTION",69:"END_OPTION",71:"TERM",79:"LPARA",81:"COMMA",82:"RPARA",84:"RANGE",85:"RANGEDOT",87:"ACT",89:"ACCU",92:"RULE",94:"IF",96:"THEN",107:"IS",114:"WITH",123:"HASH",125:"BINARY_INTEGER",126:"OCTAL_INTEGER",127:"HEX_INTEGER",128:"DIGIT",131:"REAL_NUMBER",135:"EXPONENT",136:"TRUE",137:"FALSE",141:"unsigned_integer_type_name",142:"INT",143:"REAL",144:"VAR_INPUT",148:"END_VAR",152:"BOOL",159:"VAR_OUTPUT",164:"VAR_IN_OUT",167:"VAR",170:"data_type_declarations",171:"NC",172:"NSUM",173:"NOT",174:"PLUS",175:"DASH",177:"LDASH",179:"RETAIN",180:"NON_RETAIN",181:"R_EDGE",182:"F_EDGE",184:"CONSTANT"},
productions_: [0,[3,3],[7,6],[14,1],[14,1],[17,1],[12,4],[23,4],[27,7],[31,4],[36,1],[36,1],[36,1],[36,1],[36,1],[32,4],[46,7],[48,3],[55,3],[57,1],[57,1],[57,1],[61,3],[63,1],[63,1],[63,1],[67,2],[70,5],[72,1],[74,1],[74,1],[76,1],[78,5],[83,7],[86,4],[50,4],[91,9],[95,2],[101,2],[101,2],[99,2],[104,3],[105,1],[105,1],[106,4],[97,2],[97,2],[109,3],[112,2],[112,2],[113,2],[116,1],[116,1],[75,1],[75,1],[119,2],[119,1],[93,3],[93,1],[124,1],[124,1],[124,1],[124,1],[121,2],[118,4],[118,2],[134,1],[117,1],[117,1],[138,1],[139,1],[139,1],[122,1],[122,1],[140,1],[130,1],[15,6],[146,3],[151,2],[149,2],[155,2],[156,2],[158,2],[16,6],[163,5],[165,3],[161,3],[18,6],[4,0],[4,2],[5,0],[5,2],[10,0],[10,2],[11,0],[11,2],[19,0],[19,2],[20,0],[20,2],[21,0],[21,2],[22,0],[22,2],[25,0],[25,2],[29,0],[29,1],[30,0],[30,2],[45,1],[45,1],[49,0],[49,1],[51,0],[51,2],[53,0],[53,1],[54,0],[54,1],[73,1],[73,1],[77,0],[77,2],[80,1],[80,1],[88,1],[88,1],[90,1],[90,1],[90,1],[98,0],[98,1],[100,0],[100,2],[102,0],[102,1],[103,1],[103,1],[108,0],[108,1],[110,0],[110,2],[111,0],[111,2],[115,1],[115,1],[120,1],[120,1],[176,0],[176,1],[129,0],[129,3],[132,0],[132,1],[133,0],[133,1],[178,1],[178,1],[145,0],[145,1],[147,0],[147,3],[150,1],[150,1],[153,1],[153,1],[154,0],[154,2],[157,0],[157,1],[183,1],[183,1],[160,0],[160,1],[162,0],[162,3],[166,0],[166,3],[168,0],[168,1],[169,0],[169,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new Library(_$[$0-2].first_line, _$[$0-2].first_column, {}, [].concat($$[$0-2]).concat($$[$0-1])).simplify() 
break;
case 2:
this.$ = new FunctionBlock(_$[$0-5].first_line, _$[$0-5].first_column, {name: $$[$0-4]}, [].concat($$[$0-3]).concat($$[$0-2]).concat($$[$0-1]));
break;
case 3: case 4: case 5: case 18: case 22: case 31: case 48: case 49: case 51: case 52: case 53: case 54: case 56: case 58: case 59: case 69: case 70: case 71: case 72: case 73: case 80: case 82:
this.$ = $$[$0];
break;
case 6:
this.$ = new FunctionBlockBody(_$[$0-3].first_line, _$[$0-3].first_column, {}, [].concat($$[$0-3]).concat($$[$0-2]).concat($$[$0-1]).concat($$[$0]));
break;
case 7:
this.$ = new FuzzifyBlock(_$[$0-2].first_line, _$[$0-2].first_column, {variable: $$[$0-2]}, [].concat($$[$0-1]));
break;
case 8:
this.$ = new DefuzzifyBlock(_$[$0-6].first_line, _$[$0-6].first_column, {variable: $$[$0-5]}, [].concat($$[$0-4]).concat($$[$0-3]).concat($$[$0-2]).concat($$[$0-1]));
break;
case 9:
this.$ = new DefuzzificationMethod(_$[$0-3].first_line, _$[$0-3].first_column, {method: $$[$0-1]}, []);
break;
case 10:
this.$ = DefuzzificationMethods.COG;
break;
case 11:
this.$ = DefuzzificationMethods.COGS;
break;
case 12:
this.$ = DefuzzificationMethods.COA;
break;
case 13:
this.$ = DefuzzificationMethods.LM;
break;
case 14:
this.$ = DefuzzificationMethods.RM;
break;
case 15:
this.$ = new DefaultValue(_$[$0-3].first_line, _$[$0-3].first_column, {value: $$[$0-1]}, []);
break;
case 16:
this.$ = new RuleBlock(_$[$0-6].first_line, _$[$0-6].first_column, {id: $$[$0-5]}, [].concat($$[$0-4]).concat($$[$0-3]).concat($$[$0-2]).concat($$[$0-1]));
break;
case 17:
this.$ = new OperatorDefinition(_$[$0-2].first_line, _$[$0-2].first_column, {orMethod: $$[$0-2], andMethod: $$[$0-1]}, []);
break;
case 19:
this.$ = OperatorAlgorithms.MAX;
break;
case 20:
this.$ = OperatorAlgorithms.ASUM;
break;
case 21:
this.$ = OperatorAlgorithms.BSUM;
break;
case 23:
this.$ = OperatorAlgorithms.MIN;
break;
case 24:
this.$ = OperatorAlgorithms.PROD;
break;
case 25:
this.$ = OperatorAlgorithms.BDIF;
break;
case 26:
this.$ = new OptionBlock(_$[$0-1].first_line, _$[$0-1].first_column, {}, []);
break;
case 27:
this.$ = new LinguisticTerm(_$[$0-4].first_line, _$[$0-4].first_column, {name: $$[$0-3]}, [].concat($$[$0-1]));
break;
case 28:
this.$ = new MembershipFunction(_$[$0].first_line, _$[$0].first_column, {}, [].concat($$[$0]));
break;
case 29: case 30:
this.$ = new Singleton(_$[$0].first_line, _$[$0].first_column, {value: $$[$0]});
break;
case 32:
this.$ = new Point(_$[$0-3].first_line, _$[$0-3].first_column, {x: $$[$0-3], y: $$[$0-1]});
break;
case 33:
this.$ = new Range(_$[$0-4].first_line, _$[$0-4].first_column, {start: $$[$0-4], end: $$[$0-2]});
break;
case 34:
this.$ = new ActivationMethod(_$[$0-3].first_line, _$[$0-3].first_column, {name: $$[$0-1]}, []);
break;
case 35:
this.$ = new AccumulationMethod(_$[$0].first_line, _$[$0].first_column, {name: $$[$0-1]}, []);
break;
case 36:
 this.$ = new Rule(_$[$0-8].first_line, _$[$0-8].first_column, {number: $$[$0-7]}, [].concat($$[$0-4]).concat($$[$0-2]).concat($$[$0-4]).concat($$[$0-1]))
break;
case 37:
this.$ = new Condition(_$[$0-1].first_line, _$[$0-1].first_column, {}, [].concat($$[$0-1]).concat($$[$0]));
break;
case 38:
this.$ =  new Conjunction(_$[$0-1].first_line, _$[$0-1].first_column, {}, [$$[$0]]);
break;
case 39:
this.$ = new Disjunction(_$[$0-1].first_line, _$[$0-1].first_column, {}, [$$[$0]]);
break;
case 40:
this.$ = new X(_$[$0-1].first_line, _$[$0-1].first_column, {negation: ($$[$0-1]===undefined)?false:true}, [].concat($$[$0]));
break;
case 41:
this.$ = $$[$0-1];
break;
case 42: case 43:
this.$ = new Subcondition(_$[$0].first_line, _$[$0].first_column, {}, [].concat($$[$0]));
break;
case 44:
this.$ = new Equation(_$[$0-3].first_line, _$[$0-3].first_column, {a: $$[$0-3], b: $$[$0], negatedB: ($$[$0-1]===undefined)?false:true});
break;
case 45: case 46:
this.$ = new Conclusion(_$[$0-1].first_line, _$[$0-1].first_column, {}, [].concat($$[$0-1]).concat($$[$0]));
break;
case 47:
this.$ = new Equation(_$[$0-2].first_line, _$[$0-2].first_column, {a: $$[$0-2], b: $$[$0], negatedB: false});
break;
case 50:
this.$ = new WeightingFactor(_$[$0-1].first_line, _$[$0-1].first_column, {factor: $$[$0]});;
break;
case 55:
this.$ = ($$[$0-1]==='-')? ($$[$0] * -1) : $$[$0];
break;
case 57:
this.$ = $$[$0-2];
break;
case 60: case 61:
this.$ = new Number(yytext.substr(2).replace('_', ''));
break;
case 62:
this.$ = new Number(yytext.substr(3).replace('_', ''));
break;
case 63:
this.$ = new Number(yytext.replace('_', ''));
break;
case 64: case 65:
 ($$[$0] === undefined)? $$[$0-1] : Math.pow($$[$0-1], $$[$0]) 
break;
case 66:
this.$ = new Number($$[$0].substr(1));
break;
case 67:
this.$ = true;
break;
case 68:
this.$ = false;
break;
case 74:
this.$ = IntegerType;
break;
case 75:
this.$ = RealType;
break;
case 76:
this.$ = new InputDeclarations(_$[$0-5].first_line, _$[$0-5].first_column, {retain: ($$[$0-4] === 'RETAIN')?true:false}, [].concat($$[$0-1]).concat($$[$0-3]));
break;
case 77:
this.$ = new InputDeclaration(_$[$0-2].first_line, _$[$0-2].first_column, {names: $$[$0-2]}, [].concat($$[$0]));
break;
case 78:
this.$ = new EdgeDeclaration(_$[$0-1].first_line, _$[$0-1].first_column, {risingEdge: ($$[$0] === 'R_EDGE')?true:false}, []);
break;
case 79:
this.$ = $$[$0].concat($$[$0-1]);
break;
case 81:
this.$ = new SimpleSpecInit(_$[$0-1].first_line, _$[$0-1].first_column, {type: $$[$0-1], constant: $$[$0]}, []);
break;
case 83:
this.$ = new OutputDeclarations(_$[$0-5].first_line, _$[$0-5].first_column, {retain: ($$[$0-4] === 'RETAIN')?true:false}, [].concat($$[$0-1]).concat($$[$0-3]));
break;
case 84:
this.$ = new InputOutputDeclarations(_$[$0-4].first_line, _$[$0-4].first_column, {}, [].concat($$[$0-2]).concat($$[$0-3]));
break;
case 85:
this.$ = new VarDeclaration(_$[$0-2].first_line, _$[$0-2].first_column, {names: $$[$0-2], type: $$[$0]}, []);
break;
case 86:
this.$ = new VarInitDecl(_$[$0-2].first_line, _$[$0-2].first_column, {names: $$[$0-2]}, [].concat($$[$0]));
break;
case 87:
this.$ = new VarDeclarations(_$[$0-5].first_line, _$[$0-5].first_column, {constant:(constant!==undefined)?true:false}, [].concat($$[$0-1]).concat($$[$0-3]));
break;
case 88: case 90: case 92: case 94: case 96: case 98: case 100: case 102: case 104: case 108: case 114: case 122: case 133: case 141: case 143: case 151: case 161: case 167: case 175: case 177: case 181:
this.$ = [];
break;
case 89: case 91: case 93: case 95: case 97: case 99: case 101: case 103: case 105: case 109: case 115: case 123: case 134: case 142: case 144: case 168:
$$[$0-1].push($$[$0]);
break;
case 152: case 162: case 176: case 178: case 182:
$$[$0-2].push($$[$0-1]);
break;
}
},
table: [o($V0,[2,88],{3:1,4:2}),{1:[3]},o($V1,[2,90],{5:3,170:[1,4]}),{6:[1,5],7:6,8:[1,7]},o($V0,[2,89]),{1:[2,1]},o($V1,[2,91]),{9:[1,8]},o($V2,[2,92],{10:9}),o($V3,[2,94],{11:10,14:11,15:12,16:13,144:[1,14],159:[1,15]}),o($V4,[2,96],{12:16,17:17,19:18,18:19,167:[1,20]}),o($V2,[2,93]),o($V2,[2,3]),o($V2,[2,4]),{9:[2,159],145:21,178:22,179:[1,23],180:[1,24]},{9:[2,173],160:25,179:[1,27],180:[1,28],183:26},{13:[1,29]},o($V3,[2,95]),o($V5,[2,98],{20:30,23:31,24:[1,32]}),o($V3,[2,5]),{9:[2,179],168:33,184:[1,34]},{9:$V6,146:35,149:36},{9:[2,160]},{9:[2,157]},{9:[2,158]},{9:$V6,149:39,161:38},{9:[2,174]},{9:[2,171]},{9:[2,172]},o($V1,[2,2]),o($V7,[2,100],{21:40,27:41,28:[1,42]}),o($V4,[2,97]),{9:[1,43]},{9:$V6,149:39,161:44},{9:[2,180]},{37:[1,45]},{35:[1,46]},o($V8,[2,167],{154:47}),{37:[1,48]},{35:[1,49]},o($V9,[2,102],{22:50,46:51,47:[1,52]}),o($V5,[2,99]),{9:[1,53]},o($Va,[2,104],{25:54}),{37:[1,55]},o($Vb,[2,161],{147:56}),{122:63,130:64,138:61,139:62,140:65,141:$Vc,142:$Vd,143:$Ve,150:57,151:58,152:[1,60],156:59},{35:[2,79],81:[1,70],155:69},o($Vb,[2,175],{162:71}),{122:63,130:64,138:61,139:62,140:65,141:$Vc,142:$Vd,143:$Ve,156:72},{13:[2,6],67:73,68:[1,74]},o($V7,[2,101]),{9:[1,75]},o($Vf,[2,106],{29:76,83:77,84:[1,78]}),{26:[1,79],70:80,71:$Vg},o($Vb,[2,181],{169:82}),{9:$V6,146:84,148:[1,83],149:36},{37:[2,77]},{37:[2,163]},{37:[2,164]},{153:85,181:[1,86],182:[1,87]},{37:[2,169],44:[1,90],157:88,158:89},o($Vh,[2,69]),o($Vh,[2,70]),o($Vh,[2,71]),o($Vi,[2,72]),o($Vi,[2,73]),o($Vi,[2,75]),o($Vi,[2,74]),o($V8,[2,168]),{9:[1,91]},{9:$V6,148:[1,92],149:39,161:93},{37:[2,86]},o($V9,[2,103]),{69:[1,94]},o($Vj,[2,116],{48:95,53:96,55:97,56:[1,98]}),o($Vf,[2,108],{30:99}),o($Vf,[2,107]),{79:[1,100]},o($V4,[2,7]),o($Va,[2,105]),{9:[1,101]},{9:$V6,148:[1,102],149:39,161:103},o($V2,[2,76]),{37:[1,104]},{37:[2,78]},{37:[2,165]},{37:[2,166]},{37:[2,81]},{37:[2,170]},{75:106,93:108,116:105,117:107,118:109,119:116,120:120,121:121,122:112,124:113,125:$Vk,126:$Vl,127:$Vm,128:$Vn,130:114,131:$Vo,136:[1,110],137:[1,111],140:65,141:$Vc,142:$Vd,143:$Ve,174:$Vp,175:$Vq},o($V8,[2,80]),o($V2,[2,83]),{37:[1,125]},o($V9,[2,26]),{49:126,86:127,87:[1,128],89:[2,112]},{37:[2,118],54:129,61:130,62:[1,131]},o($Vj,[2,117]),{35:[1,132]},{31:133,34:[1,135],70:134,71:$Vg},{75:136,93:108,118:109,119:116,120:120,121:121,122:112,124:113,125:$Vk,126:$Vl,127:$Vm,128:$Vn,130:114,131:$Vo,140:65,141:$Vc,142:$Vd,143:$Ve,174:$Vp,175:$Vq},{44:[1,137]},o($V3,[2,87]),{37:[1,138]},o($Vb,[2,162]),{37:[2,82]},{37:[2,51]},{37:[2,52]},o($Vr,[2,53]),o($Vr,[2,54]),{37:[2,67]},{37:[2,68]},{123:[1,139]},o($Vs,[2,58]),{123:[1,140]},o($Vr,[2,155],{133:141,134:142,135:$Vt}),o($Vs,[2,59]),o($Vs,[2,60]),o($Vs,[2,61]),o($Vs,[2,62]),{121:144,128:$Vn},o($Vs,[2,56]),{128:[2,147]},{128:[2,148]},o($Vu,[2,151],{129:145}),o($Vb,[2,176]),{50:146,89:[1,147]},{89:[2,113]},{35:[1,148]},{37:[1,149]},{37:[2,119]},{35:[1,150]},{57:151,58:[1,152],59:[1,153],60:[1,154]},{32:155,43:[1,156]},o($Vf,[2,109]),{35:[1,157]},{85:[1,158]},o($Vv,[2,122],{140:65,93:108,118:109,122:112,124:113,130:114,119:116,120:120,121:121,72:159,73:160,74:161,76:162,75:163,77:165,9:[1,164],125:$Vk,126:$Vl,127:$Vm,128:$Vn,131:$Vo,141:$Vc,142:$Vd,143:$Ve,174:$Vp,175:$Vq}),o($Vb,[2,182]),{119:116,120:120,121:121,124:166,125:$Vk,126:$Vl,127:$Vm,128:$Vn,174:$Vp,175:$Vq},{131:[1,167]},o($Vr,[2,65]),o($Vr,[2,156]),o($Vr,[2,66]),o($Vs,[2,55]),o($Vs,[2,63],{176:168,128:[2,149],177:[1,169]}),o($Vw,[2,114],{51:170}),{35:[1,171]},{64:[1,174],65:[1,173],88:172},o([87,89],[2,17]),{63:175,64:[1,176],65:[1,177],66:[1,178]},o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,21]),{33:[1,179]},{44:[1,180]},{36:181,38:[1,182],39:[1,183],40:[1,184],41:[1,185],42:[1,186]},{75:187,93:108,118:109,119:116,120:120,121:121,122:112,124:113,125:$Vk,126:$Vl,127:$Vm,128:$Vn,130:114,131:$Vo,140:65,141:$Vc,142:$Vd,143:$Ve,174:$Vp,175:$Vq},{37:[1,188]},{37:[2,28]},{37:[2,120]},{37:[2,121]},{37:[2,29]},{37:[2,30]},{37:[2,31],78:189,79:[1,190]},o($Vs,[2,57]),o($Vr,[2,153],{132:191,134:192,135:$Vt}),{128:[1,193]},{128:[2,150]},{52:[1,194],91:195,92:[1,196]},{58:[1,198],60:[1,199],90:197,172:[1,200]},{37:[1,201]},{37:[2,126]},{37:[2,127]},{37:[2,22]},{37:[2,23]},{37:[2,24]},{37:[2,25]},o($V5,[2,8]),{45:202,75:203,93:108,118:109,119:116,120:120,121:121,122:112,124:113,125:$Vk,126:$Vl,127:$Vm,128:$Vn,130:114,131:$Vo,140:65,141:$Vc,142:$Vd,143:$Ve,171:[1,204],174:$Vp,175:$Vq},{37:[1,205]},{37:[2,10]},{37:[2,11]},{37:[2,12]},{37:[2,13]},{37:[2,14]},{82:[1,206]},o([26,34,71],[2,27]),o($Vv,[2,123]),{9:[1,209],75:208,80:207,93:108,118:109,119:116,120:120,121:121,122:112,124:113,125:$Vk,126:$Vl,127:$Vm,128:$Vn,130:114,131:$Vo,140:65,141:$Vc,142:$Vd,143:$Ve,174:$Vp,175:$Vq},o($Vr,[2,64]),o($Vr,[2,154]),o($Vu,[2,152]),o($V7,[2,16]),o($Vw,[2,115]),{93:210,119:116,120:120,121:121,122:112,124:113,125:$Vk,126:$Vl,127:$Vm,128:$Vn,140:65,141:$Vc,142:$Vd,174:$Vp,175:$Vq},{37:[1,211]},{37:[2,128]},{37:[2,129]},{37:[2,130]},{89:[2,34]},{37:[1,212]},{37:[2,110]},{37:[2,111]},{43:[2,9]},{37:[1,213]},{81:[1,214]},{81:[2,124]},{81:[2,125]},{35:[1,215]},o($Vw,[2,35]),{33:[2,15]},o($Vf,[2,33]),{75:216,93:108,118:109,119:116,120:120,121:121,122:112,124:113,125:$Vk,126:$Vl,127:$Vm,128:$Vn,130:114,131:$Vo,140:65,141:$Vc,142:$Vd,143:$Ve,174:$Vp,175:$Vq},{94:[1,217]},{82:[1,218]},o($Vx,$Vy,{95:219,99:220,102:221,173:$Vz}),o($Vv,[2,32]),{96:[1,223]},o($VA,[2,133],{100:224}),{9:[1,229],79:[1,230],103:225,104:227,105:226,106:228},o($Vx,[2,136]),{9:[1,233],97:231,109:232},o([82,96],[2,37],{101:234,56:[1,236],62:[1,235]}),o($VA,[2,40]),o($VA,[2,137]),o($VA,[2,138]),o($VA,[2,42]),o($VA,[2,43],{107:[1,237]}),o($Vx,$Vy,{99:220,102:221,95:238,173:$Vz}),{37:[2,131],98:239,113:240,114:[1,241]},o($VB,[2,141],{110:242}),o($VB,[2,143],{111:243,107:$VC}),o($VA,[2,134]),o($Vx,$Vy,{102:221,99:245,173:$Vz}),o($Vx,$Vy,{102:221,99:246,173:$Vz}),{9:[2,139],108:247,173:[1,248]},{82:[1,249]},{37:[1,250]},{37:[2,132]},{9:[1,252],75:253,93:108,115:251,118:109,119:116,120:120,121:121,122:112,124:113,125:$Vk,126:$Vl,127:$Vm,128:$Vn,130:114,131:$Vo,140:65,141:$Vc,142:$Vd,143:$Ve,174:$Vp,175:$Vq},o($VD,[2,45],{112:254,81:$VE}),o($VD,[2,46],{112:256,81:$VE}),{9:[1,257]},o($VA,[2,38]),o($VA,[2,39]),{9:[1,258]},{9:[2,140]},o($VA,[2,41]),o($Vw,[2,36]),{37:[2,50]},{37:[2,145]},{37:[2,146]},o($VB,[2,142]),{9:[1,260],109:259},o($VB,[2,144]),o($VB,[2,47]),o($VA,[2,44]),o($VB,[2,48]),o($VB,[2,49],{107:$VC})],
defaultActions: {5:[2,1],22:[2,160],23:[2,157],24:[2,158],26:[2,174],27:[2,171],28:[2,172],34:[2,180],57:[2,77],58:[2,163],59:[2,164],72:[2,86],85:[2,78],86:[2,165],87:[2,166],88:[2,81],89:[2,170],105:[2,82],106:[2,51],107:[2,52],110:[2,67],111:[2,68],122:[2,147],123:[2,148],127:[2,113],130:[2,119],160:[2,28],161:[2,120],162:[2,121],163:[2,29],164:[2,30],169:[2,150],173:[2,126],174:[2,127],175:[2,22],176:[2,23],177:[2,24],178:[2,25],182:[2,10],183:[2,11],184:[2,12],185:[2,13],186:[2,14],198:[2,128],199:[2,129],200:[2,130],201:[2,34],203:[2,110],204:[2,111],205:[2,9],208:[2,124],209:[2,125],212:[2,15],240:[2,132],248:[2,140],251:[2,50],252:[2,145],253:[2,146]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


var ast = require('./fcl_ast').AST();

Library                     = ast.Library
InputDeclarations           = ast.InputDeclarations
InputDeclaration            = ast.InputDeclaration
OutputDeclarations          = ast.OutputDeclarations
VarDeclarations             = ast.VarDeclarations
InputOutputDeclarations     = ast.InputOutputDeclarations
SimpleSpecInit              = ast.SimpleSpecInit
FunctionBlock               = ast.FunctionBlock
FunctionBlockBody           = ast.FunctionBlockBody
FuzzifyBlock                = ast.FuzzifyBlock
DefuzzifyBlock              = ast.DefuzzifyBlock
RuleBlock                   = ast.RuleBlock
OptionBlock                 = ast.OptionBlock
LinguisticTerm              = ast.LinguisticTerm
MembershipFunction          = ast.MembershipFunction
Singleton                   = ast.Singleton
Point                       = ast.Point
Rule                        = ast.Rule
Range                       = ast.Range
WeightingFactor             = ast.WeightingFactor
OperatorDefinition          = ast.OperatorDefinition
ActivationMethod            = ast.ActivationMethod
AccumulationMethod          = ast.AccumulationMethod
DefuzzificationMethod       = ast.DefuzzificationMethod
DefaultValue                = ast.DefaultValue
Condition                   = ast.Condition
Conjunction                 = ast.Conjunction
Disjunction                 = ast.Disjunction
Conclusion                  = ast.Conclusion
X                           = ast.X
Subcondition                = ast.Subcondition
Equation                    = ast.Equation
EdgeDeclaration             = ast.EdgeDeclaration
WeightingFactor             = ast.WeightingFactor
SimpleSpecInit              = ast.SimpleSpecInit
VarDeclaration              = ast.VarDeclaration
VarInitDecl                 = ast.VarInitDecl
RealType                    = ast.DataTypes.REAL
IntegerType                 = ast.DataTypes.INTEGER
OperatorAlgorithms          = ast.OperatorAlgorithms
DefuzzificationMethods      = ast.DefuzzificationMethods


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:return 89
break;
case 2:return 87
break;
case 3:return 62
break;
case 4:return 59
break;
case 5:return 66
break;
case 6:return 60
break;
case 7:return 152
break;
case 8:return 40
break;
case 9:return 38
break;
case 10:return 39
break;
case 11:return 184
break;
case 12:return 43
break;
case 13:return 28
break;
case 14:return 33
break;
case 15:return 13
break;
case 16:return 26
break;
case 17:return 'END_OPTIONS'
break;
case 18:return 52
break;
case 19:return 148
break;
case 20:return 'END_TYPE'
break;
case 21:return 8
break;
case 22:return 24
break;
case 23:return 94
break;
case 24:return 142
break;
case 25:return 107
break;
case 26:return 41
break;
case 27:return 34
break;
case 28:return 58
break;
case 29:return 64
break;
case 30:return 171
break;
case 31:return 173
break;
case 32:return 180
break;
case 33:return 172
break;
case 34:return 'OPTIONS'
break;
case 35:return 56
break;
case 36:return 65
break;
case 37:return 84
break;
case 38:return 143
break;
case 39:return 179
break;
case 40:return 42
break;
case 41:return 47
break;
case 42:return 92
break;
case 43:return 71
break;
case 44:return 96
break;
case 45:return 159
break;
case 46:return 144
break;
case 47:return 164
break;
case 48:return 167
break;
case 49:return 114
break;
case 50:return 137
break;
case 51:return 136
break;
case 52:return 135
break;
case 53:return 9
break;
case 54:return 125
break;
case 55:return 126
break;
case 56:return 127
break;
case 57:return 131
break;
case 58:return 128
break;
case 59:return 123
break;
case 60:return 174
break;
case 61:return 175
break;
case 62:return 177
break;
case 63:return 82
break;
case 64:return 79
break;
case 65:return 37
break;
case 66:return 81
break;
case 67:return 44
break;
case 68:return 35
break;
case 69:return 'DOT'
break;
case 70:return 85
break;
case 71:return 6
break;
case 72:return 'INVALID'
break;
case 73:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:ACCU)/i,/^(?:ACT)/i,/^(?:AND)/i,/^(?:ASUM)/i,/^(?:BDIF)/i,/^(?:BSUM)/i,/^(?:BOOL)/i,/^(?:CoA)/i,/^(?:CoG)/i,/^(?:CoGS)/i,/^(?:CONSTANT)/i,/^(?:DEFAULT)/i,/^(?:DEFUZZIFY)/i,/^(?:END_DEFUZZIFY)/i,/^(?:END_FUNCTION_BLOCK)/i,/^(?:END_FUZZIFY)/i,/^(?:END_OPTIONS)/i,/^(?:END_RULEBLOCK)/i,/^(?:END_VAR)/i,/^(?:END_TYPE)/i,/^(?:FUNCTION_BLOCK)/i,/^(?:FUZZIFY)/i,/^(?:IF)/i,/^(?:INT)/i,/^(?:IS)/i,/^(?:LM)/i,/^(?:METHOD)/i,/^(?:MAX)/i,/^(?:MIN)/i,/^(?:NC)/i,/^(?:NOT)/i,/^(?:NON_RETAIN)/i,/^(?:NSUM)/i,/^(?:OPTIONS)/i,/^(?:OR)/i,/^(?:PROD)/i,/^(?:RANGE)/i,/^(?:REAL)/i,/^(?:RETAIN)/i,/^(?:RM)/i,/^(?:RULEBLOCK)/i,/^(?:RULE)/i,/^(?:TERM)/i,/^(?:THEN)/i,/^(?:VAR_OUTPUT)/i,/^(?:VAR_INPUT)/i,/^(?:VAR_IN_OUT)/i,/^(?:VAR)/i,/^(?:WITH)/i,/^(?:FALSE)/i,/^(?:TRUE)/i,/^(?:(E(\+|-)?[0-9](_?[0-9])*))/i,/^(?:(([a-zA-Z]|(_([a-zA-Z]|[0-9])))((_)?([a-zA-Z]|[0-9]))*))/i,/^(?:(2#\s*[0-1]\s*(_?[0-1])*))/i,/^(?:(8#\s*[0-7]\s*(_?[0-7])*))/i,/^(?:(16#\s*[0-9A-F]\s*(_?[0-9A-F])*))/i,/^(?:((\+|-)?[0-9](_?[0-9])*\.[0-9](_?[0-9])*))/i,/^(?:([0-9]))/i,/^(?:#)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:_)/i,/^(?:\))/i,/^(?:\()/i,/^(?:;)/i,/^(?:,)/i,/^(?::=)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\.\.)/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}