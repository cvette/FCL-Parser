/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var fcl = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"library":3,"library_repetition0":4,"library_repetition1":5,"EOF":6,"function_block_declaration":7,"FUNCTION_BLOCK":8,"ID":9,"function_block_declaration_repetition0":10,"function_block_declaration_repetition1":11,"function_block_body":12,"END_FUNCTION_BLOCK":13,"fb_io_var_declarations":14,"input_declarations":15,"output_declarations":16,"other_var_declarations":17,"var_declarations":18,"function_block_body_repetition0":19,"function_block_body_repetition1":20,"function_block_body_repetition2":21,"function_block_body_repetition3":22,"fuzzify_block":23,"FUZZIFY":24,"fuzzify_block_repetition0":25,"END_FUZZIFY":26,"defuzzify_block":27,"DEFUZZIFY":28,"defuzzify_block_option0":29,"defuzzify_block_repetition0":30,"defuzzification_method":31,"default_value":32,"END_DEFUZZIFY":33,"METHOD":34,"COLON":35,"defuzzification_method_group0":36,"SEMICOLON":37,"defuzzifcation_method_option":38,"DEFAULT":39,"ASSIGNMENT":40,"default_value_group0":41,"rule_block":42,"RULEBLOCK":43,"operator_definition":44,"rule_block_option0":45,"accumulation_method":46,"rule_block_repetition0":47,"END_RULEBLOCK":48,"option_block":49,"OPTION":50,"END_OPTION":51,"linguistic_term":52,"TERM":53,"membership_function":54,"membership_function_group0":55,"singleton":56,"numeric_literal":57,"points":58,"points_repetition0":59,"point":60,"LPARA":61,"point_group0":62,"COMMA":63,"RPARA":64,"defuzzification_method_option":65,"CoG":66,"CoGS":67,"CoA":68,"LM":69,"RM":70,"range":71,"RANGE":72,"RANGEDOT":73,"operator_definition_option0":74,"operator_definition_option1":75,"activation_method":76,"ACT":77,"activation_method_group0":78,"ACCU":79,"accumulation_method_group0":80,"rule":81,"RULE":82,"integer_literal":83,"IF":84,"condition":85,"THEN":86,"conclusion":87,"rule_option0":88,"x":89,"condition_repetition0":90,"condition_concat":91,"AND":92,"OR":93,"x_option0":94,"x_group0":95,"subcondition":96,"IS":97,"subcondition_option0":98,"conclusion_repetition0":99,"weighting_factor":100,"weighting_factor_group0":101,"constant":102,"character_string":103,"time_literal":104,"bit_string_literal":105,"boolean_literal":106,"real_literal":107,"signed_integer":108,"signed_integer_group0":109,"integer":110,"integer_type_name":111,"HASH":112,"integer_value":113,"BINARY_INTEGER":114,"OCTAL_INTEGER":115,"HEX_INTEGER":116,"DIGIT":117,"integer_repetition0":118,"real_type_name":119,"REAL_NUMBER":120,"real_literal_option0":121,"real_literal_option1":122,"exponent":123,"E":124,"exponent_option0":125,"bit_string_type_name":126,"bit_string_value":127,"BYTE":128,"WORD":129,"DWORD":130,"LWORD":131,"TRUE":132,"FALSE":133,"SINGLE_BYTE_STRING":134,"DOUBLE_BYTE_STRING":135,"duration":136,"time_of_day":137,"date":138,"date_and_time":139,"DURATION_PREFIX":140,"interval":141,"days":142,"hours":143,"minutes":144,"seconds":145,"milliseconds":146,"interval_prefix":147,"fixed_point":148,"interval_prefix_group0":149,"interval_prefix_group1":150,"D":151,"days_option0":152,"H":153,"hours_option0":154,"M":155,"minutes_option0":156,"S":157,"seconds_option0":158,"fixed_point_option0":159,"time_of_day_group0":160,"daytime":161,"date_group0":162,"date_literal":163,"DASH":164,"date_and_time_group0":165,"elementary_type_name":166,"numeric_type_name":167,"date_type_name":168,"bit_identifier":169,"elementary_type_name_group0":170,"elementary_type_name_option0":171,"elementary_type_name_option1":172,"TIME":173,"signed_integer_type_name":174,"unsigned_integer_type_name":175,"SINT":176,"INT":177,"DINT":178,"LINT":179,"USINT":180,"UINT":181,"UDINT":182,"ULINT":183,"REAL":184,"LREAL":185,"DATE":186,"TIME_OF_DAY":187,"TOD":188,"DATE_AND_TIME":189,"DT":190,"BOOL":191,"generic_type_name":192,"ANY_DERIVED":193,"ANY_ELEMENTARY":194,"ANY_MAGNITUDE":195,"ANY_NUM":196,"ANY_REAL":197,"ANY_INT":198,"ANY_BIT":199,"ANY_STRING":200,"ANY_DATE":201,"ANY":202,"data_type_declaration":203,"TYPE":204,"type_declaration":205,"data_type_declaration_repetition0":206,"END_TYPE":207,"type_declaration_group0":208,"spec_init":209,"spec_init_option0":210,"subrange_specification":211,"spec_init_option1":212,"enumerated_specification":213,"spec_init_option2":214,"array_specification":215,"spec_init_option3":216,"spec_init_option4":217,"subrange":218,"enumerated_value":219,"enumerated_specification_repetition0":220,"ARRAY":221,"LBRACKET":222,"array_specification_repetition0":223,"RBRACKET":224,"OF":225,"array_specification_group0":226,"array_initialization":227,"array_initial_elements":228,"array_initialization_repetition0":229,"array_initial_element":230,"array_initial_elements_option0":231,"structure_initialization":232,"structure_declaration":233,"STRUCT":234,"structure_element_declaration":235,"structure_declaration_repetition0":236,"END_STRUCT":237,"structure_element_initialization":238,"structure_initialization_repetition0":239,"structure_element_initialization_group0":240,"variable":241,"direct_variable":242,"symbolic_variable":243,"multi_element_variable":244,"DIRECT_VAR_PREFIX":245,"direct_variable_repetition0":246,"array_variable":247,"structured_variable":248,"expression":249,"array_variable_repetition0":250,"DOT":251,"VAR_INPUT":252,"input_declarations_option0":253,"input_declaration":254,"input_declarations_repetition0":255,"END_VAR":256,"name_list":257,"input_declaration_group0":258,"edge_declaration":259,"edge_declaration_group0":260,"var_init_decl":261,"var_init_decl_group0":262,"fb_name_decl":263,"function_block_type_name":264,"fb_name_decl_option0":265,"name_list_repetition0":266,"output_declaration":267,"VAR_OUTPUT":268,"output_declarations_option0":269,"output_declarations_repetition0":270,"input_output_declarations":271,"VAR_IN_OUT":272,"var_declaration":273,"input_output_declarations_repetition0":274,"var_decl":275,"var_decl_group0":276,"single_byte_string_spec":277,"STRING":278,"single_byte_string_spec_option0":279,"single_byte_string_spec_option1":280,"double_byte_string_spec":281,"WSTRING":282,"double_byte_string_spec_option0":283,"double_byte_string_spec_option1":284,"VAR":285,"var_declarations_option0":286,"var_declarations_repetition0":287,"NC":288,"operator_definition_option0_group0":289,"MAX":290,"ASUM":291,"BSUM":292,"operator_definition_option1_group0":293,"MIN":294,"PROD":295,"BDIF":296,"NSUM":297,"WITH":298,"NOT":299,"conclusion_repetition0_option0":300,"PLUS":301,"integer_repetition0_option0":302,"LDASH":303,"exponent_option0_group0":304,"MS":305,"spec_init_option4_group0":306,"input_declarations_option0_group0":307,"RETAIN":308,"NON_RETAIN":309,"R_EDGE":310,"F_EDGE":311,"output_declarations_option0_group0":312,"single_byte_character_string":313,"double_byte_character_string":314,"CONSTANT":315,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"FUNCTION_BLOCK",9:"ID",13:"END_FUNCTION_BLOCK",24:"FUZZIFY",26:"END_FUZZIFY",28:"DEFUZZIFY",33:"END_DEFUZZIFY",34:"METHOD",35:"COLON",37:"SEMICOLON",38:"defuzzifcation_method_option",39:"DEFAULT",40:"ASSIGNMENT",43:"RULEBLOCK",48:"END_RULEBLOCK",50:"OPTION",51:"END_OPTION",53:"TERM",61:"LPARA",63:"COMMA",64:"RPARA",66:"CoG",67:"CoGS",68:"CoA",69:"LM",70:"RM",72:"RANGE",73:"RANGEDOT",77:"ACT",79:"ACCU",82:"RULE",84:"IF",86:"THEN",92:"AND",93:"OR",97:"IS",112:"HASH",114:"BINARY_INTEGER",115:"OCTAL_INTEGER",116:"HEX_INTEGER",117:"DIGIT",120:"REAL_NUMBER",124:"E",128:"BYTE",129:"WORD",130:"DWORD",131:"LWORD",132:"TRUE",133:"FALSE",134:"SINGLE_BYTE_STRING",135:"DOUBLE_BYTE_STRING",140:"DURATION_PREFIX",146:"milliseconds",151:"D",153:"H",155:"M",157:"S",164:"DASH",173:"TIME",176:"SINT",177:"INT",178:"DINT",179:"LINT",180:"USINT",181:"UINT",182:"UDINT",183:"ULINT",184:"REAL",185:"LREAL",186:"DATE",187:"TIME_OF_DAY",188:"TOD",189:"DATE_AND_TIME",190:"DT",191:"BOOL",193:"ANY_DERIVED",194:"ANY_ELEMENTARY",195:"ANY_MAGNITUDE",196:"ANY_NUM",197:"ANY_REAL",198:"ANY_INT",199:"ANY_BIT",200:"ANY_STRING",201:"ANY_DATE",202:"ANY",204:"TYPE",207:"END_TYPE",221:"ARRAY",222:"LBRACKET",224:"RBRACKET",225:"OF",234:"STRUCT",237:"END_STRUCT",245:"DIRECT_VAR_PREFIX",249:"expression",251:"DOT",252:"VAR_INPUT",256:"END_VAR",264:"function_block_type_name",268:"VAR_OUTPUT",272:"VAR_IN_OUT",273:"var_declaration",278:"STRING",282:"WSTRING",285:"VAR",288:"NC",290:"MAX",291:"ASUM",292:"BSUM",294:"MIN",295:"PROD",296:"BDIF",297:"NSUM",298:"WITH",299:"NOT",301:"PLUS",303:"LDASH",305:"MS",308:"RETAIN",309:"NON_RETAIN",310:"R_EDGE",311:"F_EDGE",313:"single_byte_character_string",314:"double_byte_character_string",315:"CONSTANT"},
productions_: [0,[3,3],[7,6],[14,1],[14,1],[17,1],[12,4],[23,4],[27,7],[31,4],[31,4],[32,4],[42,7],[49,2],[52,5],[54,1],[56,1],[56,1],[58,1],[60,5],[65,1],[65,1],[65,1],[65,1],[65,1],[71,7],[44,3],[76,4],[46,4],[81,9],[85,2],[91,2],[91,2],[89,2],[96,4],[96,1],[87,4],[100,1],[102,1],[102,1],[102,1],[102,1],[102,1],[57,1],[57,1],[108,2],[108,1],[83,3],[83,1],[113,1],[113,1],[113,1],[113,1],[110,2],[107,4],[107,2],[123,3],[105,3],[127,1],[127,1],[127,1],[127,1],[126,1],[126,1],[126,1],[126,1],[106,1],[106,1],[103,1],[103,1],[104,1],[104,1],[104,1],[104,1],[136,2],[141,1],[141,1],[141,1],[141,1],[141,1],[147,2],[147,2],[142,3],[143,3],[144,3],[145,3],[148,2],[137,3],[161,5],[138,3],[163,5],[139,5],[166,1],[166,1],[166,1],[166,3],[166,1],[167,1],[167,1],[111,1],[111,1],[174,1],[174,1],[174,1],[174,1],[175,1],[175,1],[175,1],[175,1],[119,1],[119,1],[168,1],[168,1],[168,1],[168,1],[168,1],[169,1],[169,1],[169,1],[169,1],[169,1],[192,1],[192,1],[192,1],[192,1],[192,1],[192,1],[192,1],[192,1],[192,1],[192,1],[203,5],[205,3],[209,2],[209,2],[209,2],[209,2],[209,2],[211,4],[218,3],[213,4],[219,3],[219,1],[215,7],[227,4],[228,1],[228,4],[230,1],[230,1],[230,1],[230,1],[233,5],[235,3],[232,4],[238,3],[241,1],[241,1],[243,1],[243,1],[242,3],[244,1],[244,1],[247,5],[248,3],[15,6],[254,3],[259,2],[261,1],[263,2],[257,2],[267,3],[16,6],[271,5],[275,3],[277,3],[281,3],[18,6],[4,0],[4,2],[5,0],[5,2],[10,0],[10,2],[11,0],[11,2],[19,0],[19,2],[20,0],[20,2],[21,0],[21,2],[22,0],[22,2],[25,0],[25,2],[29,0],[29,1],[30,0],[30,2],[36,1],[36,1],[36,1],[36,1],[36,1],[41,1],[41,1],[45,0],[45,1],[47,0],[47,2],[55,1],[55,1],[59,0],[59,2],[62,1],[62,1],[289,1],[289,1],[289,1],[74,0],[74,3],[293,1],[293,1],[293,1],[75,0],[75,3],[78,1],[78,1],[80,1],[80,1],[80,1],[88,0],[88,2],[90,0],[90,2],[94,0],[94,1],[95,1],[95,3],[98,0],[98,1],[300,0],[300,2],[99,0],[99,4],[101,1],[101,1],[109,1],[109,1],[302,0],[302,1],[118,0],[118,3],[121,0],[121,1],[122,0],[122,1],[304,1],[304,1],[125,0],[125,1],[149,1],[149,1],[149,1],[149,1],[149,1],[150,1],[150,1],[150,1],[150,1],[152,0],[152,1],[154,0],[154,1],[156,0],[156,1],[158,0],[158,1],[159,0],[159,2],[160,1],[160,1],[162,1],[162,1],[165,1],[165,1],[170,1],[170,1],[171,0],[171,3],[172,0],[172,2],[206,0],[206,3],[208,1],[208,1],[210,0],[210,2],[212,0],[212,2],[214,0],[214,2],[216,0],[216,2],[306,1],[306,1],[306,1],[306,1],[217,0],[217,2],[220,0],[220,3],[223,0],[223,3],[226,1],[226,1],[229,0],[229,3],[231,0],[231,1],[236,0],[236,3],[239,0],[239,3],[240,1],[240,1],[240,1],[240,1],[246,0],[246,3],[250,0],[250,3],[307,1],[307,1],[253,0],[253,1],[255,0],[255,3],[258,1],[258,1],[260,1],[260,1],[262,1],[262,1],[265,0],[265,2],[266,0],[266,3],[312,1],[312,1],[269,0],[269,1],[270,0],[270,3],[274,0],[274,3],[276,1],[276,1],[276,1],[276,1],[276,1],[276,1],[279,0],[279,3],[280,0],[280,2],[283,0],[283,3],[284,0],[284,2],[286,0],[286,1],[287,0],[287,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return new Library(_$[$0-2].first_line, _$[$0-2].first_column, {}, [$$[$0-2], $$[$0-1]]) 
break;
case 2:this.$ = new FunctionBlock(_$[$0-5].first_line, _$[$0-5].first_column, {name: $$[$0-4]}, [$$[$0-3], $$[$0-2], $$[$0-1]]);
break;
case 3:this.$ = $$[$0];
break;
case 4:this.$ = $$[$0];
break;
case 5:this.$ = $$[$0];
break;
case 6:this.$ = new FunctionBlockBody(_$[$0-3].first_line, _$[$0-3].first_column, {}, [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]]);
break;
case 7:this.$ = new FuzzifyBlock(_$[$0-2].first_line, _$[$0-2].first_column, {variable: $$[$0-2]}, [$$[$0-1]]);
break;
case 8:this.$ = new DefuzzifyBlock(_$[$0-6].first_line, _$[$0-6].first_column, {variable: $$[$0-5]}, [$$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1]]);
break;
case 9:this.$ = new DefuzzificationMethod(_$[$0-3].first_line, _$[$0-3].first_column, {name: $$[$0-1]}, []);
break;
case 10:this.$ = new DefuzzificationMethod(_$[$0-3].first_line, _$[$0-3].first_column, {}, [$$[$0-1]]);
break;
case 11:this.$ = new DefaultValue(_$[$0-3].first_line, _$[$0-3].first_column, {value: $$[$0-1]}, []);
break;
case 12:this.$ = new RuleBlock(_$[$0-6].first_line, _$[$0-6].first_column, {id: $$[$0-5]}, [$$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1]]);
break;
case 13:this.$ = new OptionBlock(this._$$[$0-1].first_line, this._$$[$0-1].first_column, {}, []);
break;
case 14:this.$ = new LinguisticTerm(_$[$0-4].first_line, _$[$0-4].first_column, {name: $$[$0-3]}, [$$[$0-1]]);
break;
case 15:this.$ = new MembershipFunction(_$[$0].first_line, _$[$0].first_column, {}, [$$[$0]]);
break;
case 16:this.$ = $$[$0];
break;
case 17:this.$ = $$[$0];
break;
case 18:this.$ = $$[$0];
break;
case 19:this.$ = new Point(_$[$0-3].first_line, _$[$0-3].first_column, {}, []);
break;
case 20:this.$ = yytext;
break;
case 21:this.$ = yytext;
break;
case 22:this.$ = yytext;
break;
case 23:this.$ = yytext;
break;
case 24:this.$ = yytext;
break;
case 25:this.$ = new Range(_$[$0-4].first_line, _$[$0-4].first_column, {}, [$$[$0-4], $$[$0-2]]);
break;
case 26:this.$ = new OperatorDefinition(_$[$0-2].first_line, _$[$0-2].first_column, {}, []);
break;
case 27:this.$ = new ActivationMethod(_$[$0-3].first_line, _$[$0-3].first_column, {name: $$[$0-1]}, []);
break;
case 28:this.$ = new AccumulationMethod(_$[$0].first_line, _$[$0].first_column, {name: $$[$0-1]}, []);
break;
case 29: this.$ = new Rule(_$[$0-8].first_line, _$[$0-8].first_column, {number: $$[$0-7]}, [$$[$0-4], $$[$0-2], $$[$0-4]])
break;
case 30:this.$ = new Condition(_$[$0-1].first_line, _$[$0-1].first_column, {}, [$$[$0-1], $$[$0]]);
break;
case 31:this.$ =  new Conjunction(_$[$0-1].first_line, _$[$0-1].first_column, {}, [$$[$0]]);
break;
case 32:this.$ = new Disjunction(_$[$0-1].first_line, _$[$0-1].first_column, {}, [$$[$0]]);
break;
case 33:this.$ = new X(_$[$0-1].first_line, _$[$0-1].first_column, {negation: ($$[$0-1]===undefined)?false:true}, [$$[$0]]);
break;
case 35:this.$ = $$[$0];
break;
case 36:this.$ = new Conclusion(_$[$0-3].first_line, _$[$0-3].first_column, {}, []);
break;
case 37:this.$ = new WeightingFactor(_$[$0].first_line, _$[$0].first_column, {}, [$$[$0]]);
break;
case 43:this.$ = $$[$0];
break;
case 44:this.$ = $$[$0];
break;
case 45:this.$ = ($$[$0-1]==='-')? ($$[$0] * -1):$$[$0];
break;
case 46:this.$ = $$[$0];
break;
case 47:this.$ = $$[$0-2];
break;
case 48:this.$ = $$[$0];
break;
case 49:this.$ = $$[$0];
break;
case 50:this.$ = new Number(yytext.substr(2).replace('_', ''));
break;
case 51:this.$ = new Number(yytext.substr(2).replace('_', ''));
break;
case 52:this.$ = new Number(yytext.substr(3).replace('_', ''));
break;
case 53:this.$ = new Number(yytext.replace('_', ''));
break;
case 58:this.$ = $$[$0];
break;
case 59:this.$ = new Number(yytext.substr(2).replace('_', ''));
break;
case 60:this.$ = new Number(yytext.substr(2).replace('_', ''));
break;
case 61:this.$ = new Number(yytext.substr(3).replace('_', ''));
break;
case 66:this.$ = true;
break;
case 67:this.$ = false;
break;
case 68:this.$ = new CharacterString(_$[$0].first_line, _$[$0].first_column, {string: yytext}, []);
break;
case 69:this.$ = new CharacterString(_$[$0].first_line, _$[$0].first_column, {string: yytext}, []);
break;
case 142:this.$ = $$[$0];
break;
case 157:this.$ = $$[$0];
break;
case 164:this.$ = new InputDeclarations(_$[$0-5].first_line, _$[$0-5].first_column, {}, []);
break;
case 165:this.$ = new InputDeclaration(_$[$0-2].first_line, _$[$0-2].first_column, {}, []);
break;
case 170:this.$ = new OutputDeclaration(_$[$0-2].first_line, _$[$0-2].first_column, {}, []);
break;
case 171:this.$ = new OutputDeclarations(_$[$0-5].first_line, _$[$0-5].first_column, {}, []);
break;
case 172:this.$ = new InputOutputDeclarations(_$[$0-4].first_line, _$[$0-4].first_column, {}, []);
break;
case 176:this.$ = new VarDeclarations(_$[$0-5].first_line, _$[$0-5].first_column, {}, []);
break;
case 177:this.$ = [];
break;
case 178:$$[$0-1].push($$[$0]);
break;
case 179:this.$ = [];
break;
case 180:$$[$0-1].push($$[$0]);
break;
case 181:this.$ = [];
break;
case 182:$$[$0-1].push($$[$0]);
break;
case 183:this.$ = [];
break;
case 184:$$[$0-1].push($$[$0]);
break;
case 185:this.$ = [];
break;
case 186:$$[$0-1].push($$[$0]);
break;
case 187:this.$ = [];
break;
case 188:$$[$0-1].push($$[$0]);
break;
case 189:this.$ = [];
break;
case 190:$$[$0-1].push($$[$0]);
break;
case 191:this.$ = [];
break;
case 192:$$[$0-1].push($$[$0]);
break;
case 193:this.$ = [];
break;
case 194:$$[$0-1].push($$[$0]);
break;
case 197:this.$ = [];
break;
case 198:$$[$0-1].push($$[$0]);
break;
case 208:this.$ = [];
break;
case 209:$$[$0-1].push($$[$0]);
break;
case 212:this.$ = [];
break;
case 213:$$[$0-1].push($$[$0]);
break;
case 233:this.$ = [];
break;
case 234:$$[$0-1].push($$[$0]);
break;
case 243:this.$ = [];
break;
case 244:$$[$0-3].push($$[$0-2]);
break;
case 251:this.$ = [];
break;
case 252:$$[$0-2].push($$[$0-1]);
break;
case 292:this.$ = [];
break;
case 293:$$[$0-2].push($$[$0-1]);
break;
case 310:this.$ = [];
break;
case 311:$$[$0-2].push($$[$0-1]);
break;
case 312:this.$ = [];
break;
case 313:$$[$0-2].push($$[$0-1]);
break;
case 316:this.$ = [];
break;
case 317:$$[$0-2].push($$[$0-1]);
break;
case 320:this.$ = [];
break;
case 321:$$[$0-2].push($$[$0-1]);
break;
case 322:this.$ = [];
break;
case 323:$$[$0-2].push($$[$0-1]);
break;
case 328:this.$ = [];
break;
case 329:$$[$0-2].push($$[$0-1]);
break;
case 330:this.$ = [];
break;
case 331:$$[$0-2].push($$[$0-1]);
break;
case 336:this.$ = [];
break;
case 337:$$[$0-2].push($$[$0-1]);
break;
case 346:this.$ = [];
break;
case 347:$$[$0-2].push($$[$0-1]);
break;
case 352:this.$ = [];
break;
case 353:$$[$0-2].push($$[$0-1]);
break;
case 354:this.$ = [];
break;
case 355:$$[$0-2].push($$[$0-1]);
break;
case 372:this.$ = [];
break;
case 373:$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,6:[2,177],8:[2,177],204:[2,177]},{1:[3]},{5:3,6:[2,179],8:[2,179],203:4,204:[1,5]},{6:[1,6],7:7,8:[1,8]},{6:[2,178],8:[2,178],204:[2,178]},{9:[1,10],205:9},{1:[2,1]},{6:[2,180],8:[2,180]},{9:[1,11]},{37:[1,12]},{35:[1,13]},{10:14,13:[2,181],24:[2,181],28:[2,181],43:[2,181],50:[2,181],252:[2,181],268:[2,181],285:[2,181]},{9:[2,292],206:15,207:[2,292]},{9:[1,23],61:[1,31],111:30,119:33,128:[1,40],129:[1,41],130:[1,42],131:[1,43],166:19,167:25,168:26,169:27,170:28,173:[1,29],174:46,175:47,176:[1,50],177:[1,51],178:[1,52],179:[1,53],180:[1,54],181:[1,55],182:[1,56],183:[1,57],184:[1,48],185:[1,49],186:[1,34],187:[1,35],188:[1,36],189:[1,37],190:[1,38],191:[1,39],208:16,209:17,211:20,213:21,215:22,221:[1,32],233:18,234:[1,24],278:[1,44],282:[1,45]},{11:58,13:[2,183],14:59,15:60,16:61,24:[2,183],28:[2,183],43:[2,183],50:[2,183],252:[1,62],268:[1,63],285:[2,183]},{9:[1,10],205:65,207:[1,64]},{37:[2,132]},{37:[2,294]},{37:[2,295]},{37:[2,296],40:[1,67],210:66},{37:[2,298],40:[1,69],212:68},{37:[2,300],40:[1,71],214:70},{37:[2,302],40:[1,73],216:72},{37:[2,308],40:[1,75],217:74},{9:[1,77],235:76},{37:[2,92],40:[2,92]},{37:[2,93],40:[2,93]},{37:[2,94],40:[2,94]},{37:[2,288],40:[2,288],171:78,222:[1,79]},{37:[2,96],40:[2,96]},{37:[2,97],40:[2,97],61:[1,80]},{9:[1,82],219:81},{222:[1,83]},{37:[2,98],40:[2,98]},{37:[2,111],40:[2,111]},{37:[2,112],40:[2,112]},{37:[2,113],40:[2,113]},{37:[2,114],40:[2,114]},{37:[2,115],40:[2,115]},{37:[2,116],40:[2,116]},{37:[2,117],40:[2,117]},{37:[2,118],40:[2,118]},{37:[2,119],40:[2,119]},{37:[2,120],40:[2,120]},{37:[2,286],40:[2,286],222:[2,286]},{37:[2,287],40:[2,287],222:[2,287]},{37:[2,99],40:[2,99],61:[2,99],112:[2,99]},{37:[2,100],40:[2,100],61:[2,100],112:[2,100]},{37:[2,109],40:[2,109],112:[2,109]},{37:[2,110],40:[2,110],112:[2,110]},{37:[2,101],40:[2,101],61:[2,101],112:[2,101]},{37:[2,102],40:[2,102],61:[2,102],112:[2,102]},{37:[2,103],40:[2,103],61:[2,103],112:[2,103]},{37:[2,104],40:[2,104],61:[2,104],112:[2,104]},{37:[2,105],40:[2,105],61:[2,105],112:[2,105]},{37:[2,106],40:[2,106],61:[2,106],112:[2,106]},{37:[2,107],40:[2,107],61:[2,107],112:[2,107]},{37:[2,108],40:[2,108],61:[2,108],112:[2,108]},{12:84,13:[2,185],17:85,18:87,19:86,24:[2,185],28:[2,185],43:[2,185],50:[2,185],285:[1,88]},{13:[2,182],24:[2,182],28:[2,182],43:[2,182],50:[2,182],252:[2,182],268:[2,182],285:[2,182]},{13:[2,3],24:[2,3],28:[2,3],43:[2,3],50:[2,3],252:[2,3],268:[2,3],285:[2,3]},{13:[2,4],24:[2,4],28:[2,4],43:[2,4],50:[2,4],252:[2,4],268:[2,4],285:[2,4]},{9:[2,334],253:89,307:90,308:[1,91],309:[1,92]},{9:[2,350],269:93,308:[1,95],309:[1,96],312:94},{6:[2,131],8:[2,131],204:[2,131]},{37:[1,97]},{37:[2,133]},{57:99,83:104,102:98,103:100,104:101,105:102,106:103,107:105,108:127,109:137,110:138,111:115,113:116,114:[1,128],115:[1,129],116:[1,130],117:[1,141],119:117,120:[1,118],126:112,128:[1,123],129:[1,124],130:[1,125],131:[1,126],132:[1,113],133:[1,114],134:[1,106],135:[1,107],136:108,137:109,138:110,139:111,140:[1,119],151:[1,134],160:120,162:121,164:[1,140],165:122,174:46,175:47,176:[1,50],177:[1,51],178:[1,52],179:[1,53],180:[1,54],181:[1,55],182:[1,56],183:[1,57],184:[1,48],185:[1,49],186:[1,133],187:[1,131],188:[1,132],189:[1,135],190:[1,136],301:[1,139]},{37:[2,134]},{108:142,109:137,110:138,117:[1,141],164:[1,140],301:[1,139]},{37:[2,135]},{9:[1,82],219:143},{37:[2,136]},{222:[1,145],227:144},{37:[2,137]},{9:[1,82],57:99,61:[1,151],83:104,102:147,103:100,104:101,105:102,106:103,107:105,108:127,109:137,110:138,111:115,113:116,114:[1,128],115:[1,129],116:[1,130],117:[1,141],119:117,120:[1,118],126:112,128:[1,123],129:[1,124],130:[1,125],131:[1,126],132:[1,113],133:[1,114],134:[1,106],135:[1,107],136:108,137:109,138:110,139:111,140:[1,119],151:[1,134],160:120,162:121,164:[1,140],165:122,174:46,175:47,176:[1,50],177:[1,51],178:[1,52],179:[1,53],180:[1,54],181:[1,55],182:[1,56],183:[1,57],184:[1,48],185:[1,49],186:[1,133],187:[1,131],188:[1,132],189:[1,135],190:[1,136],219:148,222:[1,145],227:149,232:150,301:[1,139],306:146},{37:[1,152]},{35:[1,153]},{37:[2,290],40:[1,155],172:154},{110:156,117:[1,141]},{108:158,109:137,110:138,117:[1,141],164:[1,140],218:157,301:[1,139]},{63:[2,310],64:[2,310],220:159},{37:[2,142],63:[2,142],64:[2,142],112:[1,160],224:[2,142]},{108:158,109:137,110:138,117:[1,141],164:[1,140],218:161,301:[1,139]},{13:[1,162]},{13:[2,184],24:[2,184],28:[2,184],43:[2,184],50:[2,184],285:[2,184]},{13:[2,187],20:163,23:164,24:[1,165],28:[2,187],43:[2,187],50:[2,187]},{13:[2,5],24:[2,5],28:[2,5],43:[2,5],50:[2,5],285:[2,5]},{9:[2,370],61:[2,370],128:[2,370],129:[2,370],130:[2,370],131:[2,370],173:[2,370],176:[2,370],177:[2,370],178:[2,370],179:[2,370],180:[2,370],181:[2,370],182:[2,370],183:[2,370],184:[2,370],185:[2,370],186:[2,370],187:[2,370],188:[2,370],189:[2,370],190:[2,370],191:[2,370],221:[2,370],264:[2,370],278:[2,370],282:[2,370],286:166,315:[1,167]},{9:[1,170],254:168,257:169},{9:[2,335]},{9:[2,332]},{9:[2,333]},{9:[1,170],257:172,267:171},{9:[2,351]},{9:[2,348]},{9:[2,349]},{9:[2,293],207:[2,293]},{37:[2,297]},{37:[2,38],63:[2,38],64:[2,38],224:[2,38]},{37:[2,39],63:[2,39],64:[2,39],224:[2,39]},{37:[2,40],63:[2,40],64:[2,40],224:[2,40]},{37:[2,41],63:[2,41],64:[2,41],224:[2,41]},{37:[2,42],63:[2,42],64:[2,42],224:[2,42]},{37:[2,43],63:[2,43],64:[2,43],73:[2,43],224:[2,43]},{37:[2,44],63:[2,44],64:[2,44],73:[2,44],224:[2,44]},{37:[2,68],40:[2,68],63:[2,68],64:[2,68],224:[2,68]},{37:[2,69],40:[2,69],63:[2,69],64:[2,69],224:[2,69]},{37:[2,70],63:[2,70],64:[2,70],224:[2,70]},{37:[2,71],63:[2,71],64:[2,71],224:[2,71]},{37:[2,72],63:[2,72],64:[2,72],224:[2,72]},{37:[2,73],63:[2,73],64:[2,73],224:[2,73]},{112:[1,173]},{37:[2,66],63:[2,66],64:[2,66],224:[2,66]},{37:[2,67],63:[2,67],64:[2,67],224:[2,67]},{112:[1,174]},{35:[2,48],37:[2,48],63:[2,48],64:[2,48],73:[2,48],224:[2,48]},{112:[1,175]},{37:[2,255],63:[2,255],64:[2,255],73:[2,255],122:176,123:177,124:[1,178],224:[2,255]},{141:179,142:180,143:181,144:182,145:183,146:[1,184],151:[1,185],153:[1,186],155:[1,187],157:[1,188]},{112:[1,189]},{112:[1,190]},{112:[1,191]},{112:[2,62]},{112:[2,63]},{112:[2,64]},{112:[2,65]},{35:[2,49],37:[2,49],63:[2,49],64:[2,49],73:[2,49],224:[2,49]},{35:[2,50],37:[2,50],63:[2,50],64:[2,50],73:[2,50],224:[2,50]},{35:[2,51],37:[2,51],63:[2,51],64:[2,51],73:[2,51],224:[2,51]},{35:[2,52],37:[2,52],63:[2,52],64:[2,52],73:[2,52],224:[2,52]},{112:[2,280]},{112:[2,281]},{112:[2,282]},{112:[2,283]},{112:[2,284]},{112:[2,285]},{110:192,117:[1,141]},{35:[2,46],37:[2,46],63:[2,46],64:[2,46],73:[2,46],224:[2,46]},{117:[2,247]},{117:[2,248]},{35:[2,251],37:[2,251],61:[2,251],63:[2,251],64:[2,251],73:[2,251],117:[2,251],118:193,164:[2,251],224:[2,251],251:[2,251],303:[2,251]},{37:[2,299]},{37:[2,301]},{37:[2,303]},{9:[1,82],57:99,61:[1,151],83:104,102:197,103:100,104:101,105:102,106:103,107:105,108:127,109:137,110:196,111:115,113:116,114:[1,128],115:[1,129],116:[1,130],117:[1,141],119:117,120:[1,118],126:112,128:[1,123],129:[1,124],130:[1,125],131:[1,126],132:[1,113],133:[1,114],134:[1,106],135:[1,107],136:108,137:109,138:110,139:111,140:[1,119],151:[1,134],160:120,162:121,164:[1,140],165:122,174:46,175:47,176:[1,50],177:[1,51],178:[1,52],179:[1,53],180:[1,54],181:[1,55],182:[1,56],183:[1,57],184:[1,48],185:[1,49],186:[1,133],187:[1,131],188:[1,132],189:[1,135],190:[1,136],219:198,222:[1,145],227:200,228:194,230:195,232:199,301:[1,139]},{37:[2,309]},{37:[2,304]},{37:[2,305]},{37:[2,306]},{37:[2,307]},{9:[1,202],238:201},{9:[2,320],236:203,237:[2,320]},{9:[1,23],61:[1,31],111:30,119:33,128:[1,40],129:[1,41],130:[1,42],131:[1,43],166:19,167:25,168:26,169:27,170:28,173:[1,29],174:46,175:47,176:[1,50],177:[1,51],178:[1,52],179:[1,53],180:[1,54],181:[1,55],182:[1,56],183:[1,57],184:[1,48],185:[1,49],186:[1,34],187:[1,35],188:[1,36],189:[1,37],190:[1,38],191:[1,39],209:204,211:20,213:21,215:22,221:[1,32],278:[1,44],282:[1,45]},{37:[2,95],40:[2,95]},{103:205,134:[1,106],135:[1,107]},{224:[1,206]},{64:[1,207]},{73:[1,208]},{63:[1,210],64:[1,209]},{9:[1,211]},{63:[2,312],223:212,224:[2,312]},{6:[2,2],8:[2,2]},{13:[2,189],21:213,27:214,28:[1,215],43:[2,189],50:[2,189]},{13:[2,186],24:[2,186],28:[2,186],43:[2,186],50:[2,186]},{9:[1,216]},{9:[1,23],61:[1,31],111:30,119:33,128:[1,40],129:[1,41],130:[1,42],131:[1,43],166:19,167:25,168:26,169:27,170:28,173:[1,29],174:46,175:47,176:[1,50],177:[1,51],178:[1,52],179:[1,53],180:[1,54],181:[1,55],182:[1,56],183:[1,57],184:[1,48],185:[1,49],186:[1,34],187:[1,35],188:[1,36],189:[1,37],190:[1,38],191:[1,39],209:219,211:20,213:21,215:22,221:[1,32],261:217,262:218,263:220,264:[1,221],278:[1,44],282:[1,45]},{9:[2,371],61:[2,371],128:[2,371],129:[2,371],130:[2,371],131:[2,371],173:[2,371],176:[2,371],177:[2,371],178:[2,371],179:[2,371],180:[2,371],181:[2,371],182:[2,371],183:[2,371],184:[2,371],185:[2,371],186:[2,371],187:[2,371],188:[2,371],189:[2,371],190:[2,371],191:[2,371],221:[2,371],264:[2,371],278:[2,371],282:[2,371]},{37:[1,222]},{35:[1,223]},{35:[2,346],63:[2,346],266:224},{37:[1,225]},{35:[1,226]},{110:228,114:[1,229],115:[1,230],116:[1,231],117:[1,141],127:227},{108:127,109:137,110:138,113:232,114:[1,128],115:[1,129],116:[1,130],117:[1,141],164:[1,140],301:[1,139]},{120:[1,233]},{37:[2,55],63:[2,55],64:[2,55],73:[2,55],224:[2,55]},{37:[2,256],63:[2,256],64:[2,256],73:[2,256],224:[2,256]},{117:[2,259],125:234,164:[1,237],301:[1,236],304:235},{37:[2,74],63:[2,74],64:[2,74],224:[2,74]},{37:[2,75],63:[2,75],64:[2,75],224:[2,75]},{37:[2,76],63:[2,76],64:[2,76],224:[2,76]},{37:[2,77],63:[2,77],64:[2,77],224:[2,77]},{37:[2,78],63:[2,78],64:[2,78],224:[2,78]},{37:[2,79],63:[2,79],64:[2,79],224:[2,79]},{152:238,153:[2,270],303:[1,239]},{154:240,155:[2,272],303:[1,241]},{156:242,157:[2,274],303:[1,243]},{146:[2,276],158:244,303:[1,245]},{110:247,117:[1,141],161:246},{110:249,117:[1,141],163:248},{110:249,117:[1,141],163:250},{35:[2,45],37:[2,45],63:[2,45],64:[2,45],73:[2,45],224:[2,45]},{35:[2,53],37:[2,53],61:[2,53],63:[2,53],64:[2,53],73:[2,53],117:[2,249],164:[2,53],224:[2,53],251:[2,53],302:251,303:[1,252]},{63:[2,316],224:[2,316],229:253},{63:[2,145],224:[2,145]},{61:[1,254],63:[2,46],224:[2,46]},{63:[2,147],64:[2,147],224:[2,147]},{63:[2,148],64:[2,148],224:[2,148]},{63:[2,149],64:[2,149],224:[2,149]},{63:[2,150],64:[2,150],224:[2,150]},{63:[2,322],64:[2,322],239:255},{40:[1,256]},{9:[1,77],235:258,237:[1,257]},{37:[2,152]},{37:[2,291],40:[2,291]},{37:[2,289],40:[2,289]},{37:[2,138],40:[2,138]},{108:259,109:137,110:138,117:[1,141],164:[1,140],301:[1,139]},{37:[2,140],40:[2,140]},{9:[1,82],219:260},{37:[2,141],63:[2,141],64:[2,141],224:[2,141]},{63:[1,262],224:[1,261]},{13:[2,191],22:263,42:264,43:[1,265],50:[2,191]},{13:[2,188],28:[2,188],43:[2,188],50:[2,188]},{9:[1,266]},{25:267,26:[2,193],53:[2,193]},{37:[1,268]},{37:[2,167]},{37:[2,342]},{37:[2,343]},{37:[2,344],40:[1,270],265:269},{9:[2,336],255:271,256:[2,336]},{9:[1,23],61:[1,31],111:30,119:33,128:[1,40],129:[1,41],130:[1,42],131:[1,43],166:19,167:25,168:26,169:27,170:28,173:[1,29],174:46,175:47,176:[1,50],177:[1,51],178:[1,52],179:[1,53],180:[1,54],181:[1,55],182:[1,56],183:[1,57],184:[1,48],185:[1,49],186:[1,34],187:[1,35],188:[1,36],189:[1,37],190:[1,38],191:[1,275],209:219,211:20,213:21,215:22,221:[1,32],258:272,259:273,261:274,262:218,263:220,264:[1,221],278:[1,44],282:[1,45]},{35:[2,169],63:[1,276]},{9:[2,352],256:[2,352],270:277},{9:[1,23],61:[1,31],111:30,119:33,128:[1,40],129:[1,41],130:[1,42],131:[1,43],166:19,167:25,168:26,169:27,170:28,173:[1,29],174:46,175:47,176:[1,50],177:[1,51],178:[1,52],179:[1,53],180:[1,54],181:[1,55],182:[1,56],183:[1,57],184:[1,48],185:[1,49],186:[1,34],187:[1,35],188:[1,36],189:[1,37],190:[1,38],191:[1,39],209:219,211:20,213:21,215:22,221:[1,32],261:278,262:218,263:220,264:[1,221],278:[1,44],282:[1,45]},{37:[2,57],63:[2,57],64:[2,57],224:[2,57]},{37:[2,58],63:[2,58],64:[2,58],224:[2,58]},{37:[2,59],63:[2,59],64:[2,59],224:[2,59]},{37:[2,60],63:[2,60],64:[2,60],224:[2,60]},{37:[2,61],63:[2,61],64:[2,61],224:[2,61]},{35:[2,47],37:[2,47],63:[2,47],64:[2,47],73:[2,47],224:[2,47]},{37:[2,253],63:[2,253],64:[2,253],73:[2,253],121:279,123:280,124:[1,178],224:[2,253]},{110:281,117:[1,141]},{117:[2,260]},{117:[2,257]},{117:[2,258]},{143:282,153:[1,186]},{153:[2,271]},{144:283,155:[1,187]},{155:[2,273]},{145:284,157:[1,188]},{157:[2,275]},{146:[1,285]},{146:[2,277]},{37:[2,87],63:[2,87],64:[2,87],224:[2,87]},{35:[1,286]},{37:[2,89],63:[2,89],64:[2,89],224:[2,89]},{164:[1,287]},{164:[1,288]},{117:[1,289]},{117:[2,250]},{63:[1,291],224:[1,290]},{9:[1,82],57:99,61:[1,151],64:[2,318],83:104,102:197,103:100,104:101,105:102,106:103,107:105,108:127,109:137,110:138,111:115,113:116,114:[1,128],115:[1,129],116:[1,130],117:[1,141],119:117,120:[1,118],126:112,128:[1,123],129:[1,124],130:[1,125],131:[1,126],132:[1,113],133:[1,114],134:[1,106],135:[1,107],136:108,137:109,138:110,139:111,140:[1,119],151:[1,134],160:120,162:121,164:[1,140],165:122,174:46,175:47,176:[1,50],177:[1,51],178:[1,52],179:[1,53],180:[1,54],181:[1,55],182:[1,56],183:[1,57],184:[1,48],185:[1,49],186:[1,133],187:[1,131],188:[1,132],189:[1,135],190:[1,136],219:198,222:[1,145],227:200,230:293,231:292,232:199,301:[1,139]},{63:[1,295],64:[1,294]},{9:[1,82],57:99,61:[1,151],83:104,102:297,103:100,104:101,105:102,106:103,107:105,108:127,109:137,110:138,111:115,113:116,114:[1,128],115:[1,129],116:[1,130],117:[1,141],119:117,120:[1,118],126:112,128:[1,123],129:[1,124],130:[1,125],131:[1,126],132:[1,113],133:[1,114],134:[1,106],135:[1,107],136:108,137:109,138:110,139:111,140:[1,119],151:[1,134],160:120,162:121,164:[1,140],165:122,174:46,175:47,176:[1,50],177:[1,51],178:[1,52],179:[1,53],180:[1,54],181:[1,55],182:[1,56],183:[1,57],184:[1,48],185:[1,49],186:[1,133],187:[1,131],188:[1,132],189:[1,135],190:[1,136],219:298,222:[1,145],227:299,232:300,240:296,301:[1,139]},{37:[2,151]},{37:[1,301]},{63:[2,139],64:[2,139],224:[2,139]},{63:[2,311],64:[2,311]},{225:[1,302]},{108:158,109:137,110:138,117:[1,141],164:[1,140],218:303,301:[1,139]},{13:[2,6],49:304,50:[1,305]},{13:[2,190],43:[2,190],50:[2,190]},{9:[1,306]},{29:307,34:[2,195],53:[2,195],71:308,72:[1,309]},{26:[1,310],52:311,53:[1,312]},{9:[2,372],61:[2,372],128:[2,372],129:[2,372],130:[2,372],131:[2,372],173:[2,372],176:[2,372],177:[2,372],178:[2,372],179:[2,372],180:[2,372],181:[2,372],182:[2,372],183:[2,372],184:[2,372],185:[2,372],186:[2,372],187:[2,372],188:[2,372],189:[2,372],190:[2,372],191:[2,372],221:[2,372],256:[2,372],264:[2,372],278:[2,372],282:[2,372],287:313},{37:[2,168]},{61:[1,151],232:314},{9:[1,170],254:316,256:[1,315],257:169},{37:[2,165]},{37:[2,338]},{37:[2,339]},{37:[2,116],40:[2,116],260:317,310:[1,318],311:[1,319]},{9:[1,320]},{9:[1,170],256:[1,321],257:172,267:322},{37:[2,170]},{37:[2,54],63:[2,54],64:[2,54],73:[2,54],224:[2,54]},{37:[2,254],63:[2,254],64:[2,254],73:[2,254],224:[2,254]},{37:[2,56],63:[2,56],64:[2,56],73:[2,56],224:[2,56]},{37:[2,82],63:[2,82],64:[2,82],224:[2,82]},{37:[2,83],63:[2,83],64:[2,83],224:[2,83]},{37:[2,84],63:[2,84],64:[2,84],224:[2,84]},{37:[2,85],63:[2,85],64:[2,85],224:[2,85]},{110:323,117:[1,141]},{110:324,117:[1,141]},{110:247,117:[1,141],161:325},{35:[2,252],37:[2,252],61:[2,252],63:[2,252],64:[2,252],73:[2,252],117:[2,252],164:[2,252],224:[2,252],251:[2,252],303:[2,252]},{37:[2,144],63:[2,144],64:[2,144],224:[2,144]},{9:[1,82],57:99,61:[1,151],83:104,102:197,103:100,104:101,105:102,106:103,107:105,108:127,109:137,110:196,111:115,113:116,114:[1,128],115:[1,129],116:[1,130],117:[1,141],119:117,120:[1,118],126:112,128:[1,123],129:[1,124],130:[1,125],131:[1,126],132:[1,113],133:[1,114],134:[1,106],135:[1,107],136:108,137:109,138:110,139:111,140:[1,119],151:[1,134],160:120,162:121,164:[1,140],165:122,174:46,175:47,176:[1,50],177:[1,51],178:[1,52],179:[1,53],180:[1,54],181:[1,55],182:[1,56],183:[1,57],184:[1,48],185:[1,49],186:[1,133],187:[1,131],188:[1,132],189:[1,135],190:[1,136],219:198,222:[1,145],227:200,228:326,230:195,232:199,301:[1,139]},{64:[1,327]},{64:[2,319]},{37:[2,153],63:[2,153],64:[2,153],224:[2,153]},{9:[1,202],238:328},{63:[2,154],64:[2,154]},{63:[2,324],64:[2,324]},{63:[2,325],64:[2,325]},{63:[2,326],64:[2,326]},{63:[2,327],64:[2,327]},{9:[2,321],237:[2,321]},{9:[1,331],111:332,119:33,128:[1,40],129:[1,41],130:[1,42],131:[1,43],166:330,167:25,168:26,169:27,170:28,173:[1,29],174:46,175:47,176:[1,50],177:[1,51],178:[1,52],179:[1,53],180:[1,54],181:[1,55],182:[1,56],183:[1,57],184:[1,48],185:[1,49],186:[1,34],187:[1,35],188:[1,36],189:[1,37],190:[1,38],191:[1,39],226:329,278:[1,44],282:[1,45]},{63:[2,313],224:[2,313]},{13:[2,192],50:[2,192]},{51:[1,333]},{37:[2,219],44:334,74:335,92:[2,219],93:[1,336]},{30:337,34:[2,197],53:[2,197]},{34:[2,196],53:[2,196]},{61:[1,338]},{13:[2,7],24:[2,7],28:[2,7],43:[2,7],50:[2,7]},{26:[2,194],53:[2,194]},{9:[1,339]},{9:[1,23],61:[1,31],111:30,119:33,128:[1,40],129:[1,41],130:[1,42],131:[1,43],166:19,167:25,168:26,169:27,170:28,173:[1,29],174:46,175:47,176:[1,50],177:[1,51],178:[1,52],179:[1,53],180:[1,54],181:[1,55],182:[1,56],183:[1,57],184:[1,48],185:[1,49],186:[1,34],187:[1,35],188:[1,36],189:[1,37],190:[1,38],191:[1,39],209:219,211:20,213:21,215:22,221:[1,32],256:[1,340],261:341,262:218,263:220,264:[1,221],278:[1,44],282:[1,45]},{37:[2,345]},{13:[2,164],24:[2,164],28:[2,164],43:[2,164],50:[2,164],252:[2,164],268:[2,164],285:[2,164]},{37:[1,342]},{37:[2,166]},{37:[2,340]},{37:[2,341]},{35:[2,347],63:[2,347]},{13:[2,171],24:[2,171],28:[2,171],43:[2,171],50:[2,171],252:[2,171],268:[2,171],285:[2,171]},{37:[1,343]},{35:[1,344]},{164:[1,345]},{37:[2,91],63:[2,91],64:[2,91],224:[2,91]},{63:[2,317],224:[2,317]},{63:[2,146],224:[2,146]},{63:[2,323],64:[2,323]},{37:[2,143],40:[2,143]},{37:[2,314],40:[2,314]},{37:[2,315],40:[2,315]},{37:[2,97],40:[2,97]},{13:[2,13],50:[2,13]},{45:346,76:347,77:[1,348],79:[2,206]},{37:[2,224],75:349,92:[1,350]},{35:[1,351]},{31:352,34:[1,354],52:353,53:[1,312]},{57:355,83:104,107:105,108:127,109:137,110:138,111:115,113:116,114:[1,128],115:[1,129],116:[1,130],117:[1,141],119:117,120:[1,118],164:[1,140],174:46,175:47,176:[1,50],177:[1,51],178:[1,52],179:[1,53],180:[1,54],181:[1,55],182:[1,56],183:[1,57],184:[1,48],185:[1,49],301:[1,139]},{40:[1,356]},{13:[2,176],24:[2,176],28:[2,176],43:[2,176],50:[2,176],285:[2,176]},{37:[1,357]},{9:[2,337],256:[2,337]},{9:[2,353],256:[2,353]},{110:359,117:[1,141],148:358},{110:360,117:[1,141]},{46:361,79:[1,362]},{79:[2,207]},{35:[1,363]},{37:[1,364]},{35:[1,365]},{289:366,290:[1,367],291:[1,368],292:[1,369]},{32:370,39:[1,371]},{34:[2,198],53:[2,198]},{35:[1,372]},{73:[1,373]},{9:[1,379],37:[2,212],54:374,55:375,56:376,57:378,58:377,59:380,61:[2,212],83:104,107:105,108:127,109:137,110:138,111:115,113:116,114:[1,128],115:[1,129],116:[1,130],117:[1,141],119:117,120:[1,118],164:[1,140],174:46,175:47,176:[1,50],177:[1,51],178:[1,52],179:[1,53],180:[1,54],181:[1,55],182:[1,56],183:[1,57],184:[1,48],185:[1,49],301:[1,139]},{9:[2,373],61:[2,373],128:[2,373],129:[2,373],130:[2,373],131:[2,373],173:[2,373],176:[2,373],177:[2,373],178:[2,373],179:[2,373],180:[2,373],181:[2,373],182:[2,373],183:[2,373],184:[2,373],185:[2,373],186:[2,373],187:[2,373],188:[2,373],189:[2,373],190:[2,373],191:[2,373],221:[2,373],256:[2,373],264:[2,373],278:[2,373],282:[2,373]},{37:[2,88],63:[2,88],64:[2,88],224:[2,88]},{37:[2,278],63:[2,278],64:[2,278],159:381,224:[2,278],251:[1,382]},{37:[2,90],63:[2,90],64:[2,90],164:[2,90],224:[2,90]},{47:383,48:[2,208],82:[2,208]},{35:[1,384]},{78:385,294:[1,387],295:[1,386]},{77:[2,26],79:[2,26]},{293:388,294:[1,389],295:[1,390],296:[1,391]},{37:[2,220],92:[2,220]},{37:[2,216],92:[2,216]},{37:[2,217],92:[2,217]},{37:[2,218],92:[2,218]},{33:[1,392]},{40:[1,393]},{36:394,38:[1,395],66:[1,396],67:[1,397],68:[1,398],69:[1,399],70:[1,400]},{57:401,83:104,107:105,108:127,109:137,110:138,111:115,113:116,114:[1,128],115:[1,129],116:[1,130],117:[1,141],119:117,120:[1,118],164:[1,140],174:46,175:47,176:[1,50],177:[1,51],178:[1,52],179:[1,53],180:[1,54],181:[1,55],182:[1,56],183:[1,57],184:[1,48],185:[1,49],301:[1,139]},{37:[1,402]},{37:[2,15]},{37:[2,210]},{37:[2,211]},{37:[2,16]},{37:[2,17]},{37:[2,18],60:403,61:[1,404]},{37:[2,86],63:[2,86],64:[2,86],224:[2,86]},{110:405,117:[1,141]},{48:[1,406],81:407,82:[1,408]},{80:409,290:[1,410],292:[1,411],297:[1,412]},{37:[1,413]},{37:[2,226]},{37:[2,227]},{37:[2,225]},{37:[2,221]},{37:[2,222]},{37:[2,223]},{13:[2,8],28:[2,8],43:[2,8],50:[2,8]},{41:414,57:415,83:104,107:105,108:127,109:137,110:138,111:115,113:116,114:[1,128],115:[1,129],116:[1,130],117:[1,141],119:117,120:[1,118],164:[1,140],174:46,175:47,176:[1,50],177:[1,51],178:[1,52],179:[1,53],180:[1,54],181:[1,55],182:[1,56],183:[1,57],184:[1,48],185:[1,49],288:[1,416],301:[1,139]},{37:[1,417]},{37:[1,418]},{37:[2,199]},{37:[2,200]},{37:[2,201]},{37:[2,202]},{37:[2,203]},{64:[1,419]},{26:[2,14],34:[2,14],53:[2,14]},{37:[2,213],61:[2,213]},{9:[1,422],57:421,62:420,83:104,107:105,108:127,109:137,110:138,111:115,113:116,114:[1,128],115:[1,129],116:[1,130],117:[1,141],119:117,120:[1,118],164:[1,140],174:46,175:47,176:[1,50],177:[1,51],178:[1,52],179:[1,53],180:[1,54],181:[1,55],182:[1,56],183:[1,57],184:[1,48],185:[1,49],301:[1,139]},{37:[2,279],63:[2,279],64:[2,279],224:[2,279]},{13:[2,12],43:[2,12],50:[2,12]},{48:[2,209],82:[2,209]},{83:423,108:127,109:137,110:138,111:115,113:116,114:[1,128],115:[1,129],116:[1,130],117:[1,141],164:[1,140],174:46,175:47,176:[1,50],177:[1,51],178:[1,52],179:[1,53],180:[1,54],181:[1,55],182:[1,56],183:[1,57],301:[1,139]},{37:[1,424]},{37:[2,228]},{37:[2,229]},{37:[2,230]},{79:[2,27]},{37:[1,425]},{37:[2,204]},{37:[2,205]},{39:[2,9]},{39:[2,10]},{37:[1,426]},{63:[1,427]},{63:[2,214]},{63:[2,215]},{35:[1,428]},{48:[2,28],82:[2,28]},{33:[2,11]},{34:[2,25],53:[2,25]},{57:429,83:104,107:105,108:127,109:137,110:138,111:115,113:116,114:[1,128],115:[1,129],116:[1,130],117:[1,141],119:117,120:[1,118],164:[1,140],174:46,175:47,176:[1,50],177:[1,51],178:[1,52],179:[1,53],180:[1,54],181:[1,55],182:[1,56],183:[1,57],184:[1,48],185:[1,49],301:[1,139]},{84:[1,430]},{64:[1,431]},{9:[2,235],61:[2,235],85:432,89:433,94:434,299:[1,435]},{37:[2,19],61:[2,19]},{86:[1,436]},{64:[2,233],86:[2,233],90:437,92:[2,233],93:[2,233]},{9:[1,441],61:[1,440],95:438,96:439},{9:[2,236],61:[2,236]},{9:[1,443],87:442},{64:[2,30],86:[2,30],91:444,92:[1,445],93:[1,446]},{64:[2,33],86:[2,33],92:[2,33],93:[2,33]},{64:[2,237],86:[2,237],92:[2,237],93:[2,237]},{9:[2,235],61:[2,235],85:447,89:433,94:434,299:[1,435]},{64:[2,35],86:[2,35],92:[2,35],93:[2,35],97:[1,448]},{37:[2,231],88:449,298:[1,450]},{97:[1,451]},{64:[2,234],86:[2,234],92:[2,234],93:[2,234]},{9:[2,235],61:[2,235],89:452,94:434,299:[1,435]},{9:[2,235],61:[2,235],89:453,94:434,299:[1,435]},{64:[1,454]},{9:[2,239],98:455,299:[1,456]},{37:[1,457]},{9:[1,465],57:461,83:104,100:458,101:459,107:105,108:127,109:137,110:138,111:115,113:116,114:[1,128],115:[1,129],116:[1,130],117:[1,141],119:117,120:[1,118],164:[1,140],174:46,175:47,176:[1,50],177:[1,51],178:[1,52],179:[1,53],180:[1,54],181:[1,55],182:[1,56],183:[1,57],184:[1,48],185:[1,49],241:460,242:462,243:463,244:466,245:[1,464],247:467,248:468,301:[1,139]},{9:[1,469]},{64:[2,31],86:[2,31],92:[2,31],93:[2,31]},{64:[2,32],86:[2,32],92:[2,32],93:[2,32]},{64:[2,238],86:[2,238],92:[2,238],93:[2,238]},{9:[1,470]},{9:[2,240]},{48:[2,29],82:[2,29]},{37:[2,232]},{37:[2,37]},{37:[2,245]},{37:[2,246]},{37:[2,155]},{37:[2,156],222:[1,471],251:[1,472]},{110:473,117:[1,141]},{37:[2,157],222:[2,157],251:[2,157]},{37:[2,158],222:[2,158],251:[2,158]},{37:[2,160],222:[2,160],251:[2,160]},{37:[2,161],222:[2,161],251:[2,161]},{37:[2,243],63:[2,243],99:474,298:[2,243]},{64:[2,34],86:[2,34],92:[2,34],93:[2,34]},{249:[1,475]},{9:[1,476]},{37:[2,328],246:477,251:[2,328]},{37:[2,36],63:[1,478],298:[2,36]},{63:[2,330],224:[2,330],250:479},{37:[2,163],222:[2,163],251:[2,163]},{37:[2,159],251:[1,480]},{9:[1,481]},{63:[1,483],224:[1,482]},{110:484,117:[1,141]},{37:[2,241],63:[2,241],97:[1,486],298:[2,241],300:485},{37:[2,162],222:[2,162],251:[2,162]},{249:[1,487]},{37:[2,329],251:[2,329]},{37:[2,244],63:[2,244],298:[2,244]},{9:[1,488]},{63:[2,331],224:[2,331]},{37:[2,242],63:[2,242],298:[2,242]}],
defaultActions: {6:[2,1],16:[2,132],17:[2,294],18:[2,295],66:[2,133],68:[2,134],70:[2,135],72:[2,136],74:[2,137],90:[2,335],91:[2,332],92:[2,333],94:[2,351],95:[2,348],96:[2,349],98:[2,297],123:[2,62],124:[2,63],125:[2,64],126:[2,65],131:[2,280],132:[2,281],133:[2,282],134:[2,283],135:[2,284],136:[2,285],139:[2,247],140:[2,248],142:[2,299],143:[2,301],144:[2,303],146:[2,309],147:[2,304],148:[2,305],149:[2,306],150:[2,307],204:[2,152],218:[2,167],219:[2,342],220:[2,343],235:[2,260],236:[2,257],237:[2,258],239:[2,271],241:[2,273],243:[2,275],245:[2,277],252:[2,250],257:[2,151],269:[2,168],272:[2,165],273:[2,338],274:[2,339],278:[2,170],293:[2,319],314:[2,345],317:[2,166],318:[2,340],319:[2,341],347:[2,207],375:[2,15],376:[2,210],377:[2,211],378:[2,16],379:[2,17],386:[2,226],387:[2,227],388:[2,225],389:[2,221],390:[2,222],391:[2,223],396:[2,199],397:[2,200],398:[2,201],399:[2,202],400:[2,203],410:[2,228],411:[2,229],412:[2,230],413:[2,27],415:[2,204],416:[2,205],417:[2,9],418:[2,10],421:[2,214],422:[2,215],425:[2,11],456:[2,240],458:[2,232],459:[2,37],460:[2,245],461:[2,246],462:[2,155]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

var ast = require('./fcl_ast'),

Library                     = ast.Library
InputDeclarations           = ast.InputDeclarations
InputDeclaration            = ast.InputDeclaration
OutputDeclarations          = ast.OutputDeclarations
OutputDeclaration           = ast.OutputDeclaration
VarDeclarations             = ast.VarDeclarations
InputOutputDeclarations     = ast.InputOutputDeclarations
DataType                    = ast.DataType
FunctionBlock               = ast.FunctionBlock
FunctionBlockBody           = ast.FunctionBlockBody
FuzzifyBlock                = ast.FuzzifyBlock
DefuzzifyBlock              = ast.DefuzzifyBlock
RuleBlock                   = ast.RuleBlock
OptionBlock                 = ast.OptionBlock
LinguisticTerm              = ast.LinguisticTerm
MembershipFunction          = ast.MembershipFunction
Point                       = ast.Point
Rule                        = ast.Rule
Range                       = ast.Range
WeightingFactor             = ast.WeightingFactor
OperatorDefinition          = ast.OperatorDefinition
ActivationMethod            = ast.ActivationMethod
AccumulationMethod          = ast.AccumulationMethod
DefuzzificationMethod       = ast.DefuzzificationMethod
DefaultValue                = ast.DefaultValue
Condition                   = ast.Condition
Conjunction                 = ast.Conjunction
Disjunction                 = ast.Disjunction
Conclusion                  = ast.Conclusion
X                           = ast.X


/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:return 79
break;
case 2:return 77
break;
case 3:return 92
break;
case 4:return 202
break;
case 5:return 193
break;
case 6:return 194
break;
case 7:return 195
break;
case 8:return 196
break;
case 9:return 197
break;
case 10:return 198
break;
case 11:return 199
break;
case 12:return 200
break;
case 13:return 201
break;
case 14:return 221
break;
case 15:return 291
break;
case 16:return 296
break;
case 17:return 292
break;
case 18:return 128
break;
case 19:return 191
break;
case 20:return 68
break;
case 21:return 66
break;
case 22:return 67
break;
case 23:return 315
break;
case 24:return 186
break;
case 25:return 189
break;
case 26:return 190
break;
case 27:return 39
break;
case 28:return 28
break;
case 29:return 178
break;
case 30:return 245
break;
case 31:return 140
break;
case 32:return 130
break;
case 33:return 33
break;
case 34:return 13
break;
case 35:return 26
break;
case 36:return 'END_OPTIONS'
break;
case 37:return 48
break;
case 38:return 256
break;
case 39:return 207
break;
case 40:return 8
break;
case 41:return 24
break;
case 42:return 84
break;
case 43:return 177
break;
case 44:return 97
break;
case 45:return 69
break;
case 46:return 179
break;
case 47:return 185
break;
case 48:return 131
break;
case 49:return 34
break;
case 50:return 290
break;
case 51:return 294
break;
case 52:return 288
break;
case 53:return 'NIL'
break;
case 54:return 299
break;
case 55:return 297
break;
case 56:return 'OPTIONS'
break;
case 57:return 225
break;
case 58:return 93
break;
case 59:return 295
break;
case 60:return 72
break;
case 61:return 184
break;
case 62:return 70
break;
case 63:return 43
break;
case 64:return 82
break;
case 65:return 53
break;
case 66:return 187
break;
case 67:return 173
break;
case 68:return 188
break;
case 69:return 180
break;
case 70:return 181
break;
case 71:return 183
break;
case 72:return 182
break;
case 73:return 86
break;
case 74:return 204
break;
case 75:return 268
break;
case 76:return 252
break;
case 77:return 272
break;
case 78:return 285
break;
case 79:return 129
break;
case 80:return 298
break;
case 81:return 282
break;
case 82:return 234
break;
case 83:return 278
break;
case 84:return 176
break;
case 85:return 237
break;
case 86:return 133
break;
case 87:return 132
break;
case 88:return 134
break;
case 89:return 135
break;
case 90:return 9
break;
case 91:return 114
break;
case 92:return 115
break;
case 93:return 116
break;
case 94:return 120
break;
case 95:return 117
break;
case 96:return 'EDOLLAR'
break;
case 97:return 'LDOLLAR'
break;
case 98:return 'NDOLLAR'
break;
case 99:return 'PDOLLAR'
break;
case 100:return 'RDOLLAR'
break;
case 101:return 'TDOLLAR'
break;
case 102:return 'ESINGLEQUOTE'
break;
case 103:return 'EQUOTE'
break;
case 104:return 'DOLLAR'
break;
case 105:return 'LETTER'
break;
case 106:return 112
break;
case 107:return 'PERCENT'
break;
case 108:return "SINGLEQUOTE"
break;
case 109:return 'QUOTE'
break;
case 110:return 301
break;
case 111:return 164
break;
case 112:return 303
break;
case 113:return 64
break;
case 114:return 61
break;
case 115:return 222
break;
case 116:return 224
break;
case 117:return 37
break;
case 118:return 63
break;
case 119:return 40
break;
case 120:return 35
break;
case 121:return 73
break;
case 122:return 'PRINTABLE'
break;
case 123:return 6
break;
case 124:return 'INVALID'
break;
case 125:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:ACCU)/i,/^(?:ACT)/i,/^(?:AND)/i,/^(?:ANY)/i,/^(?:ANY_DERIVED)/i,/^(?:ANY_ELEMENTARY)/i,/^(?:ANY_MAGNITUDE)/i,/^(?:ANY_NUM)/i,/^(?:ANY_REAL)/i,/^(?:ANY_INT)/i,/^(?:ANY_BIT)/i,/^(?:ANY_STRING)/i,/^(?:ANY_DATE)/i,/^(?:ARRAY)/i,/^(?:ASUM)/i,/^(?:BDIF)/i,/^(?:BSUM)/i,/^(?:BYTE)/i,/^(?:BOOL)/i,/^(?:CoA)/i,/^(?:CoG)/i,/^(?:CoGS)/i,/^(?:CONSTANT)/i,/^(?:DATE)/i,/^(?:DATE_AND_TIME)/i,/^(?:DT)/i,/^(?:DEFAULT)/i,/^(?:DEFUZZIFY)/i,/^(?:DINT)/i,/^(?:(\s*[IQM]{1}\s+(NIL|[WDLXB]){1}))/i,/^(?:((T|TIME)\s*\s*-?))/i,/^(?:DWORD)/i,/^(?:END_DEFUZZIFY)/i,/^(?:END_FUNCTION_BLOCK)/i,/^(?:END_FUZZIFY)/i,/^(?:END_OPTIONS)/i,/^(?:END_RULEBLOCK)/i,/^(?:END_VAR)/i,/^(?:END_TYPE)/i,/^(?:FUNCTION_BLOCK)/i,/^(?:FUZZIFY)/i,/^(?:IF)/i,/^(?:INT)/i,/^(?:IS)/i,/^(?:LM)/i,/^(?:LINT)/i,/^(?:LREAL)/i,/^(?:LWORD)/i,/^(?:METHOD)/i,/^(?:MAX)/i,/^(?:MIN)/i,/^(?:NC)/i,/^(?:NIL)/i,/^(?:NOT)/i,/^(?:NSUM)/i,/^(?:OPTIONS)/i,/^(?:OF)/i,/^(?:OR)/i,/^(?:PROD)/i,/^(?:RANGE)/i,/^(?:REAL)/i,/^(?:RM)/i,/^(?:RULEBLOCK)/i,/^(?:RULE)/i,/^(?:TERM)/i,/^(?:TIME_OF_DAY)/i,/^(?:TIME)/i,/^(?:TOD)/i,/^(?:USINT)/i,/^(?:UINT)/i,/^(?:ULINT)/i,/^(?:UDINT)/i,/^(?:THEN)/i,/^(?:TYPE)/i,/^(?:VAR_OUTPUT)/i,/^(?:VAR_INPUT)/i,/^(?:VAR_IN_OUT)/i,/^(?:VAR)/i,/^(?:WORD)/i,/^(?:WITH)/i,/^(?:WSTRING)/i,/^(?:STRUCT)/i,/^(?:STRING)/i,/^(?:SINT)/i,/^(?:END_STRUCT)/i,/^(?:FALSE)/i,/^(?:TRUE)/i,/^(?:('[.^\']|\$\\''))/i,/^(?:("[.^\']|\$""))/i,/^(?:(([a-zA-Z]|(_([a-zA-Z]|[0-9])))((_)?([a-zA-Z]|[0-9]))*))/i,/^(?:(2#\s*[0-1]\s*(_?[0-1])*))/i,/^(?:(8#\s*[0-7]\s*(_?[0-7])*))/i,/^(?:(16#\s*[0-9A-F]\s*(_?[0-9A-F])*))/i,/^(?:{REAL_NUMBER})/i,/^(?:([0-9]))/i,/^(?:\$\$)/i,/^(?:\$L)/i,/^(?:\$N)/i,/^(?:\$P)/i,/^(?:\$R)/i,/^(?:\$T)/i,/^(?:\$')/i,/^(?:\$')/i,/^(?:\$)/i,/^(?:{LETTER})/i,/^(?:#)/i,/^(?:%)/i,/^(?:')/i,/^(?:")/i,/^(?:\+)/i,/^(?:-)/i,/^(?:_)/i,/^(?:\))/i,/^(?:\()/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?::=)/i,/^(?::)/i,/^(?:\.\.)/i,/^(?:([ -~^$^"^']))/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = fcl;
exports.Parser = fcl.Parser;
exports.parse = function () { return fcl.parse.apply(fcl, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}