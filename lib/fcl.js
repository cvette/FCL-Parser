/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var fcl = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"library":3,"library_repetition0":4,"library_repetition1":5,"EOF":6,"function_block_declaration":7,"FUNCTION_BLOCK":8,"ID":9,"function_block_declaration_repetition0":10,"function_block_declaration_repetition1":11,"function_block_body":12,"END_FUNCTION_BLOCK":13,"fb_io_var_declarations":14,"input_declarations":15,"output_declarations":16,"other_var_declarations":17,"var_declarations":18,"function_block_body_repetition0":19,"function_block_body_repetition1":20,"function_block_body_repetition2":21,"function_block_body_repetition3":22,"fuzzify_block":23,"FUZZIFY":24,"fuzzify_block_repetition0":25,"END_FUZZIFY":26,"defuzzify_block":27,"DEFUZZIFY":28,"defuzzify_block_option0":29,"defuzzify_block_repetition0":30,"defuzzification_method":31,"default_value":32,"END_DEFUZZIFY":33,"METHOD":34,"COLON":35,"defuzzification_method_group0":36,"SEMICOLON":37,"defuzzifcation_method_option":38,"DEFAULT":39,"ASSIGNMENT":40,"default_value_group0":41,"rule_block":42,"RULEBLOCK":43,"operator_definition":44,"rule_block_option0":45,"accumulation_method":46,"rule_block_repetition0":47,"END_RULEBLOCK":48,"operator_definition_option0":49,"operator_definition_option1":50,"operator_definition_disjunction":51,"OR":52,"operator_definition_disjunction_group0":53,"operator_definition_conjunction":54,"AND":55,"operator_definition_conjunction_group0":56,"option_block":57,"OPTION":58,"END_OPTION":59,"linguistic_term":60,"TERM":61,"membership_function":62,"membership_function_group0":63,"singleton":64,"numeric_literal":65,"points":66,"points_repetition0":67,"point":68,"LPARA":69,"point_group0":70,"COMMA":71,"RPARA":72,"defuzzification_method_option":73,"CoG":74,"CoGS":75,"CoA":76,"LM":77,"RM":78,"range":79,"RANGE":80,"RANGEDOT":81,"activation_method":82,"ACT":83,"activation_method_group0":84,"ACCU":85,"accumulation_method_group0":86,"rule":87,"RULE":88,"integer_literal":89,"IF":90,"condition":91,"THEN":92,"conclusion":93,"rule_option0":94,"x":95,"condition_repetition0":96,"condition_concat":97,"x_option0":98,"x_group0":99,"subcondition":100,"subcondition_equation":101,"IS":102,"subcondition_equation_option0":103,"conclusion_equation":104,"conclusion_repetition0":105,"conclusion_repetition1":106,"conclusion_concat":107,"weighting_factor":108,"WITH":109,"weighting_factor_group0":110,"constant":111,"boolean_literal":112,"real_literal":113,"signed_integer":114,"signed_integer_group0":115,"integer":116,"integer_type_name":117,"HASH":118,"integer_value":119,"BINARY_INTEGER":120,"OCTAL_INTEGER":121,"HEX_INTEGER":122,"DIGIT":123,"integer_repetition0":124,"real_type_name":125,"REAL_NUMBER":126,"real_literal_option0":127,"real_literal_option1":128,"exponent":129,"E":130,"exponent_option0":131,"TRUE":132,"FALSE":133,"elementary_type_name":134,"numeric_type_name":135,"signed_integer_type_name":136,"unsigned_integer_type_name":137,"INT":138,"REAL":139,"bit_identifier":140,"BOOL":141,"simple_spec_init":142,"simple_spec_init_option0":143,"simple_spec_init_value":144,"VAR_INPUT":145,"input_declarations_option0":146,"input_declaration":147,"input_declarations_repetition0":148,"END_VAR":149,"name_list":150,"input_declaration_group0":151,"edge_declaration":152,"edge_declaration_group0":153,"name_list_repetition0":154,"name_list_concat":155,"VAR_OUTPUT":156,"output_declarations_option0":157,"var_init_decl":158,"output_declarations_repetition0":159,"input_output_declarations":160,"VAR_IN_OUT":161,"var_declaration":162,"input_output_declarations_repetition0":163,"VAR":164,"var_declarations_option0":165,"var_declarations_repetition0":166,"data_type_declarations":167,"NC":168,"MAX":169,"ASUM":170,"BSUM":171,"MIN":172,"PROD":173,"BDIF":174,"NSUM":175,"NOT":176,"PLUS":177,"DASH":178,"integer_repetition0_option0":179,"LDASH":180,"exponent_option0_group0":181,"input_declarations_option0_group0":182,"RETAIN":183,"NON_RETAIN":184,"R_EDGE":185,"F_EDGE":186,"output_declarations_option0_group0":187,"CONSTANT":188,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"FUNCTION_BLOCK",9:"ID",13:"END_FUNCTION_BLOCK",24:"FUZZIFY",26:"END_FUZZIFY",28:"DEFUZZIFY",33:"END_DEFUZZIFY",34:"METHOD",35:"COLON",37:"SEMICOLON",38:"defuzzifcation_method_option",39:"DEFAULT",40:"ASSIGNMENT",43:"RULEBLOCK",48:"END_RULEBLOCK",52:"OR",55:"AND",58:"OPTION",59:"END_OPTION",61:"TERM",69:"LPARA",71:"COMMA",72:"RPARA",74:"CoG",75:"CoGS",76:"CoA",77:"LM",78:"RM",80:"RANGE",81:"RANGEDOT",83:"ACT",85:"ACCU",88:"RULE",90:"IF",92:"THEN",102:"IS",109:"WITH",118:"HASH",120:"BINARY_INTEGER",121:"OCTAL_INTEGER",122:"HEX_INTEGER",123:"DIGIT",126:"REAL_NUMBER",130:"E",132:"TRUE",133:"FALSE",137:"unsigned_integer_type_name",138:"INT",139:"REAL",141:"BOOL",145:"VAR_INPUT",149:"END_VAR",156:"VAR_OUTPUT",161:"VAR_IN_OUT",164:"VAR",167:"data_type_declarations",168:"NC",169:"MAX",170:"ASUM",171:"BSUM",172:"MIN",173:"PROD",174:"BDIF",175:"NSUM",176:"NOT",177:"PLUS",178:"DASH",180:"LDASH",183:"RETAIN",184:"NON_RETAIN",185:"R_EDGE",186:"F_EDGE",188:"CONSTANT"},
productions_: [0,[3,3],[7,6],[14,1],[14,1],[17,1],[12,4],[23,4],[27,7],[31,4],[31,4],[32,4],[42,7],[44,3],[51,3],[54,3],[57,2],[60,5],[62,1],[64,1],[64,1],[66,1],[68,5],[73,1],[73,1],[73,1],[73,1],[73,1],[79,7],[82,4],[46,4],[87,9],[91,2],[97,2],[97,2],[95,2],[100,1],[100,1],[101,4],[93,2],[93,2],[104,3],[107,2],[107,2],[108,2],[111,1],[111,1],[65,1],[65,1],[114,2],[114,1],[89,3],[89,1],[119,1],[119,1],[119,1],[119,1],[116,2],[113,4],[113,2],[129,3],[112,1],[112,1],[134,1],[135,1],[135,1],[117,1],[117,1],[136,1],[125,1],[140,1],[142,2],[144,2],[15,6],[147,3],[152,2],[150,2],[155,2],[16,6],[160,5],[162,3],[158,3],[18,6],[4,0],[4,2],[5,0],[5,2],[10,0],[10,2],[11,0],[11,2],[19,0],[19,2],[20,0],[20,2],[21,0],[21,2],[22,0],[22,2],[25,0],[25,2],[29,0],[29,1],[30,0],[30,2],[36,1],[36,1],[36,1],[36,1],[36,1],[41,1],[41,1],[45,0],[45,1],[47,0],[47,2],[49,0],[49,1],[50,0],[50,1],[53,1],[53,1],[53,1],[56,1],[56,1],[56,1],[63,1],[63,1],[67,0],[67,2],[70,1],[70,1],[84,1],[84,1],[86,1],[86,1],[86,1],[94,0],[94,1],[96,0],[96,2],[98,0],[98,1],[99,1],[99,3],[103,0],[103,1],[105,0],[105,2],[106,0],[106,2],[110,1],[110,1],[115,1],[115,1],[179,0],[179,1],[124,0],[124,3],[127,0],[127,1],[128,0],[128,1],[181,1],[181,1],[131,0],[131,1],[143,0],[143,1],[182,1],[182,1],[146,0],[146,1],[148,0],[148,3],[151,1],[151,1],[153,1],[153,1],[154,0],[154,2],[187,1],[187,1],[157,0],[157,1],[159,0],[159,3],[163,0],[163,3],[165,0],[165,1],[166,0],[166,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return new Library(_$[$0-2].first_line, _$[$0-2].first_column, {}, [].concat($$[$0-2]).concat($$[$0-1])) 
break;
case 2:this.$ = new FunctionBlock(_$[$0-5].first_line, _$[$0-5].first_column, {name: $$[$0-4]}, [].concat($$[$0-3]).concat($$[$0-2]).concat($$[$0-1]));
break;
case 3:this.$ = $$[$0];
break;
case 4:this.$ = $$[$0];
break;
case 5:this.$ = $$[$0];
break;
case 6:this.$ = new FunctionBlockBody(_$[$0-3].first_line, _$[$0-3].first_column, {}, [].concat($$[$0-3]).concat($$[$0-2]).concat($$[$0-1]).concat($$[$0]));
break;
case 7:this.$ = new FuzzifyBlock(_$[$0-2].first_line, _$[$0-2].first_column, {variable: $$[$0-2]}, [].concat($$[$0-1]));
break;
case 8:this.$ = new DefuzzifyBlock(_$[$0-6].first_line, _$[$0-6].first_column, {variable: $$[$0-5]}, [].concat($$[$0-4]).concat($$[$0-3]).concat($$[$0-2]).concat($$[$0-1]));
break;
case 9:this.$ = new DefuzzificationMethod(_$[$0-3].first_line, _$[$0-3].first_column, {method: $$[$0-1]}, []);
break;
case 10:this.$ = new DefuzzificationMethod(_$[$0-3].first_line, _$[$0-3].first_column, {method: $$[$0-1]}, []);
break;
case 11:this.$ = new DefaultValue(_$[$0-3].first_line, _$[$0-3].first_column, {value: $$[$0-1]}, []);
break;
case 12:this.$ = new RuleBlock(_$[$0-6].first_line, _$[$0-6].first_column, {id: $$[$0-5]}, [].concat($$[$0-4]).concat($$[$0-3]).concat($$[$0-2]).concat($$[$0-1]));
break;
case 13:this.$ = new OperatorDefinition(_$[$0-2].first_line, _$[$0-2].first_column, {orMethod: $$[$0-2], andMethod: $$[$0-1]}, []);
break;
case 14:this.$ = $$[$0];
break;
case 15:this.$ = $$[$0];
break;
case 16:this.$ = new OptionBlock(_$[$0-1].first_line, _$[$0-1].first_column, {}, []);
break;
case 17:this.$ = new LinguisticTerm(_$[$0-4].first_line, _$[$0-4].first_column, {name: $$[$0-3]}, [].concat($$[$0-1]));
break;
case 18:this.$ = new MembershipFunction(_$[$0].first_line, _$[$0].first_column, {}, [].concat($$[$0]));
break;
case 19:this.$ = $$[$0];
break;
case 20:this.$ = $$[$0];
break;
case 21:this.$ = $$[$0];
break;
case 22:this.$ = new Point(_$[$0-3].first_line, _$[$0-3].first_column, {x: $$[$0-3], y: $$[$0-1]});
break;
case 23:this.$ = $$[$0];
break;
case 24:this.$ = $$[$0];
break;
case 25:this.$ = $$[$0];
break;
case 26:this.$ = $$[$0];
break;
case 27:this.$ = $$[$0];
break;
case 28:this.$ = new Range(_$[$0-4].first_line, _$[$0-4].first_column, {start: $$[$0-4], end: $$[$0-2]});
break;
case 29:this.$ = new ActivationMethod(_$[$0-3].first_line, _$[$0-3].first_column, {name: $$[$0-1]}, []);
break;
case 30:this.$ = new AccumulationMethod(_$[$0].first_line, _$[$0].first_column, {name: $$[$0-1]}, []);
break;
case 31: this.$ = new Rule(_$[$0-8].first_line, _$[$0-8].first_column, {number: $$[$0-7]}, [].concat($$[$0-4]).concat($$[$0-2]).concat($$[$0-4]).concat($$[$0-1]))
break;
case 32:this.$ = new Condition(_$[$0-1].first_line, _$[$0-1].first_column, {}, [].concat($$[$0-1]).concat($$[$0]));
break;
case 33:this.$ =  new Conjunction(_$[$0-1].first_line, _$[$0-1].first_column, {}, [$$[$0]]);
break;
case 34:this.$ = new Disjunction(_$[$0-1].first_line, _$[$0-1].first_column, {}, [$$[$0]]);
break;
case 35:this.$ = new X(_$[$0-1].first_line, _$[$0-1].first_column, {negation: ($$[$0-1]===undefined)?false:true}, [].concat($$[$0]));
break;
case 36:this.$ = new Subcondition(_$[$0].first_line, _$[$0].first_column, {}, [].concat($$[$0]));
break;
case 37:this.$ = $$[$0];
break;
case 38:this.$ = new Equation(_$[$0-3].first_line, _$[$0-3].first_column, {a: $$[$0-3], b: $$[$0], negatedB: ($$[$0-1]===undefined)?false:true});
break;
case 39:this.$ = new Conclusion(_$[$0-1].first_line, _$[$0-1].first_column, {}, [].concat($$[$0-1]).concat($$[$0]));
break;
case 40:this.$ = new Conclusion(_$[$0-1].first_line, _$[$0-1].first_column, {}, [].concat($$[$0-1]).concat($$[$0]));
break;
case 41:this.$ = new Equation(_$[$0-2].first_line, _$[$0-2].first_column, {a: $$[$0-2], b: $$[$0], negatedB: false});
break;
case 42:this.$ = $$[$0];
break;
case 43:this.$ = $$[$0];
break;
case 44:this.$ = new WeightingFactor(_$[$0-1].first_line, _$[$0-1].first_column, {}, [].concat($$[$0]));;
break;
case 45:this.$ = $$[$0];
break;
case 46:this.$ = $$[$0];
break;
case 47:this.$ = $$[$0];
break;
case 48:this.$ = $$[$0];
break;
case 49:this.$ = ($$[$0-1]==='-')? ($$[$0] * -1) : $$[$0];
break;
case 50:this.$ = $$[$0];
break;
case 51:this.$ = $$[$0-2];
break;
case 52:this.$ = $$[$0];
break;
case 53:this.$ = $$[$0];
break;
case 54:this.$ = new Number(yytext.substr(2).replace('_', ''));
break;
case 55:this.$ = new Number(yytext.substr(2).replace('_', ''));
break;
case 56:this.$ = new Number(yytext.substr(3).replace('_', ''));
break;
case 57:this.$ = new Number(yytext.replace('_', ''));
break;
case 58: ($$[$0] === undefined)? $$[$0-1] : Math.pow($$[$0-1], $$[$0]) 
break;
case 59: ($$[$02] === undefined)? $$[$0-1] : Math.pow($$[$0-1], $$[$0]) 
break;
case 60:this.$ = new Number(yytext);
break;
case 61:this.$ = true;
break;
case 62:this.$ = false;
break;
case 63:this.$ = $$[$0];
break;
case 64:this.$ = $$[$0];
break;
case 65:this.$ = $$[$0];
break;
case 66:this.$ = $$[$0];
break;
case 67:this.$ = $$[$0];
break;
case 68:this.$ = $$[$0];
break;
case 69:this.$ = $$[$0];
break;
case 70:this.$ = $$[$0];
break;
case 71:this.$ = new SimpleSpecInit(_$[$0-1].first_line, _$[$0-1].first_column, {type: $$[$0-1], constant: $$[$0]}, []);
break;
case 72:this.$ = $$[$0];
break;
case 73:this.$ = new InputDeclarations(_$[$0-5].first_line, _$[$0-5].first_column, {retain: ($$[$0-4] === 'RETAIN')?true:false}, [].concat($$[$0-1]).concat($$[$0-3]));
break;
case 74:this.$ = new InputDeclaration(_$[$0-2].first_line, _$[$0-2].first_column, {names: $$[$0-2]}, [].concat($$[$0]));
break;
case 75:this.$ = new EdgeDeclaration(_$[$0-1].first_line, _$[$0-1].first_column, {risingEdge: ($$[$0] === 'R_EDGE')?true:false}, []);
break;
case 76:this.$ = $$[$0].concat($$[$0-1]);
break;
case 77:this.$ = $$[$0];
break;
case 78:this.$ = new OutputDeclarations(_$[$0-5].first_line, _$[$0-5].first_column, {}, [].concat($$[$0-1]).concat($$[$0-3]));
break;
case 79:this.$ = new InputOutputDeclarations(_$[$0-4].first_line, _$[$0-4].first_column, {}, [].concat($$[$0-2]).concat($$[$0-3]));
break;
case 80:this.$ = new VarDeclaration(_$[$0-2].first_line, _$[$0-2].first_column, {names: $$[$0-2], type: $$[$0]}, []);
break;
case 81:this.$ = new VarInitDecl(_$[$0-2].first_line, _$[$0-2].first_column, {names: $$[$0-2]}, [].concat($$[$0]));
break;
case 82:this.$ = new VarDeclarations(_$[$0-5].first_line, _$[$0-5].first_column, {constant:(constant!==undefined)?true:false}, [].concat($$[$0-1]).concat($$[$0-3]));
break;
case 83:this.$ = [];
break;
case 84:$$[$0-1].push($$[$0]);
break;
case 85:this.$ = [];
break;
case 86:$$[$0-1].push($$[$0]);
break;
case 87:this.$ = [];
break;
case 88:$$[$0-1].push($$[$0]);
break;
case 89:this.$ = [];
break;
case 90:$$[$0-1].push($$[$0]);
break;
case 91:this.$ = [];
break;
case 92:$$[$0-1].push($$[$0]);
break;
case 93:this.$ = [];
break;
case 94:$$[$0-1].push($$[$0]);
break;
case 95:this.$ = [];
break;
case 96:$$[$0-1].push($$[$0]);
break;
case 97:this.$ = [];
break;
case 98:$$[$0-1].push($$[$0]);
break;
case 99:this.$ = [];
break;
case 100:$$[$0-1].push($$[$0]);
break;
case 103:this.$ = [];
break;
case 104:$$[$0-1].push($$[$0]);
break;
case 114:this.$ = [];
break;
case 115:$$[$0-1].push($$[$0]);
break;
case 128:this.$ = [];
break;
case 129:$$[$0-1].push($$[$0]);
break;
case 139:this.$ = [];
break;
case 140:$$[$0-1].push($$[$0]);
break;
case 147:this.$ = [];
break;
case 148:$$[$0-1].push($$[$0]);
break;
case 149:this.$ = [];
break;
case 150:$$[$0-1].push($$[$0]);
break;
case 157:this.$ = [];
break;
case 158:$$[$0-2].push($$[$0-1]);
break;
case 173:this.$ = [];
break;
case 174:$$[$0-2].push($$[$0-1]);
break;
case 179:this.$ = [];
break;
case 180:$$[$0-1].push($$[$0]);
break;
case 185:this.$ = [];
break;
case 186:$$[$0-2].push($$[$0-1]);
break;
case 187:this.$ = [];
break;
case 188:$$[$0-2].push($$[$0-1]);
break;
case 191:this.$ = [];
break;
case 192:$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,6:[2,83],8:[2,83],167:[2,83]},{1:[3]},{5:3,6:[2,85],8:[2,85],167:[1,4]},{6:[1,5],7:6,8:[1,7]},{6:[2,84],8:[2,84],167:[2,84]},{1:[2,1]},{6:[2,86],8:[2,86]},{9:[1,8]},{10:9,13:[2,87],24:[2,87],28:[2,87],43:[2,87],58:[2,87],145:[2,87],156:[2,87],164:[2,87]},{11:10,13:[2,89],14:11,15:12,16:13,24:[2,89],28:[2,89],43:[2,89],58:[2,89],145:[1,14],156:[1,15],164:[2,89]},{12:16,13:[2,91],17:17,18:19,19:18,24:[2,91],28:[2,91],43:[2,91],58:[2,91],164:[1,20]},{13:[2,88],24:[2,88],28:[2,88],43:[2,88],58:[2,88],145:[2,88],156:[2,88],164:[2,88]},{13:[2,3],24:[2,3],28:[2,3],43:[2,3],58:[2,3],145:[2,3],156:[2,3],164:[2,3]},{13:[2,4],24:[2,4],28:[2,4],43:[2,4],58:[2,4],145:[2,4],156:[2,4],164:[2,4]},{9:[2,171],146:21,182:22,183:[1,23],184:[1,24]},{9:[2,183],157:25,183:[1,27],184:[1,28],187:26},{13:[1,29]},{13:[2,90],24:[2,90],28:[2,90],43:[2,90],58:[2,90],164:[2,90]},{13:[2,93],20:30,23:31,24:[1,32],28:[2,93],43:[2,93],58:[2,93]},{13:[2,5],24:[2,5],28:[2,5],43:[2,5],58:[2,5],164:[2,5]},{9:[2,189],165:33,188:[1,34]},{9:[1,37],147:35,150:36},{9:[2,172]},{9:[2,169]},{9:[2,170]},{9:[1,37],150:39,158:38},{9:[2,184]},{9:[2,181]},{9:[2,182]},{6:[2,2],8:[2,2]},{13:[2,95],21:40,27:41,28:[1,42],43:[2,95],58:[2,95]},{13:[2,92],24:[2,92],28:[2,92],43:[2,92],58:[2,92]},{9:[1,43]},{9:[1,37],150:39,158:44},{9:[2,190]},{37:[1,45]},{35:[1,46]},{35:[2,179],71:[2,179],154:47},{37:[1,48]},{35:[1,49]},{13:[2,97],22:50,42:51,43:[1,52],58:[2,97]},{13:[2,94],28:[2,94],43:[2,94],58:[2,94]},{9:[1,53]},{25:54,26:[2,99],61:[2,99]},{37:[1,55]},{9:[2,173],148:56,149:[2,173]},{117:63,125:64,134:61,135:62,136:65,137:[1,66],138:[1,68],139:[1,67],141:[1,60],142:59,151:57,152:58},{35:[2,76],71:[1,70],155:69},{9:[2,185],149:[2,185],159:71},{117:63,125:64,134:61,135:62,136:65,137:[1,66],138:[1,68],139:[1,67],142:72},{13:[2,6],57:73,58:[1,74]},{13:[2,96],43:[2,96],58:[2,96]},{9:[1,75]},{29:76,34:[2,101],61:[2,101],79:77,80:[1,78]},{26:[1,79],60:80,61:[1,81]},{9:[2,191],149:[2,191],166:82},{9:[1,37],147:84,149:[1,83],150:36},{37:[2,74]},{37:[2,175]},{37:[2,176]},{153:85,185:[1,86],186:[1,87]},{37:[2,167],40:[1,90],143:88,144:89},{37:[2,63],40:[2,63]},{37:[2,64],40:[2,64]},{37:[2,65],40:[2,65]},{37:[2,66],40:[2,66],118:[2,66]},{37:[2,67],40:[2,67],118:[2,67]},{37:[2,69],40:[2,69],118:[2,69]},{37:[2,68],40:[2,68],118:[2,68]},{35:[2,180],71:[2,180]},{9:[1,91]},{9:[1,37],149:[1,92],150:39,158:93},{37:[2,81]},{13:[2,98],58:[2,98]},{59:[1,94]},{37:[2,116],44:95,49:96,51:97,52:[1,98],55:[2,116]},{30:99,34:[2,103],61:[2,103]},{34:[2,102],61:[2,102]},{69:[1,100]},{13:[2,7],24:[2,7],28:[2,7],43:[2,7],58:[2,7]},{26:[2,100],61:[2,100]},{9:[1,101]},{9:[1,37],149:[1,102],150:39,158:103},{13:[2,73],24:[2,73],28:[2,73],43:[2,73],58:[2,73],145:[2,73],156:[2,73],164:[2,73]},{37:[1,104]},{37:[2,75]},{37:[2,177]},{37:[2,178]},{37:[2,71]},{37:[2,168]},{65:106,89:108,111:105,112:107,113:109,114:116,115:120,116:121,117:112,119:113,120:[1,117],121:[1,118],122:[1,119],123:[1,124],125:114,126:[1,115],132:[1,110],133:[1,111],136:65,137:[1,66],138:[1,68],139:[1,67],177:[1,122],178:[1,123]},{35:[2,77],71:[2,77]},{13:[2,78],24:[2,78],28:[2,78],43:[2,78],58:[2,78],145:[2,78],156:[2,78],164:[2,78]},{37:[1,125]},{13:[2,16],58:[2,16]},{45:126,82:127,83:[1,128],85:[2,112]},{37:[2,118],50:129,54:130,55:[1,131]},{37:[2,117],55:[2,117]},{35:[1,132]},{31:133,34:[1,135],60:134,61:[1,81]},{65:136,89:108,113:109,114:116,115:120,116:121,117:112,119:113,120:[1,117],121:[1,118],122:[1,119],123:[1,124],125:114,126:[1,115],136:65,137:[1,66],138:[1,68],139:[1,67],177:[1,122],178:[1,123]},{40:[1,137]},{13:[2,82],24:[2,82],28:[2,82],43:[2,82],58:[2,82],164:[2,82]},{37:[1,138]},{9:[2,174],149:[2,174]},{37:[2,72]},{37:[2,45]},{37:[2,46]},{37:[2,47],71:[2,47],72:[2,47],81:[2,47]},{37:[2,48],71:[2,48],72:[2,48],81:[2,48]},{37:[2,61]},{37:[2,62]},{118:[1,139]},{35:[2,52],37:[2,52],71:[2,52],72:[2,52],81:[2,52]},{118:[1,140]},{37:[2,161],71:[2,161],72:[2,161],81:[2,161],128:141,129:142,130:[1,143]},{35:[2,53],37:[2,53],71:[2,53],72:[2,53],81:[2,53]},{35:[2,54],37:[2,54],71:[2,54],72:[2,54],81:[2,54]},{35:[2,55],37:[2,55],71:[2,55],72:[2,55],81:[2,55]},{35:[2,56],37:[2,56],71:[2,56],72:[2,56],81:[2,56]},{116:144,123:[1,124]},{35:[2,50],37:[2,50],71:[2,50],72:[2,50],81:[2,50]},{123:[2,153]},{123:[2,154]},{35:[2,157],37:[2,157],71:[2,157],72:[2,157],81:[2,157],123:[2,157],124:145,180:[2,157]},{9:[2,186],149:[2,186]},{46:146,85:[1,147]},{85:[2,113]},{35:[1,148]},{37:[1,149]},{37:[2,119]},{35:[1,150]},{53:151,169:[1,152],170:[1,153],171:[1,154]},{32:155,39:[1,156]},{34:[2,104],61:[2,104]},{35:[1,157]},{81:[1,158]},{9:[1,164],37:[2,128],62:159,63:160,64:161,65:163,66:162,67:165,69:[2,128],89:108,113:109,114:116,115:120,116:121,117:112,119:113,120:[1,117],121:[1,118],122:[1,119],123:[1,124],125:114,126:[1,115],136:65,137:[1,66],138:[1,68],139:[1,67],177:[1,122],178:[1,123]},{9:[2,192],149:[2,192]},{114:116,115:120,116:121,119:166,120:[1,117],121:[1,118],122:[1,119],123:[1,124],177:[1,122],178:[1,123]},{126:[1,167]},{37:[2,59],71:[2,59],72:[2,59],81:[2,59]},{37:[2,162],71:[2,162],72:[2,162],81:[2,162]},{123:[2,165],131:168,177:[1,170],178:[1,171],181:169},{35:[2,49],37:[2,49],71:[2,49],72:[2,49],81:[2,49]},{35:[2,57],37:[2,57],71:[2,57],72:[2,57],81:[2,57],123:[2,155],179:172,180:[1,173]},{47:174,48:[2,114],88:[2,114]},{35:[1,175]},{84:176,172:[1,178],173:[1,177]},{83:[2,13],85:[2,13]},{56:179,172:[1,180],173:[1,181],174:[1,182]},{37:[2,14],55:[2,14]},{37:[2,120],55:[2,120]},{37:[2,121],55:[2,121]},{37:[2,122],55:[2,122]},{33:[1,183]},{40:[1,184]},{36:185,38:[1,186],74:[1,187],75:[1,188],76:[1,189],77:[1,190],78:[1,191]},{65:192,89:108,113:109,114:116,115:120,116:121,117:112,119:113,120:[1,117],121:[1,118],122:[1,119],123:[1,124],125:114,126:[1,115],136:65,137:[1,66],138:[1,68],139:[1,67],177:[1,122],178:[1,123]},{37:[1,193]},{37:[2,18]},{37:[2,126]},{37:[2,127]},{37:[2,19]},{37:[2,20]},{37:[2,21],68:194,69:[1,195]},{35:[2,51],37:[2,51],71:[2,51],72:[2,51],81:[2,51]},{37:[2,159],71:[2,159],72:[2,159],81:[2,159],127:196,129:197,130:[1,143]},{116:198,123:[1,124]},{123:[2,166]},{123:[2,163]},{123:[2,164]},{123:[1,199]},{123:[2,156]},{48:[1,200],87:201,88:[1,202]},{86:203,169:[1,204],171:[1,205],175:[1,206]},{37:[1,207]},{37:[2,132]},{37:[2,133]},{37:[2,15]},{37:[2,123]},{37:[2,124]},{37:[2,125]},{13:[2,8],28:[2,8],43:[2,8],58:[2,8]},{41:208,65:209,89:108,113:109,114:116,115:120,116:121,117:112,119:113,120:[1,117],121:[1,118],122:[1,119],123:[1,124],125:114,126:[1,115],136:65,137:[1,66],138:[1,68],139:[1,67],168:[1,210],177:[1,122],178:[1,123]},{37:[1,211]},{37:[1,212]},{37:[2,105]},{37:[2,106]},{37:[2,107]},{37:[2,108]},{37:[2,109]},{72:[1,213]},{26:[2,17],34:[2,17],61:[2,17]},{37:[2,129],69:[2,129]},{9:[1,216],65:215,70:214,89:108,113:109,114:116,115:120,116:121,117:112,119:113,120:[1,117],121:[1,118],122:[1,119],123:[1,124],125:114,126:[1,115],136:65,137:[1,66],138:[1,68],139:[1,67],177:[1,122],178:[1,123]},{37:[2,58],71:[2,58],72:[2,58],81:[2,58]},{37:[2,160],71:[2,160],72:[2,160],81:[2,160]},{37:[2,60],71:[2,60],72:[2,60],81:[2,60]},{35:[2,158],37:[2,158],71:[2,158],72:[2,158],81:[2,158],123:[2,158],180:[2,158]},{13:[2,12],43:[2,12],58:[2,12]},{48:[2,115],88:[2,115]},{89:217,114:116,115:120,116:121,117:112,119:113,120:[1,117],121:[1,118],122:[1,119],123:[1,124],136:65,137:[1,66],138:[1,68],177:[1,122],178:[1,123]},{37:[1,218]},{37:[2,134]},{37:[2,135]},{37:[2,136]},{85:[2,29]},{37:[1,219]},{37:[2,110]},{37:[2,111]},{39:[2,9]},{39:[2,10]},{37:[1,220]},{71:[1,221]},{71:[2,130]},{71:[2,131]},{35:[1,222]},{48:[2,30],88:[2,30]},{33:[2,11]},{34:[2,28],61:[2,28]},{65:223,89:108,113:109,114:116,115:120,116:121,117:112,119:113,120:[1,117],121:[1,118],122:[1,119],123:[1,124],125:114,126:[1,115],136:65,137:[1,66],138:[1,68],139:[1,67],177:[1,122],178:[1,123]},{90:[1,224]},{72:[1,225]},{9:[2,141],69:[2,141],91:226,95:227,98:228,176:[1,229]},{37:[2,22],69:[2,22]},{92:[1,230]},{52:[2,139],55:[2,139],72:[2,139],92:[2,139],96:231},{9:[1,236],69:[1,234],99:232,100:233,101:235},{9:[2,142],69:[2,142]},{9:[1,239],93:237,104:238},{52:[1,242],55:[1,241],72:[2,32],92:[2,32],97:240},{52:[2,35],55:[2,35],72:[2,35],92:[2,35]},{52:[2,143],55:[2,143],72:[2,143],92:[2,143]},{9:[2,141],69:[2,141],91:243,95:227,98:228,176:[1,229]},{52:[2,36],55:[2,36],72:[2,36],92:[2,36]},{52:[2,37],55:[2,37],72:[2,37],92:[2,37],102:[1,244]},{37:[2,137],94:245,108:246,109:[1,247]},{37:[2,147],71:[2,147],105:248,109:[2,147]},{37:[2,149],71:[2,149],102:[1,250],106:249,109:[2,149]},{52:[2,140],55:[2,140],72:[2,140],92:[2,140]},{9:[2,141],69:[2,141],95:251,98:228,176:[1,229]},{9:[2,141],69:[2,141],95:252,98:228,176:[1,229]},{72:[1,253]},{9:[2,145],103:254,176:[1,255]},{37:[1,256]},{37:[2,138]},{9:[1,258],65:259,89:108,110:257,113:109,114:116,115:120,116:121,117:112,119:113,120:[1,117],121:[1,118],122:[1,119],123:[1,124],125:114,126:[1,115],136:65,137:[1,66],138:[1,68],139:[1,67],177:[1,122],178:[1,123]},{37:[2,39],71:[1,261],107:260,109:[2,39]},{37:[2,40],71:[1,261],107:262,109:[2,40]},{9:[1,263]},{52:[2,33],55:[2,33],72:[2,33],92:[2,33]},{52:[2,34],55:[2,34],72:[2,34],92:[2,34]},{52:[2,144],55:[2,144],72:[2,144],92:[2,144]},{9:[1,264]},{9:[2,146]},{48:[2,31],88:[2,31]},{37:[2,44]},{37:[2,151]},{37:[2,152]},{37:[2,148],71:[2,148],109:[2,148]},{9:[1,266],104:265},{37:[2,150],71:[2,150],109:[2,150]},{37:[2,41],71:[2,41],109:[2,41]},{52:[2,38],55:[2,38],72:[2,38],92:[2,38]},{37:[2,42],71:[2,42],109:[2,42]},{37:[2,43],71:[2,43],102:[1,250],109:[2,43]}],
defaultActions: {5:[2,1],22:[2,172],23:[2,169],24:[2,170],26:[2,184],27:[2,181],28:[2,182],34:[2,190],57:[2,74],58:[2,175],59:[2,176],72:[2,81],85:[2,75],86:[2,177],87:[2,178],88:[2,71],89:[2,168],105:[2,72],106:[2,45],107:[2,46],110:[2,61],111:[2,62],122:[2,153],123:[2,154],127:[2,113],130:[2,119],160:[2,18],161:[2,126],162:[2,127],163:[2,19],164:[2,20],169:[2,166],170:[2,163],171:[2,164],173:[2,156],177:[2,132],178:[2,133],179:[2,15],180:[2,123],181:[2,124],182:[2,125],187:[2,105],188:[2,106],189:[2,107],190:[2,108],191:[2,109],204:[2,134],205:[2,135],206:[2,136],207:[2,29],209:[2,110],210:[2,111],211:[2,9],212:[2,10],215:[2,130],216:[2,131],219:[2,11],246:[2,138],255:[2,146],257:[2,44],258:[2,151],259:[2,152]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

var ast = require('fcl_ast'),

Library                     = ast.Library
InputDeclarations           = ast.InputDeclarations
InputDeclaration            = ast.InputDeclaration
OutputDeclarations          = ast.OutputDeclarations
VarDeclarations             = ast.VarDeclarations
InputOutputDeclarations     = ast.InputOutputDeclarations
SimpleSpecInit              = ast.SimpleSpecInit
FunctionBlock               = ast.FunctionBlock
FunctionBlockBody           = ast.FunctionBlockBody
FuzzifyBlock                = ast.FuzzifyBlock
DefuzzifyBlock              = ast.DefuzzifyBlock
RuleBlock                   = ast.RuleBlock
OptionBlock                 = ast.OptionBlock
LinguisticTerm              = ast.LinguisticTerm
MembershipFunction          = ast.MembershipFunction
Point                       = ast.Point
Rule                        = ast.Rule
Range                       = ast.Range
WeightingFactor             = ast.WeightingFactor
OperatorDefinition          = ast.OperatorDefinition
ActivationMethod            = ast.ActivationMethod
AccumulationMethod          = ast.AccumulationMethod
DefuzzificationMethod       = ast.DefuzzificationMethod
DefaultValue                = ast.DefaultValue
Condition                   = ast.Condition
Conjunction                 = ast.Conjunction
Disjunction                 = ast.Disjunction
Conclusion                  = ast.Conclusion
X                           = ast.X
Subcondition                = ast.Subcondition
Equation                    = ast.Equation
EdgeDeclaration             = ast.EdgeDeclaration
WeightingFactor             = ast.WeightingFactor
SimpleSpecInit              = ast.SimpleSpecInit
VarDeclaration              = ast.VarDeclaration
VarInitDecl                 = ast.VarInitDecl

/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:return 85
break;
case 2:return 83
break;
case 3:return 55
break;
case 4:return 170
break;
case 5:return 174
break;
case 6:return 171
break;
case 7:return 141
break;
case 8:return 76
break;
case 9:return 74
break;
case 10:return 75
break;
case 11:return 188
break;
case 12:return 39
break;
case 13:return 28
break;
case 14:return 33
break;
case 15:return 13
break;
case 16:return 26
break;
case 17:return 'END_OPTIONS'
break;
case 18:return 48
break;
case 19:return 149
break;
case 20:return 'END_TYPE'
break;
case 21:return 8
break;
case 22:return 24
break;
case 23:return 90
break;
case 24:return 138
break;
case 25:return 102
break;
case 26:return 77
break;
case 27:return 34
break;
case 28:return 169
break;
case 29:return 172
break;
case 30:return 168
break;
case 31:return 176
break;
case 32:return 184
break;
case 33:return 175
break;
case 34:return 'OPTIONS'
break;
case 35:return 52
break;
case 36:return 173
break;
case 37:return 80
break;
case 38:return 139
break;
case 39:return 183
break;
case 40:return 78
break;
case 41:return 43
break;
case 42:return 88
break;
case 43:return 61
break;
case 44:return 92
break;
case 45:return 156
break;
case 46:return 145
break;
case 47:return 161
break;
case 48:return 164
break;
case 49:return 109
break;
case 50:return 133
break;
case 51:return 132
break;
case 52:return 9
break;
case 53:return 120
break;
case 54:return 121
break;
case 55:return 122
break;
case 56:return 126
break;
case 57:return 123
break;
case 58:return 'LETTER'
break;
case 59:return 118
break;
case 60:return 177
break;
case 61:return 178
break;
case 62:return 180
break;
case 63:return 72
break;
case 64:return 69
break;
case 65:return 37
break;
case 66:return 71
break;
case 67:return 40
break;
case 68:return 35
break;
case 69:return 'DOT'
break;
case 70:return 81
break;
case 71:return 6
break;
case 72:return 'INVALID'
break;
case 73:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:ACCU)/i,/^(?:ACT)/i,/^(?:AND)/i,/^(?:ASUM)/i,/^(?:BDIF)/i,/^(?:BSUM)/i,/^(?:BOOL)/i,/^(?:CoA)/i,/^(?:CoG)/i,/^(?:CoGS)/i,/^(?:CONSTANT)/i,/^(?:DEFAULT)/i,/^(?:DEFUZZIFY)/i,/^(?:END_DEFUZZIFY)/i,/^(?:END_FUNCTION_BLOCK)/i,/^(?:END_FUZZIFY)/i,/^(?:END_OPTIONS)/i,/^(?:END_RULEBLOCK)/i,/^(?:END_VAR)/i,/^(?:END_TYPE)/i,/^(?:FUNCTION_BLOCK)/i,/^(?:FUZZIFY)/i,/^(?:IF)/i,/^(?:INT)/i,/^(?:IS)/i,/^(?:LM)/i,/^(?:METHOD)/i,/^(?:MAX)/i,/^(?:MIN)/i,/^(?:NC)/i,/^(?:NOT)/i,/^(?:NON_RETAIN)/i,/^(?:NSUM)/i,/^(?:OPTIONS)/i,/^(?:OR)/i,/^(?:PROD)/i,/^(?:RANGE)/i,/^(?:REAL)/i,/^(?:RETAIN)/i,/^(?:RM)/i,/^(?:RULEBLOCK)/i,/^(?:RULE)/i,/^(?:TERM)/i,/^(?:THEN)/i,/^(?:VAR_OUTPUT)/i,/^(?:VAR_INPUT)/i,/^(?:VAR_IN_OUT)/i,/^(?:VAR)/i,/^(?:WITH)/i,/^(?:FALSE)/i,/^(?:TRUE)/i,/^(?:(([a-zA-Z]|(_([a-zA-Z]|[0-9])))((_)?([a-zA-Z]|[0-9]))*))/i,/^(?:(2#\s*[0-1]\s*(_?[0-1])*))/i,/^(?:(8#\s*[0-7]\s*(_?[0-7])*))/i,/^(?:(16#\s*[0-9A-F]\s*(_?[0-9A-F])*))/i,/^(?:{REAL_NUMBER})/i,/^(?:([0-9]))/i,/^(?:{LETTER})/i,/^(?:#)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:_)/i,/^(?:\))/i,/^(?:\()/i,/^(?:;)/i,/^(?:,)/i,/^(?::=)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\.\.)/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = fcl;
exports.Parser = fcl.Parser;
exports.parse = function () { return fcl.parse.apply(fcl, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}