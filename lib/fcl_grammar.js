var Generator = require("jison").Generator;

module.exports = {
    "author": "Christian Vette",

    "lex": {
        "rules": [
            ["\\s+", ""],
            ["\\d(_?\\d)*", "return 'INT'"],
            ["2#[0-1](_?[0-1])*", "return 'BIN_INT'"],
            ["8#[0-8](_?[0-8])*", "return 'OCT_INT'"],
            ["16#[a-fA-F0-9](_?[a-fA-F0-9])*", "return 'HEX_INT'"],
            ["ACCU", "return 'ACCU'"],
            ["ACT", "return 'ACT'"],
            ["AND", "return 'AND'"],
            ["ASUM", "return 'ASUM'"],
            ["BDIF", "return 'BDIF'"],
            ["BSUM", "return 'BSUM'"],
            ["COA", "return 'COA'"],
            ["COG", "return 'COG'"],
            ["COGS", "return 'COGS'"],
            ["DEFAULT", "return 'DEFAULT'"],
            ["DEFUZZIFY", "return 'DEFUZZIFY'"],
            ["END_DEFUZZIFY", "return 'END_DEFUZZIFY'"],
            ["END_FUNCTION_BLOCK", "return 'END_FUNCTION_BLOCK'"],
            ["END_FUZZIFY", "return 'END_FUZZIFY'"],
            ["END_OPTIONS", "return 'END_OPTIONS'"],
            ["END_RULEBLOCK", "return 'END_RULEBLOCK'"],
            ["END_VAR", "return 'END_VAR'"],
            ["FUNCTION_BLOCK", "return 'FUNCTION_BLOCK'"],
            ["FUZZIFY", "return 'FUZZIFY'"],
            ["IF", "return 'IF'"],
            ["INT", "return 'INTEGER'"],
            ["IS", "return 'IS'"],
            ["LM", "return 'LM'"],
            ["METHOD", "return 'METHOD'"],
            ["MAX", "return 'MAX'"],
            ["MIN", "return 'MIN'"],
            ["NC", "return 'NC'"],
            ["NOT", "return 'NOT'"],
            ["NSUM", "return 'NSUM'"],
            ["OPTIONS", "return 'OPTIONS'"],
            ["OR", "return 'OR'"],
            ["PROD", "return 'PROD'"],
            ["RANGE", "return 'RANGE'"],
            ["REAL", "return 'REAL'"],
            ["RM", "return 'RM'"],
            ["RULEBLOCK", "return 'RULEBLOCK'"],
            ["RULE", "return 'RULE'"],
            ["TERM", "return 'TERM'"],
            ["THEN", "return 'THEN'"],
            ["VAR_INPUT", "return 'VAR_INPUT'"],
            ["VAR_OUTPUT", "return 'VAR_OUTPUT'"],
            ["VAR", "return 'VAR'"],
            ["WITH", "return 'WITH'"],
            ["STRUCT", "return 'STRUCT'"],
            ["true", "return 'TRUE'"],
            ["false", "return 'FALSE'"],
            ["END_STRUCT", "return 'END_STRUCT'"],
            ["E", "return 'E'"],
            ["[0-9]+(?:\\.[0-9]+)?\\b", "return 'NUMBER'"],
            ["(([a-zA-Z])|(_([a-zA-Z]|\\d)))(_?([a-zA-Z]|\\d))*", "return 'ID'"],
            ["\\+", "return 'PLUS'"],
            ["\\-", "return 'MINUS'"],
            ["\\(", "return 'OPEN_P'"],
            ["\\)", "return 'CLOSE_P'"],
            [";", "return 'SEMICOLON'"],
            [",", "return 'COLON'"],
            [":=", "return 'ASSIGN'"],
            [":", "return 'ASSIGN_TYPE'"],
            ["\\.\\.", "return 'DOUBLE_DOT'"],
            ["\\.", "return 'DOT'"],
            ["$", "return 'EOF'"],
            [".", "return 'INVALID'"]
        ]
    },
    "start": "program",
    "ebnf": {
        "program":                          [["function_block_declaration* EOF", "return $1"]],
        "function_block_declaration":       [["FUNCTION_BLOCK function_block_name input_declarations* output_declarations* var_declarations* fuzzify_block* defuzzify_block* rule_block* options_block* END_FUNCTION_BLOCK", "$$ = new yy.FunctionBlock(@1.first_line, @1.first_column, $2, $3, $4, $5, $6, $7, $8);"]],
        "fuzzify_block":                    [["FUZZIFY variable_name linguistic_term* END_FUZZIFY", "$$ = new yy.FuzzifyBlock(@1.first_line, @1.first_column, $2, $3);"]],
        "defuzzify_block":                  [["DEFUZZIFY f_variable_name linguistic_term* defuzzification_method default_value range? END_DEFUZZIFY", "$$ = new yy.DefuzzifyBlock(@1.first_line, @1.first_column, $2, $3, $4, $5, $6);"]],
        "rule_block":                       [["RULEBLOCK rule_block_name operator_definition activation_method? accumulation_method rule* END_RULEBLOCK", "$$ = new yy.RuleBlock(@1.first_line, @1.first_column, $2, $3, $4, $5, $6);"]],
        "options_block":                    [["OPTIONS END_OPTIONS"]],
        "linguistic_term":                  [["TERM term ASSIGN membership_function SEMICOLON", "$$ = new yy.Term(@1.first_line, @1.first_column, $2, $4); "]],
        "membership_function":              [["singleton", "$$ = new yy.MembershipFunction(@1.first_line, @1.first_column, $1)"],
                                                ["points", "$$ = new yy.MembershipFunction(@1.first_line, @1.first_column, $1)"]],
        "points":                           [["points_clause*", "$$ = $1;"]],
        "points_clause":                    [["OPEN_P point CLOSE_P", "$$ = $2"]],
        "point":                            [["singleton COLON numeric_literal", "$$ = new yy.Point(@1.first_line, @1.first_column, $1, $3);"]],
        "singleton":                        [["numeric_literal", "$$ = $1;"], ["variable_name", "$$ = $1;"]],
        "defuzzification_method":           [["METHOD ASSIGN_TYPE defuzzification_method_option SEMICOLON", "$$ = new yy.DefuzzificationMethod(@1.first_line, @1.first_column, $3);"]],
        "defuzzification_method_option":    [["COG", "$$ = 'cog';"], ["COGS", "$$ = 'cogs';"], ["COA", "$$ = 'coa';"], ["LM", "$$ = 'lm';"], ["RM", "$$ = 'rm';"]],
        "default_value":                    [["DEFAULT ASSIGN default_value_options SEMICOLON", "$$ = new yy.DefaultValue(@1.first_line, @1.first_column, $3);"]],
        "default_value_options":            [["numeric_literal", "$$ = $1"], ["NC", "$$ = 'nc';"]],
        "range":                            [["RANGE ASSIGN numeric_literal DOUBLE_DOT numeric_literal", "$$ = new yy.Range(@1.first_line, @1.first_column, $3, $5);"]],
        "operator_definition":              [["OR ASSIGN_TYPE or_options SEMICOLON", "$$ = new yy.OrOperatorDefinition(@1.first_line, @1.first_column, $3);"], ["AND ASSIGN_TYPE and_options SEMICOLON", "$$ = new yy.AndOperatorDefinition(@1.first_line, @1.first_column, $3);"]],
        "or_options":                       [["MAX", "$$ = 'max';"], ["ASUM", "$$ = 'asum';"],["BSUM", "$$ = 'bsum';"]],
        "and_options":                      [["MIN", "$$ = 'min';"],["PROD", "$$ = 'prod';"],["BDIF", "$$ = 'bdif';"]],
        "activation_method":                [["ACT ASSIGN_TYPE activation_method_options SEMICOLON", "$$ = new yy.ActivationMethod(@1.first_line, @1.first_column, $3);"]],
        "activation_method_options":        [["PROD", "$$ = 'prod';"],["MIN", "$$ = 'min';"]],
        "accumulation_method":              [["ACCU ASSIGN_TYPE accumulation_method_options SEMICOLON", "$$ = new yy.AccumulationMethod(@1.first_line, @1.first_column, $3)"]],
        "accumulation_method_options":      [["MAX", "$$ = 'max';"],["BSUM", "$$ = 'bsum';"], ["NSUM", "$$ = 'nsum';"]],
        "rule":                             [["RULE integer_literal ASSIGN_TYPE IF condition THEN conclusion (WITH weighting_factor)? SEMICOLON", "$$ = new yy.Rule(@1.first_line, @1.first_column, $2, $5, $7, $9)"]],
        "condition":                        [["condition_type (condition_concat)*", "$$ = new yy.Condition(@1.first_line, @1.first_column, $2.concat($1))"]],
        "condition_concat":                 [["condition_operator condition_type", "$$ = new yy.Subcondition(@1.first_line, @1.first_column, $1, $2);"]],
        "condition_operator":               [["AND", "$$ = new yy.AndOperator(@1.first_line, @1.first_column);"], ["OR", "$$ = new yy.OrOperator(@1.first_line, @1.first_column);"]],
        "condition_type":                   [["subcondition", "$$ = $1"], ["variable_name", "$$ = $1"]],
        "subcondition":                     [["NOT OPEN_P logic CLOSE_P", "$3.negate(); $$ = $3;"], ["logic", "$$ = $1"]],
        "conclusion":                       [["logic (logic_concat)*", "$$ = new yy.Conclusion(@1.first_line, @1.first_column, $2.concat($1));"]],
        "logic_concat":                     [["COLON logic", "$$ = $1"]],
        "logic":                            [["variable_name IS NOT? term", "var negated = false; if($3 != undefined) negated = true; $$ = new yy.LogicPart(@1.first_line, @1.first_column, $1, negated, $4);"]],
        "weighting_factor":                 [["variable_name", "$$ = $1"], ["numeric_literal", "$$ = $1"]],
        "function_block_name":              [["identifier", "$$ = $1"]],
        "rule_block_name":                  [["identifier", "$$ = $1"]],
        "term":                             [["identifier", "$$ = $1"]],
        "f_variable_name":                  [["identifier", "$$ = $1"]],
        "variable_name":                    [["identifier", "$$ = new yy.Variable(@1.first_line, @1.first_column, $1);"]],
        "numeric_literal":                  [["integer_literal", "$$ = new yy.NumberVal(@1.first_line, @1.first_column, $1);"],
                                                ["real_literal", "$$ = new yy.NumberVal(@1.first_line, @1.first_column, $1);"]],
        "input_declarations":               [["VAR_INPUT var_declaration var_declaration* END_VAR", "$$ = new yy.InputBlock(@1.first_line, @1.first_column, $2, $3);"]],
        "output_declarations":              [["VAR_OUTPUT var_declaration var_declaration* END_VAR", "$$ = new yy.OutputBlock(@1.first_line, @1.first_column, $2, $3);"]],
        "var_declarations":                 [["VAR var_declaration var_declaration* END_VAR", "$$ = new yy.VarBlock(@1.first_line, @1.first_column, $3.concat($2));"]],
        "var_declaration":                  [["identifier ASSIGN_TYPE var_types SEMICOLON", "$$ = new yy.VariableDeclaration(@1.first_line, @1.first_column, $1, $3);"]],
        "var_types":                        [["REAL", "$$ = $1"], ["INTEGER", "$$ = $1"]],
        "identifier":                       [["ID", "$$ = $1"]],
        "signed_integer":                   [["sign INT", "$$ = $1 * $2"]],
        "sign":                             [["PLUS", "$$ = +1"], ["MINUS", "$$ = -1"]],
        "integer_literal":                  [["signed_integer", "$$ = $1"], ["INT", "$$ = $1"], ["BIN_INT", "$$ = $1"], ["OCT_INT", "$$ = $1"], ["HEX_INT", "$$ = $1"]],
        "real_literal":                     [["signed_integer DOT INT exponent?", "$$ = parseFloat($1 + '.' + $3);"]],
        "exponent":                         [["E sign INT"]]
    }
};

